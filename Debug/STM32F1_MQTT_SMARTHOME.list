
STM32F1_MQTT_SMARTHOME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068ec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a00  08006a00  08006a00  00016a00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007400  08007400  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08007400  08007400  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007400  08007400  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007400  08007400  00017400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007404  08007404  00017404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08007408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  200001e8  080075f0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  080075f0  000203b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a1a  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e21  00000000  00000000  00032c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db0  00000000  00000000  00035a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c60  00000000  00000000  00036800  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017289  00000000  00000000  00037460  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000da10  00000000  00000000  0004e6e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077600  00000000  00000000  0005c0f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d36f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000417c  00000000  00000000  000d3774  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	080069e4 	.word	0x080069e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	080069e4 	.word	0x080069e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <SHT20_Measure>:
* @brief	测量函数
* @details	通过接受参数测量相对湿度或温度
* @param	MeasureTorH：'H'表示测量相对湿度，'T'表示温度
* @retval	float类型的测量结果
===========================================================*/
float SHT20_Measure(char MeasureTorH) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	//SHT20_Reset();//可以注释掉，非必须
	//I2C_Delay_S(2);//可以注释掉，非必须

	I2C_Start();//开始
 8000b32:	f000 faa5 	bl	8001080 <I2C_Start>
	I2C_SendByte(SHT20_ADDRESS_W);//写地址
 8000b36:	2080      	movs	r0, #128	; 0x80
 8000b38:	f000 fae6 	bl	8001108 <I2C_SendByte>

	if (I2C_WaitAck(50000)) {
 8000b3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b40:	f000 fb20 	bl	8001184 <I2C_WaitAck>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d073      	beq.n	8000c32 <SHT20_Measure+0x10a>
		if (MeasureTorH == 'H') {//如果是测量相对湿度
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b48      	cmp	r3, #72	; 0x48
 8000b4e:	d103      	bne.n	8000b58 <SHT20_Measure+0x30>
			I2C_SendByte(SHT20_N_RH_CMD);
 8000b50:	20f5      	movs	r0, #245	; 0xf5
 8000b52:	f000 fad9 	bl	8001108 <I2C_SendByte>
 8000b56:	e002      	b.n	8000b5e <SHT20_Measure+0x36>
		}
		else {//如果是测量温度
			I2C_SendByte(SHT20_N_T_CMD);
 8000b58:	20f3      	movs	r0, #243	; 0xf3
 8000b5a:	f000 fad5 	bl	8001108 <I2C_SendByte>
		}

		if (I2C_WaitAck(50000)) {
 8000b5e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b62:	f000 fb0f 	bl	8001184 <I2C_WaitAck>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d05c      	beq.n	8000c26 <SHT20_Measure+0xfe>
			I2C_Start();
 8000b6c:	f000 fa88 	bl	8001080 <I2C_Start>
			I2C_SendByte(SHT20_ADDRESS_R);
 8000b70:	2081      	movs	r0, #129	; 0x81
 8000b72:	f000 fac9 	bl	8001108 <I2C_SendByte>
			while (!I2C_WaitAck(50000))
 8000b76:	e004      	b.n	8000b82 <SHT20_Measure+0x5a>
			{
				I2C_Start();//开始信号
 8000b78:	f000 fa82 	bl	8001080 <I2C_Start>
				I2C_SendByte(SHT20_ADDRESS_R);//写地址
 8000b7c:	2081      	movs	r0, #129	; 0x81
 8000b7e:	f000 fac3 	bl	8001108 <I2C_SendByte>
			while (!I2C_WaitAck(50000))
 8000b82:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b86:	f000 fafd 	bl	8001184 <I2C_WaitAck>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d0f3      	beq.n	8000b78 <SHT20_Measure+0x50>
			}//循环等待测量结束
			I2C_Delay_Ms(70);
 8000b90:	2046      	movs	r0, #70	; 0x46
 8000b92:	f001 fa11 	bl	8001fb8 <HAL_Delay>
			char RHresult[3] = { 0 };
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	460a      	mov	r2, r1
 8000b9e:	801a      	strh	r2, [r3, #0]
 8000ba0:	460a      	mov	r2, r1
 8000ba2:	709a      	strb	r2, [r3, #2]
			RHresult[0] = I2C_ReadByte();//MSB
 8000ba4:	f000 fb62 	bl	800126c <I2C_ReadByte>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	733b      	strb	r3, [r7, #12]
			I2C_SendAck();
 8000bac:	f000 fb1e 	bl	80011ec <I2C_SendAck>
			RHresult[1] = I2C_ReadByte();//LSB
 8000bb0:	f000 fb5c 	bl	800126c <I2C_ReadByte>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	737b      	strb	r3, [r7, #13]
			I2C_SendAck();
 8000bb8:	f000 fb18 	bl	80011ec <I2C_SendAck>
			RHresult[2] = I2C_ReadByte();//校验和
 8000bbc:	f000 fb56 	bl	800126c <I2C_ReadByte>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	73bb      	strb	r3, [r7, #14]
			I2C_SendNAck();
 8000bc4:	f000 fb32 	bl	800122c <I2C_SendNAck>
			I2C_Stop();
 8000bc8:	f000 fa7a 	bl	80010c0 <I2C_Stop>
			if (!SHT20_CheckSum_CRC8(RHresult)) {//进行CRC8校验
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 f83b 	bl	8000c4c <SHT20_CheckSum_CRC8>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d105      	bne.n	8000be8 <SHT20_Measure+0xc0>
#ifdef PRINTF_SHT20_INFO
				SHT20_Print("CRC8检验失败");
 8000bdc:	4819      	ldr	r0, [pc, #100]	; (8000c44 <SHT20_Measure+0x11c>)
 8000bde:	f000 f8e9 	bl	8000db4 <SHT20_Print>
		SHT20_Print("I2C通讯异常");
#endif//PRINTF_SHT20_INFO
		return I2C_Fail;
	}

	return I2C_Fail;
 8000be2:	f04f 0300 	mov.w	r3, #0
 8000be6:	e029      	b.n	8000c3c <SHT20_Measure+0x114>
			else if (MeasureTorH == 'H') {
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	2b48      	cmp	r3, #72	; 0x48
 8000bec:	d10d      	bne.n	8000c0a <SHT20_Measure+0xe2>
				return SHT20_Calculate('H', (RHresult[0] << 8) + RHresult[1]);//进行换算
 8000bee:	7b3b      	ldrb	r3, [r7, #12]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	021b      	lsls	r3, r3, #8
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	7b7b      	ldrb	r3, [r7, #13]
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	4413      	add	r3, r2
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	4619      	mov	r1, r3
 8000c00:	2048      	movs	r0, #72	; 0x48
 8000c02:	f000 f871 	bl	8000ce8 <SHT20_Calculate>
 8000c06:	4603      	mov	r3, r0
 8000c08:	e018      	b.n	8000c3c <SHT20_Measure+0x114>
				return SHT20_Calculate('T', (RHresult[0] << 8) + RHresult[1]);//进行换算
 8000c0a:	7b3b      	ldrb	r3, [r7, #12]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	7b7b      	ldrb	r3, [r7, #13]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	4413      	add	r3, r2
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	2054      	movs	r0, #84	; 0x54
 8000c1e:	f000 f863 	bl	8000ce8 <SHT20_Calculate>
 8000c22:	4603      	mov	r3, r0
 8000c24:	e00a      	b.n	8000c3c <SHT20_Measure+0x114>
			SHT20_Print("I2C通讯异常");
 8000c26:	4808      	ldr	r0, [pc, #32]	; (8000c48 <SHT20_Measure+0x120>)
 8000c28:	f000 f8c4 	bl	8000db4 <SHT20_Print>
			return I2C_Fail;
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	e004      	b.n	8000c3c <SHT20_Measure+0x114>
		SHT20_Print("I2C通讯异常");
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <SHT20_Measure+0x120>)
 8000c34:	f000 f8be 	bl	8000db4 <SHT20_Print>
		return I2C_Fail;
 8000c38:	f04f 0300 	mov.w	r3, #0

}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	08006a28 	.word	0x08006a28
 8000c48:	08006a3c 	.word	0x08006a3c

08000c4c <SHT20_CheckSum_CRC8>:
* @brief	CRC8检验
* @details	对测量结果的MSB和LSB进行校验，判断是否等于接收到的检验和
* @param	Result：测量结果所在数组的头指针
* @retval	检验成功返回1，失败返回0
===========================================================*/
uint8_t SHT20_CheckSum_CRC8(char* Result) {
 8000c4c:	b480      	push	{r7}
 8000c4e:	b087      	sub	sp, #28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	char data[2];
	data[0] = Result[0];
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	733b      	strb	r3, [r7, #12]
	data[1] = Result[1];
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	785b      	ldrb	r3, [r3, #1]
 8000c5e:	737b      	strb	r3, [r7, #13]

	uint32_t POLYNOMIAL = 0x131;
 8000c60:	f240 1331 	movw	r3, #305	; 0x131
 8000c64:	613b      	str	r3, [r7, #16]
	char crc = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	75fb      	strb	r3, [r7, #23]
	char bit = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	75bb      	strb	r3, [r7, #22]
	char byteCtr = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	757b      	strb	r3, [r7, #21]

	//calculates 8-Bit checksum with given polynomial
	for (byteCtr = 0; byteCtr < 2; ++byteCtr)
 8000c72:	2300      	movs	r3, #0
 8000c74:	757b      	strb	r3, [r7, #21]
 8000c76:	e023      	b.n	8000cc0 <SHT20_CheckSum_CRC8+0x74>
	{
		crc ^= (data[byteCtr]);
 8000c78:	7d7b      	ldrb	r3, [r7, #21]
 8000c7a:	f107 0218 	add.w	r2, r7, #24
 8000c7e:	4413      	add	r3, r2
 8000c80:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8000c84:	7dfb      	ldrb	r3, [r7, #23]
 8000c86:	4053      	eors	r3, r2
 8000c88:	75fb      	strb	r3, [r7, #23]
		for (bit = 8; bit > 0; --bit)
 8000c8a:	2308      	movs	r3, #8
 8000c8c:	75bb      	strb	r3, [r7, #22]
 8000c8e:	e011      	b.n	8000cb4 <SHT20_CheckSum_CRC8+0x68>
		{
			if (crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
 8000c90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	da07      	bge.n	8000ca8 <SHT20_CheckSum_CRC8+0x5c>
 8000c98:	7dfb      	ldrb	r3, [r7, #23]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	4053      	eors	r3, r2
 8000ca4:	75fb      	strb	r3, [r7, #23]
 8000ca6:	e002      	b.n	8000cae <SHT20_CheckSum_CRC8+0x62>
			else crc = (crc << 1);
 8000ca8:	7dfb      	ldrb	r3, [r7, #23]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	75fb      	strb	r3, [r7, #23]
		for (bit = 8; bit > 0; --bit)
 8000cae:	7dbb      	ldrb	r3, [r7, #22]
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	75bb      	strb	r3, [r7, #22]
 8000cb4:	7dbb      	ldrb	r3, [r7, #22]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1ea      	bne.n	8000c90 <SHT20_CheckSum_CRC8+0x44>
	for (byteCtr = 0; byteCtr < 2; ++byteCtr)
 8000cba:	7d7b      	ldrb	r3, [r7, #21]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	757b      	strb	r3, [r7, #21]
 8000cc0:	7d7b      	ldrb	r3, [r7, #21]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d9d8      	bls.n	8000c78 <SHT20_CheckSum_CRC8+0x2c>
		}
	}
	if (crc == Result[2]) {
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3302      	adds	r3, #2
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	7dfa      	ldrb	r2, [r7, #23]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d101      	bne.n	8000cd6 <SHT20_CheckSum_CRC8+0x8a>
		return 1;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e000      	b.n	8000cd8 <SHT20_CheckSum_CRC8+0x8c>
	}
	else {
		return 0;
 8000cd6:	2300      	movs	r3, #0
	}

}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	371c      	adds	r7, #28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	0000      	movs	r0, r0
 8000ce4:	0000      	movs	r0, r0
	...

08000ce8 <SHT20_Calculate>:
* @details	根据接受到的数据进行换算
* @param	TorR：由'H'还是'T'选择进行相对湿度的换算还是温度的换算
* @param	data：测量结果
* @retval	float类型的换算结果，亦是最终结果
===========================================================*/
float SHT20_Calculate(char TorR, uint16_t data) {
 8000ce8:	b590      	push	{r4, r7, lr}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	460a      	mov	r2, r1
 8000cf2:	71fb      	strb	r3, [r7, #7]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	80bb      	strh	r3, [r7, #4]
	data &= 0xfffc;
 8000cf8:	88bb      	ldrh	r3, [r7, #4]
 8000cfa:	f023 0303 	bic.w	r3, r3, #3
 8000cfe:	80bb      	strh	r3, [r7, #4]
	if (TorR == 'H') {
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	2b48      	cmp	r3, #72	; 0x48
 8000d04:	d122      	bne.n	8000d4c <SHT20_Calculate+0x64>
		return (data *125.0 / 65536.0) - 6;
 8000d06:	88bb      	ldrh	r3, [r7, #4]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fb7b 	bl	8000404 <__aeabi_i2d>
 8000d0e:	f04f 0200 	mov.w	r2, #0
 8000d12:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <SHT20_Calculate+0xc0>)
 8000d14:	f7ff fbe0 	bl	80004d8 <__aeabi_dmul>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	460c      	mov	r4, r1
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	4621      	mov	r1, r4
 8000d20:	f04f 0200 	mov.w	r2, #0
 8000d24:	4b21      	ldr	r3, [pc, #132]	; (8000dac <SHT20_Calculate+0xc4>)
 8000d26:	f7ff fd01 	bl	800072c <__aeabi_ddiv>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	460c      	mov	r4, r1
 8000d2e:	4618      	mov	r0, r3
 8000d30:	4621      	mov	r1, r4
 8000d32:	f04f 0200 	mov.w	r2, #0
 8000d36:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <SHT20_Calculate+0xc8>)
 8000d38:	f7ff fa16 	bl	8000168 <__aeabi_dsub>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	460c      	mov	r4, r1
 8000d40:	4618      	mov	r0, r3
 8000d42:	4621      	mov	r1, r4
 8000d44:	f7ff fea0 	bl	8000a88 <__aeabi_d2f>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	e021      	b.n	8000d90 <SHT20_Calculate+0xa8>
	}
	else {
		return (data *175.72 / 65536.0) - 46.85;
 8000d4c:	88bb      	ldrh	r3, [r7, #4]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fb58 	bl	8000404 <__aeabi_i2d>
 8000d54:	a310      	add	r3, pc, #64	; (adr r3, 8000d98 <SHT20_Calculate+0xb0>)
 8000d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5a:	f7ff fbbd 	bl	80004d8 <__aeabi_dmul>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460c      	mov	r4, r1
 8000d62:	4618      	mov	r0, r3
 8000d64:	4621      	mov	r1, r4
 8000d66:	f04f 0200 	mov.w	r2, #0
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <SHT20_Calculate+0xc4>)
 8000d6c:	f7ff fcde 	bl	800072c <__aeabi_ddiv>
 8000d70:	4603      	mov	r3, r0
 8000d72:	460c      	mov	r4, r1
 8000d74:	4618      	mov	r0, r3
 8000d76:	4621      	mov	r1, r4
 8000d78:	a309      	add	r3, pc, #36	; (adr r3, 8000da0 <SHT20_Calculate+0xb8>)
 8000d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7e:	f7ff f9f3 	bl	8000168 <__aeabi_dsub>
 8000d82:	4603      	mov	r3, r0
 8000d84:	460c      	mov	r4, r1
 8000d86:	4618      	mov	r0, r3
 8000d88:	4621      	mov	r1, r4
 8000d8a:	f7ff fe7d 	bl	8000a88 <__aeabi_d2f>
 8000d8e:	4603      	mov	r3, r0
	}
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd90      	pop	{r4, r7, pc}
 8000d98:	3d70a3d7 	.word	0x3d70a3d7
 8000d9c:	4065f70a 	.word	0x4065f70a
 8000da0:	cccccccd 	.word	0xcccccccd
 8000da4:	40476ccc 	.word	0x40476ccc
 8000da8:	405f4000 	.word	0x405f4000
 8000dac:	40f00000 	.word	0x40f00000
 8000db0:	40180000 	.word	0x40180000

08000db4 <SHT20_Print>:

void SHT20_Print(char* str)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	uint16_t len = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	81fb      	strh	r3, [r7, #14]
	char* str_temp = str;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	60bb      	str	r3, [r7, #8]
	while (*str_temp++ != '\0') {
 8000dc4:	e002      	b.n	8000dcc <SHT20_Print+0x18>
		len++;
 8000dc6:	89fb      	ldrh	r3, [r7, #14]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	81fb      	strh	r3, [r7, #14]
	while (*str_temp++ != '\0') {
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	60ba      	str	r2, [r7, #8]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1f6      	bne.n	8000dc6 <SHT20_Print+0x12>
	}
	HAL_UART_Transmit(&huart1, (uint8_t *)str, len, 0xffff);
 8000dd8:	89fa      	ldrh	r2, [r7, #14]
 8000dda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	4806      	ldr	r0, [pc, #24]	; (8000dfc <SHT20_Print+0x48>)
 8000de2:	f003 f936 	bl	8004052 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)("\r\n"), 2, 0xffff);
 8000de6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dea:	2202      	movs	r2, #2
 8000dec:	4904      	ldr	r1, [pc, #16]	; (8000e00 <SHT20_Print+0x4c>)
 8000dee:	4803      	ldr	r0, [pc, #12]	; (8000dfc <SHT20_Print+0x48>)
 8000df0:	f003 f92f 	bl	8004052 <HAL_UART_Transmit>
}
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000320 	.word	0x20000320
 8000e00:	08006a64 	.word	0x08006a64

08000e04 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <MX_ADC1_Init+0x74>)
 8000e16:	4a19      	ldr	r2, [pc, #100]	; (8000e7c <MX_ADC1_Init+0x78>)
 8000e18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MX_ADC1_Init+0x74>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <MX_ADC1_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_ADC1_Init+0x74>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <MX_ADC1_Init+0x74>)
 8000e2e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e34:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <MX_ADC1_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_ADC1_Init+0x74>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e40:	480d      	ldr	r0, [pc, #52]	; (8000e78 <MX_ADC1_Init+0x74>)
 8000e42:	f001 f8db 	bl	8001ffc <HAL_ADC_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000e4c:	f000 facd 	bl	80013ea <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e50:	2303      	movs	r3, #3
 8000e52:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e54:	2301      	movs	r3, #1
 8000e56:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000e58:	2307      	movs	r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_ADC1_Init+0x74>)
 8000e62:	f001 fb57 	bl	8002514 <HAL_ADC_ConfigChannel>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000e6c:	f000 fabd 	bl	80013ea <Error_Handler>
  }

}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000254 	.word	0x20000254
 8000e7c:	40012400 	.word	0x40012400

08000e80 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a14      	ldr	r2, [pc, #80]	; (8000eec <HAL_ADC_MspInit+0x6c>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d121      	bne.n	8000ee4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <HAL_ADC_MspInit+0x70>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <HAL_ADC_MspInit+0x70>)
 8000ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eaa:	6193      	str	r3, [r2, #24]
 8000eac:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <HAL_ADC_MspInit+0x70>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <HAL_ADC_MspInit+0x70>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a0c      	ldr	r2, [pc, #48]	; (8000ef0 <HAL_ADC_MspInit+0x70>)
 8000ebe:	f043 0304 	orr.w	r3, r3, #4
 8000ec2:	6193      	str	r3, [r2, #24]
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_ADC_MspInit+0x70>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	4619      	mov	r1, r3
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <HAL_ADC_MspInit+0x74>)
 8000ee0:	f001 fe20 	bl	8002b24 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40012400 	.word	0x40012400
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40010800 	.word	0x40010800

08000ef8 <Get_Adc>:
/* USER CODE BEGIN 1 */
//获得ADC值
//ch: 通道值 0~16，取值范围为：ADC_CHANNEL_0~ADC_CHANNEL_16
//返回值:转换结果
u16 Get_Adc(u32 ch)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef ADC1_ChanConf;

    ADC1_ChanConf.Channel=ch;                                   //通道
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	60fb      	str	r3, [r7, #12]
    ADC1_ChanConf.Rank=1;                                       //第1个序列，序列1
 8000f04:	2301      	movs	r3, #1
 8000f06:	613b      	str	r3, [r7, #16]
    ADC1_ChanConf.SamplingTime=ADC_SAMPLETIME_239CYCLES_5;        //采样时间
 8000f08:	2307      	movs	r3, #7
 8000f0a:	617b      	str	r3, [r7, #20]
    HAL_ADC_ConfigChannel(&hadc1,&ADC1_ChanConf);        //通道配置
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	4619      	mov	r1, r3
 8000f12:	4809      	ldr	r0, [pc, #36]	; (8000f38 <Get_Adc+0x40>)
 8000f14:	f001 fafe 	bl	8002514 <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&hadc1);                               //开启ADC
 8000f18:	4807      	ldr	r0, [pc, #28]	; (8000f38 <Get_Adc+0x40>)
 8000f1a:	f001 f947 	bl	80021ac <HAL_ADC_Start>

    HAL_ADC_PollForConversion(&hadc1,10);                //轮询转换
 8000f1e:	210a      	movs	r1, #10
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <Get_Adc+0x40>)
 8000f22:	f001 f9f1 	bl	8002308 <HAL_ADC_PollForConversion>

	return (u16)HAL_ADC_GetValue(&hadc1);	        //返回最近一次ADC1规则组的转换结果
 8000f26:	4804      	ldr	r0, [pc, #16]	; (8000f38 <Get_Adc+0x40>)
 8000f28:	f001 fae8 	bl	80024fc <HAL_ADC_GetValue>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	b29b      	uxth	r3, r3
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000254 	.word	0x20000254

08000f3c <Get_Adc_Average>:
//获取指定通道的转换值，取times次,然后平均
//times:获取次数
//返回值:通道ch的times次转换结果平均值
u16 Get_Adc_Average(u32 ch,u8 times)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	70fb      	strb	r3, [r7, #3]
	u32 temp_val=0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
	u8 t;
	for(t=0;t<times;t++)
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	72fb      	strb	r3, [r7, #11]
 8000f50:	e00d      	b.n	8000f6e <Get_Adc_Average+0x32>
	{
		temp_val+=Get_Adc(ch);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffd0 	bl	8000ef8 <Get_Adc>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4413      	add	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
		HAL_Delay(5);
 8000f62:	2005      	movs	r0, #5
 8000f64:	f001 f828 	bl	8001fb8 <HAL_Delay>
	for(t=0;t<times;t++)
 8000f68:	7afb      	ldrb	r3, [r7, #11]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	72fb      	strb	r3, [r7, #11]
 8000f6e:	7afa      	ldrb	r2, [r7, #11]
 8000f70:	78fb      	ldrb	r3, [r7, #3]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d3ed      	bcc.n	8000f52 <Get_Adc_Average+0x16>
	}
	return temp_val/times;
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	b29b      	uxth	r3, r3
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8e:	f107 0310 	add.w	r3, r7, #16
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9c:	4b27      	ldr	r3, [pc, #156]	; (800103c <MX_GPIO_Init+0xb4>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a26      	ldr	r2, [pc, #152]	; (800103c <MX_GPIO_Init+0xb4>)
 8000fa2:	f043 0320 	orr.w	r3, r3, #32
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b24      	ldr	r3, [pc, #144]	; (800103c <MX_GPIO_Init+0xb4>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f003 0320 	and.w	r3, r3, #32
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb4:	4b21      	ldr	r3, [pc, #132]	; (800103c <MX_GPIO_Init+0xb4>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a20      	ldr	r2, [pc, #128]	; (800103c <MX_GPIO_Init+0xb4>)
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	; (800103c <MX_GPIO_Init+0xb4>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <MX_GPIO_Init+0xb4>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a1a      	ldr	r2, [pc, #104]	; (800103c <MX_GPIO_Init+0xb4>)
 8000fd2:	f043 0308 	orr.w	r3, r3, #8
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b18      	ldr	r3, [pc, #96]	; (800103c <MX_GPIO_Init+0xb4>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, I2C1_SDA_Pin|I2C1_SCL_Pin, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	21c0      	movs	r1, #192	; 0xc0
 8000fe8:	4815      	ldr	r0, [pc, #84]	; (8001040 <MX_GPIO_Init+0xb8>)
 8000fea:	f001 ff0c 	bl	8002e06 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f24c 0101 	movw	r1, #49153	; 0xc001
 8000ff4:	4813      	ldr	r0, [pc, #76]	; (8001044 <MX_GPIO_Init+0xbc>)
 8000ff6:	f001 ff06 	bl	8002e06 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 8000ffa:	23c0      	movs	r3, #192	; 0xc0
 8000ffc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ffe:	2311      	movs	r3, #17
 8001000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	4619      	mov	r1, r3
 8001010:	480b      	ldr	r0, [pc, #44]	; (8001040 <MX_GPIO_Init+0xb8>)
 8001012:	f001 fd87 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15;
 8001016:	f24c 0301 	movw	r3, #49153	; 0xc001
 800101a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101c:	2301      	movs	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2302      	movs	r3, #2
 8001026:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001028:	f107 0310 	add.w	r3, r7, #16
 800102c:	4619      	mov	r1, r3
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_GPIO_Init+0xbc>)
 8001030:	f001 fd78 	bl	8002b24 <HAL_GPIO_Init>

}
 8001034:	bf00      	nop
 8001036:	3720      	adds	r7, #32
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40021000 	.word	0x40021000
 8001040:	40010800 	.word	0x40010800
 8001044:	40010c00 	.word	0x40010c00

08001048 <I2C_Delay_Us>:
* @param	None
* @retval	None
*/

static I2C_Delay_Us(uint16_t i)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	80fb      	strh	r3, [r7, #6]
	i*=50;
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	461a      	mov	r2, r3
 8001056:	0092      	lsls	r2, r2, #2
 8001058:	4413      	add	r3, r2
 800105a:	461a      	mov	r2, r3
 800105c:	0091      	lsls	r1, r2, #2
 800105e:	461a      	mov	r2, r3
 8001060:	460b      	mov	r3, r1
 8001062:	4413      	add	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	80fb      	strh	r3, [r7, #6]
	while(i--);
 8001068:	bf00      	nop
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	80fa      	strh	r2, [r7, #6]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1fa      	bne.n	800106a <I2C_Delay_Us+0x22>
}
 8001074:	bf00      	nop
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <I2C_Start>:

void I2C_Start(void) {
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	SDA_H;										//SDA拉高
 8001084:	2201      	movs	r2, #1
 8001086:	2140      	movs	r1, #64	; 0x40
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <I2C_Start+0x3c>)
 800108a:	f001 febc 	bl	8002e06 <HAL_GPIO_WritePin>
	//I2C_Delay_Us(I2C_Delay_Times);				//延时
	SCL_H;										//SCL拉高
 800108e:	2201      	movs	r2, #1
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	480a      	ldr	r0, [pc, #40]	; (80010bc <I2C_Start+0x3c>)
 8001094:	f001 feb7 	bl	8002e06 <HAL_GPIO_WritePin>
	I2C_Delay_Us(I2C_Delay_Times);				//延时
 8001098:	2005      	movs	r0, #5
 800109a:	f7ff ffd5 	bl	8001048 <I2C_Delay_Us>
	SDA_L;										//SDA拉低
 800109e:	2200      	movs	r2, #0
 80010a0:	2140      	movs	r1, #64	; 0x40
 80010a2:	4806      	ldr	r0, [pc, #24]	; (80010bc <I2C_Start+0x3c>)
 80010a4:	f001 feaf 	bl	8002e06 <HAL_GPIO_WritePin>
	I2C_Delay_Us(I2C_Delay_Times);				//延时
 80010a8:	2005      	movs	r0, #5
 80010aa:	f7ff ffcd 	bl	8001048 <I2C_Delay_Us>
	SCL_L;										//SCL拉低，钳住
 80010ae:	2200      	movs	r2, #0
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	4802      	ldr	r0, [pc, #8]	; (80010bc <I2C_Start+0x3c>)
 80010b4:	f001 fea7 	bl	8002e06 <HAL_GPIO_WritePin>
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40010800 	.word	0x40010800

080010c0 <I2C_Stop>:
* @brief	发送I2C结束信号
* @details	当SCL为高时，SDA由低拉高，就会形成结束信号
* @param	None
* @retval	None
*/
void I2C_Stop(void) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	SDA_L;										//SDA拉低
 80010c4:	2200      	movs	r2, #0
 80010c6:	2140      	movs	r1, #64	; 0x40
 80010c8:	480e      	ldr	r0, [pc, #56]	; (8001104 <I2C_Stop+0x44>)
 80010ca:	f001 fe9c 	bl	8002e06 <HAL_GPIO_WritePin>
	SCL_L;										//SCL拉低
 80010ce:	2200      	movs	r2, #0
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	480c      	ldr	r0, [pc, #48]	; (8001104 <I2C_Stop+0x44>)
 80010d4:	f001 fe97 	bl	8002e06 <HAL_GPIO_WritePin>
	I2C_Delay_Us(I2C_Delay_Times);				//延时
 80010d8:	2005      	movs	r0, #5
 80010da:	f7ff ffb5 	bl	8001048 <I2C_Delay_Us>
	SCL_H;										//SCL拉高
 80010de:	2201      	movs	r2, #1
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	4808      	ldr	r0, [pc, #32]	; (8001104 <I2C_Stop+0x44>)
 80010e4:	f001 fe8f 	bl	8002e06 <HAL_GPIO_WritePin>
	I2C_Delay_Us(I2C_Delay_Times);				//延时
 80010e8:	2005      	movs	r0, #5
 80010ea:	f7ff ffad 	bl	8001048 <I2C_Delay_Us>
	SDA_H;										//SDA拉低
 80010ee:	2201      	movs	r2, #1
 80010f0:	2140      	movs	r1, #64	; 0x40
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <I2C_Stop+0x44>)
 80010f4:	f001 fe87 	bl	8002e06 <HAL_GPIO_WritePin>
	I2C_Delay_Us((I2C_Delay_Times * 2));		//延时
 80010f8:	200a      	movs	r0, #10
 80010fa:	f7ff ffa5 	bl	8001048 <I2C_Delay_Us>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40010800 	.word	0x40010800

08001108 <I2C_SendByte>:
* @brief	通过I2C发送（写）数据
* @details	当SCL为高时，保持SDA（高为1，低位0）稳定，即可传输一位数据
* @param	byte：想要发送的数据（1字节，8位）
* @retval	None
*/
void I2C_SendByte(uint8_t sendByte) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
	SCL_L;										//先拉低时钟线
 8001112:	2200      	movs	r2, #0
 8001114:	2180      	movs	r1, #128	; 0x80
 8001116:	481a      	ldr	r0, [pc, #104]	; (8001180 <I2C_SendByte+0x78>)
 8001118:	f001 fe75 	bl	8002e06 <HAL_GPIO_WritePin>
	I2C_Delay_Us(I2C_Delay_Times);				//延时
 800111c:	2005      	movs	r0, #5
 800111e:	f7ff ff93 	bl	8001048 <I2C_Delay_Us>
	for (int i = 0; i < 8; i++)
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	e024      	b.n	8001172 <I2C_SendByte+0x6a>
	{
		if (sendByte & 0x80) {					//如果高位为1则拉高，否则拉低
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	da05      	bge.n	800113c <I2C_SendByte+0x34>
			SDA_H;								//SDA拉高
 8001130:	2201      	movs	r2, #1
 8001132:	2140      	movs	r1, #64	; 0x40
 8001134:	4812      	ldr	r0, [pc, #72]	; (8001180 <I2C_SendByte+0x78>)
 8001136:	f001 fe66 	bl	8002e06 <HAL_GPIO_WritePin>
 800113a:	e004      	b.n	8001146 <I2C_SendByte+0x3e>
		}
		else {
			SDA_L;								//SDA拉低
 800113c:	2200      	movs	r2, #0
 800113e:	2140      	movs	r1, #64	; 0x40
 8001140:	480f      	ldr	r0, [pc, #60]	; (8001180 <I2C_SendByte+0x78>)
 8001142:	f001 fe60 	bl	8002e06 <HAL_GPIO_WritePin>
		}
		sendByte <<= 1;							//数据左移1位
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	71fb      	strb	r3, [r7, #7]
		I2C_Delay_Us(I2C_Delay_Times);			//延时
 800114c:	2005      	movs	r0, #5
 800114e:	f7ff ff7b 	bl	8001048 <I2C_Delay_Us>
		SCL_H;									//SCL拉高
 8001152:	2201      	movs	r2, #1
 8001154:	2180      	movs	r1, #128	; 0x80
 8001156:	480a      	ldr	r0, [pc, #40]	; (8001180 <I2C_SendByte+0x78>)
 8001158:	f001 fe55 	bl	8002e06 <HAL_GPIO_WritePin>
		I2C_Delay_Us(I2C_Delay_Times);			//延时
 800115c:	2005      	movs	r0, #5
 800115e:	f7ff ff73 	bl	8001048 <I2C_Delay_Us>
		SCL_L;									//SCL拉低
 8001162:	2200      	movs	r2, #0
 8001164:	2180      	movs	r1, #128	; 0x80
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <I2C_SendByte+0x78>)
 8001168:	f001 fe4d 	bl	8002e06 <HAL_GPIO_WritePin>
	for (int i = 0; i < 8; i++)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3301      	adds	r3, #1
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2b07      	cmp	r3, #7
 8001176:	ddd7      	ble.n	8001128 <I2C_SendByte+0x20>
	}
}
 8001178:	bf00      	nop
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40010800 	.word	0x40010800

08001184 <I2C_WaitAck>:
* @details	主机将和SCL和SDA都拉高之后，释放SDA，然后读取SDA，为低则表示接收到从机的应答信号
* @param	timeout: 在规定时间内等待应答信号
* @retval	I2C_WaitAck_Succeed：	成功等到应答信号
* @retval	I2C_WaitAck_Fail：		在规定时间内未等到应答信号
*/
uint8_t I2C_WaitAck(uint16_t timeout) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	80fb      	strh	r3, [r7, #6]
	SDA_H;										//SDA拉高
 800118e:	2201      	movs	r2, #1
 8001190:	2140      	movs	r1, #64	; 0x40
 8001192:	4815      	ldr	r0, [pc, #84]	; (80011e8 <I2C_WaitAck+0x64>)
 8001194:	f001 fe37 	bl	8002e06 <HAL_GPIO_WritePin>
	I2C_Delay_Us(I2C_Delay_Times);				//延时
 8001198:	2005      	movs	r0, #5
 800119a:	f7ff ff55 	bl	8001048 <I2C_Delay_Us>
	SCL_H;										//SCL拉高
 800119e:	2201      	movs	r2, #1
 80011a0:	2180      	movs	r1, #128	; 0x80
 80011a2:	4811      	ldr	r0, [pc, #68]	; (80011e8 <I2C_WaitAck+0x64>)
 80011a4:	f001 fe2f 	bl	8002e06 <HAL_GPIO_WritePin>
	I2C_Delay_Us(I2C_Delay_Times);				//延时
 80011a8:	2005      	movs	r0, #5
 80011aa:	f7ff ff4d 	bl	8001048 <I2C_Delay_Us>

	//开始循环查询SDA线上是否有应答信号
	while (SDA_R)
 80011ae:	e00a      	b.n	80011c6 <I2C_WaitAck+0x42>
	{
		//如果为1，则说明未产生应答
		if (!(--timeout)) {
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	80fb      	strh	r3, [r7, #6]
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d101      	bne.n	80011c0 <I2C_WaitAck+0x3c>
			//如果时间超时
			//如果为非主机测量，则此处不能Stop
			//I2C_Stop();							//发出终止信号
			return I2C_Fail;					//返回失败信息
 80011bc:	2300      	movs	r3, #0
 80011be:	e00f      	b.n	80011e0 <I2C_WaitAck+0x5c>
		}
		//如果时间未超时
		I2C_Delay_Us(1);						//延时一微秒
 80011c0:	2001      	movs	r0, #1
 80011c2:	f7ff ff41 	bl	8001048 <I2C_Delay_Us>
	while (SDA_R)
 80011c6:	2140      	movs	r1, #64	; 0x40
 80011c8:	4807      	ldr	r0, [pc, #28]	; (80011e8 <I2C_WaitAck+0x64>)
 80011ca:	f001 fe05 	bl	8002dd8 <HAL_GPIO_ReadPin>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1ed      	bne.n	80011b0 <I2C_WaitAck+0x2c>
	}
	//如果收到了应答信号，将SCL拉低
	SCL_L;										//SCL拉低
 80011d4:	2200      	movs	r2, #0
 80011d6:	2180      	movs	r1, #128	; 0x80
 80011d8:	4803      	ldr	r0, [pc, #12]	; (80011e8 <I2C_WaitAck+0x64>)
 80011da:	f001 fe14 	bl	8002e06 <HAL_GPIO_WritePin>
	return I2C_Succeed;							//返回成功信息
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40010800 	.word	0x40010800

080011ec <I2C_SendAck>:
* @brief	向从机发送应答信号
* @details	在SDA持续为低时，SCL产生一个正脉冲即表示产生一个应答信号
* @param	None
* @retval	None
*/
void I2C_SendAck(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	//重大bug 一定要先拉低scl再拉低sda，否则会读到0xFF
	SCL_L;										//SCL拉低
 80011f0:	2200      	movs	r2, #0
 80011f2:	2180      	movs	r1, #128	; 0x80
 80011f4:	480c      	ldr	r0, [pc, #48]	; (8001228 <I2C_SendAck+0x3c>)
 80011f6:	f001 fe06 	bl	8002e06 <HAL_GPIO_WritePin>
	SDA_L;										//SDA拉低
 80011fa:	2200      	movs	r2, #0
 80011fc:	2140      	movs	r1, #64	; 0x40
 80011fe:	480a      	ldr	r0, [pc, #40]	; (8001228 <I2C_SendAck+0x3c>)
 8001200:	f001 fe01 	bl	8002e06 <HAL_GPIO_WritePin>
	I2C_Delay_Us(I2C_Delay_Times);				//延时
 8001204:	2005      	movs	r0, #5
 8001206:	f7ff ff1f 	bl	8001048 <I2C_Delay_Us>
	SCL_H;										//SCL拉高
 800120a:	2201      	movs	r2, #1
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	4806      	ldr	r0, [pc, #24]	; (8001228 <I2C_SendAck+0x3c>)
 8001210:	f001 fdf9 	bl	8002e06 <HAL_GPIO_WritePin>
	I2C_Delay_Us(I2C_Delay_Times);				//延时
 8001214:	2005      	movs	r0, #5
 8001216:	f7ff ff17 	bl	8001048 <I2C_Delay_Us>
	SCL_L;										//SCL拉低
 800121a:	2200      	movs	r2, #0
 800121c:	2180      	movs	r1, #128	; 0x80
 800121e:	4802      	ldr	r0, [pc, #8]	; (8001228 <I2C_SendAck+0x3c>)
 8001220:	f001 fdf1 	bl	8002e06 <HAL_GPIO_WritePin>
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40010800 	.word	0x40010800

0800122c <I2C_SendNAck>:
* @brief	向从机发送非应答信号
* @details	在SDA持续为高时，SCL产生一个正脉冲即表示产生一个非应答信号
* @param	None
* @retval	None
*/
void I2C_SendNAck(void) {
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	SDA_H;										//SDA拉低
 8001230:	2201      	movs	r2, #1
 8001232:	2140      	movs	r1, #64	; 0x40
 8001234:	480c      	ldr	r0, [pc, #48]	; (8001268 <I2C_SendNAck+0x3c>)
 8001236:	f001 fde6 	bl	8002e06 <HAL_GPIO_WritePin>
	SCL_L;										//SCL拉低
 800123a:	2200      	movs	r2, #0
 800123c:	2180      	movs	r1, #128	; 0x80
 800123e:	480a      	ldr	r0, [pc, #40]	; (8001268 <I2C_SendNAck+0x3c>)
 8001240:	f001 fde1 	bl	8002e06 <HAL_GPIO_WritePin>
	I2C_Delay_Us(I2C_Delay_Times);				//延时
 8001244:	2005      	movs	r0, #5
 8001246:	f7ff feff 	bl	8001048 <I2C_Delay_Us>
	SCL_H;										//SCL拉高
 800124a:	2201      	movs	r2, #1
 800124c:	2180      	movs	r1, #128	; 0x80
 800124e:	4806      	ldr	r0, [pc, #24]	; (8001268 <I2C_SendNAck+0x3c>)
 8001250:	f001 fdd9 	bl	8002e06 <HAL_GPIO_WritePin>
	I2C_Delay_Us(I2C_Delay_Times);				//延时
 8001254:	2005      	movs	r0, #5
 8001256:	f7ff fef7 	bl	8001048 <I2C_Delay_Us>
	SCL_L;										//SCL拉低
 800125a:	2200      	movs	r2, #0
 800125c:	2180      	movs	r1, #128	; 0x80
 800125e:	4802      	ldr	r0, [pc, #8]	; (8001268 <I2C_SendNAck+0x3c>)
 8001260:	f001 fdd1 	bl	8002e06 <HAL_GPIO_WritePin>
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40010800 	.word	0x40010800

0800126c <I2C_ReadByte>:
* @brief	读取SDA线上的数据
* @details	将SDA拉高后，不断产生正脉冲后读取SDA的高低，即为从机发送的数据
* @param	None
* @retval	readByte：读到的一字节数据
*/
uint8_t I2C_ReadByte(void) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
	uint8_t readByte = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	71fb      	strb	r3, [r7, #7]
	SDA_H;
 8001276:	2201      	movs	r2, #1
 8001278:	2140      	movs	r1, #64	; 0x40
 800127a:	4817      	ldr	r0, [pc, #92]	; (80012d8 <I2C_ReadByte+0x6c>)
 800127c:	f001 fdc3 	bl	8002e06 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 8; i++) {
 8001280:	2300      	movs	r3, #0
 8001282:	71bb      	strb	r3, [r7, #6]
 8001284:	e01f      	b.n	80012c6 <I2C_ReadByte+0x5a>
		SCL_L;										//SCL拉低
 8001286:	2200      	movs	r2, #0
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	4813      	ldr	r0, [pc, #76]	; (80012d8 <I2C_ReadByte+0x6c>)
 800128c:	f001 fdbb 	bl	8002e06 <HAL_GPIO_WritePin>
		I2C_Delay_Us(I2C_Delay_Times);				//延时
 8001290:	2005      	movs	r0, #5
 8001292:	f7ff fed9 	bl	8001048 <I2C_Delay_Us>
		SCL_H;										//SCL拉高
 8001296:	2201      	movs	r2, #1
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	480f      	ldr	r0, [pc, #60]	; (80012d8 <I2C_ReadByte+0x6c>)
 800129c:	f001 fdb3 	bl	8002e06 <HAL_GPIO_WritePin>
		readByte <<= 1;
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	71fb      	strb	r3, [r7, #7]
		if (SDA_R) {
 80012a6:	2140      	movs	r1, #64	; 0x40
 80012a8:	480b      	ldr	r0, [pc, #44]	; (80012d8 <I2C_ReadByte+0x6c>)
 80012aa:	f001 fd95 	bl	8002dd8 <HAL_GPIO_ReadPin>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <I2C_ReadByte+0x4e>
			readByte++;
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	3301      	adds	r3, #1
 80012b8:	71fb      	strb	r3, [r7, #7]
		}
		I2C_Delay_Us(I2C_Delay_Times);				//延时
 80012ba:	2005      	movs	r0, #5
 80012bc:	f7ff fec4 	bl	8001048 <I2C_Delay_Us>
	for (uint8_t i = 0; i < 8; i++) {
 80012c0:	79bb      	ldrb	r3, [r7, #6]
 80012c2:	3301      	adds	r3, #1
 80012c4:	71bb      	strb	r3, [r7, #6]
 80012c6:	79bb      	ldrb	r3, [r7, #6]
 80012c8:	2b07      	cmp	r3, #7
 80012ca:	d9dc      	bls.n	8001286 <I2C_ReadByte+0x1a>
	}
	return readByte;
 80012cc:	79fb      	ldrb	r3, [r7, #7]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40010800 	.word	0x40010800

080012dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08e      	sub	sp, #56	; 0x38
 80012e0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012e2:	f000 fe07 	bl	8001ef4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012e6:	f000 f825 	bl	8001334 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012ea:	f7ff fe4d 	bl	8000f88 <MX_GPIO_Init>
	MX_ADC1_Init();
 80012ee:	f7ff fd89 	bl	8000e04 <MX_ADC1_Init>
	MX_TIM4_Init();
 80012f2:	f000 fbc7 	bl	8001a84 <MX_TIM4_Init>
	MX_USART1_UART_Init();
 80012f6:	f000 fc57 	bl	8001ba8 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 80012fa:	f000 fc7f 	bl	8001bfc <MX_USART3_UART_Init>

	/* USER CODE BEGIN 2 */
	OLED_Init();
 80012fe:	f000 fa93 	bl	8001828 <OLED_Init>

//	__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1,200);
	OLED_ShowString(0, 0, (u8*) "hello world");
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <main+0x50>)
 8001304:	2100      	movs	r1, #0
 8001306:	2000      	movs	r0, #0
 8001308:	f000 fa62 	bl	80017d0 <OLED_ShowString>
	OLED_Clear();
 800130c:	f000 f9da 	bl	80016c4 <OLED_Clear>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		Get_Sensor_Data();
 8001310:	f000 f872 	bl	80013f8 <Get_Sensor_Data>
		Oled_show();
 8001314:	f000 f88a 	bl	800142c <Oled_show>
		LEDR_ON(50);
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <main+0x54>)
 800131a:	2232      	movs	r2, #50	; 0x32
 800131c:	639a      	str	r2, [r3, #56]	; 0x38
		LEDG_ON(200);
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <main+0x54>)
 8001320:	22c8      	movs	r2, #200	; 0xc8
 8001322:	635a      	str	r2, [r3, #52]	; 0x34
		LEDB_ON(250);
 8001324:	4b02      	ldr	r3, [pc, #8]	; (8001330 <main+0x54>)
 8001326:	22fa      	movs	r2, #250	; 0xfa
 8001328:	63da      	str	r2, [r3, #60]	; 0x3c
		Get_Sensor_Data();
 800132a:	e7f1      	b.n	8001310 <main+0x34>
 800132c:	08006a68 	.word	0x08006a68
 8001330:	40000800 	.word	0x40000800

08001334 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b094      	sub	sp, #80	; 0x50
 8001338:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800133a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133e:	2228      	movs	r2, #40	; 0x28
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f003 fb0a 	bl	800495c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001364:	2301      	movs	r3, #1
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001372:	2301      	movs	r3, #1
 8001374:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001376:	2302      	movs	r3, #2
 8001378:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800137a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800137e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001380:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001384:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001386:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800138a:	4618      	mov	r0, r3
 800138c:	f001 fd54 	bl	8002e38 <HAL_RCC_OscConfig>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <SystemClock_Config+0x66>
		Error_Handler();
 8001396:	f000 f828 	bl	80013ea <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800139a:	230f      	movs	r3, #15
 800139c:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800139e:	2302      	movs	r3, #2
 80013a0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013aa:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2102      	movs	r1, #2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f001 ffbe 	bl	8003338 <HAL_RCC_ClockConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <SystemClock_Config+0x92>
		Error_Handler();
 80013c2:	f000 f812 	bl	80013ea <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013c6:	2302      	movs	r3, #2
 80013c8:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80013ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ce:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4618      	mov	r0, r3
 80013d4:	f002 f94c 	bl	8003670 <HAL_RCCEx_PeriphCLKConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0xae>
		Error_Handler();
 80013de:	f000 f804 	bl	80013ea <Error_Handler>
	}
}
 80013e2:	bf00      	nop
 80013e4:	3750      	adds	r7, #80	; 0x50
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
	...

080013f8 <Get_Sensor_Data>:
    HAL_Delay(1000);
    return 0;
}
//
void Get_Sensor_Data(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
    else sen_data.humidity++;
    if((sen_data.brightness+40)>=4095)
        sen_data.brightness=0;
    else sen_data.brightness+=40;
#else
    sen_data.humidity = SHT20_Measure('H');
 80013fc:	2048      	movs	r0, #72	; 0x48
 80013fe:	f7ff fb93 	bl	8000b28 <SHT20_Measure>
 8001402:	4602      	mov	r2, r0
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <Get_Sensor_Data+0x30>)
 8001406:	605a      	str	r2, [r3, #4]
    sen_data.temperature = SHT20_Measure('T');
 8001408:	2054      	movs	r0, #84	; 0x54
 800140a:	f7ff fb8d 	bl	8000b28 <SHT20_Measure>
 800140e:	4602      	mov	r2, r0
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <Get_Sensor_Data+0x30>)
 8001412:	601a      	str	r2, [r3, #0]
//	}
//	if (sen_data.temperature) {
//		sprintf(show_str, "T :%.2f", sen_data.temperature);
//		OLED_ShowString(0, 4, show_str);
//	}
    sen_data.brightness = Get_Adc_Average(3,5);		//ͨ��3������5��
 8001414:	2105      	movs	r1, #5
 8001416:	2003      	movs	r0, #3
 8001418:	f7ff fd90 	bl	8000f3c <Get_Adc_Average>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	4b01      	ldr	r3, [pc, #4]	; (8001428 <Get_Sensor_Data+0x30>)
 8001422:	811a      	strh	r2, [r3, #8]
#endif
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000000 	.word	0x20000000

0800142c <Oled_show>:
    HAL_Delay(10);
	HAL_NVIC_EnableIRQ(USART3_IRQn);
}
//
void Oled_show(void)
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b091      	sub	sp, #68	; 0x44
 8001430:	af00      	add	r7, sp, #0
    u8 str[64];
    //OLED_Clear();
    sprintf((char*)str, "Bright  %d", (4095 - sen_data.brightness) / 40);
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <Oled_show+0x88>)
 8001434:	891b      	ldrh	r3, [r3, #8]
 8001436:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 800143a:	330f      	adds	r3, #15
 800143c:	4a1e      	ldr	r2, [pc, #120]	; (80014b8 <Oled_show+0x8c>)
 800143e:	fb82 1203 	smull	r1, r2, r2, r3
 8001442:	1112      	asrs	r2, r2, #4
 8001444:	17db      	asrs	r3, r3, #31
 8001446:	1ad2      	subs	r2, r2, r3
 8001448:	463b      	mov	r3, r7
 800144a:	491c      	ldr	r1, [pc, #112]	; (80014bc <Oled_show+0x90>)
 800144c:	4618      	mov	r0, r3
 800144e:	f003 fedd 	bl	800520c <siprintf>
    OLED_ShowString(0, 0, str);
 8001452:	463b      	mov	r3, r7
 8001454:	461a      	mov	r2, r3
 8001456:	2100      	movs	r1, #0
 8001458:	2000      	movs	r0, #0
 800145a:	f000 f9b9 	bl	80017d0 <OLED_ShowString>
    sprintf((char*)str, "Temp  %.2f", sen_data.temperature);
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <Oled_show+0x88>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f7fe ffe0 	bl	8000428 <__aeabi_f2d>
 8001468:	4603      	mov	r3, r0
 800146a:	460c      	mov	r4, r1
 800146c:	4638      	mov	r0, r7
 800146e:	461a      	mov	r2, r3
 8001470:	4623      	mov	r3, r4
 8001472:	4913      	ldr	r1, [pc, #76]	; (80014c0 <Oled_show+0x94>)
 8001474:	f003 feca 	bl	800520c <siprintf>
    OLED_ShowString(0, 2, str);
 8001478:	463b      	mov	r3, r7
 800147a:	461a      	mov	r2, r3
 800147c:	2102      	movs	r1, #2
 800147e:	2000      	movs	r0, #0
 8001480:	f000 f9a6 	bl	80017d0 <OLED_ShowString>
    sprintf((char*)str, "Humidity  %.2f", sen_data.humidity);
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <Oled_show+0x88>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	f7fe ffcd 	bl	8000428 <__aeabi_f2d>
 800148e:	4603      	mov	r3, r0
 8001490:	460c      	mov	r4, r1
 8001492:	4638      	mov	r0, r7
 8001494:	461a      	mov	r2, r3
 8001496:	4623      	mov	r3, r4
 8001498:	490a      	ldr	r1, [pc, #40]	; (80014c4 <Oled_show+0x98>)
 800149a:	f003 feb7 	bl	800520c <siprintf>
    OLED_ShowString(0, 4, str);
 800149e:	463b      	mov	r3, r7
 80014a0:	461a      	mov	r2, r3
 80014a2:	2104      	movs	r1, #4
 80014a4:	2000      	movs	r0, #0
 80014a6:	f000 f993 	bl	80017d0 <OLED_ShowString>

}
 80014aa:	bf00      	nop
 80014ac:	3744      	adds	r7, #68	; 0x44
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd90      	pop	{r4, r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000000 	.word	0x20000000
 80014b8:	66666667 	.word	0x66666667
 80014bc:	08006a9c 	.word	0x08006a9c
 80014c0:	08006aa8 	.word	0x08006aa8
 80014c4:	08006ab4 	.word	0x08006ab4

080014c8 <IIC_Start>:
 //IIC Start
 **********************************************/
/**********************************************
 //IIC Start
 **********************************************/
void IIC_Start() {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0

	OLED_SCLK_Set();
 80014cc:	2201      	movs	r2, #1
 80014ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014d2:	480b      	ldr	r0, [pc, #44]	; (8001500 <IIC_Start+0x38>)
 80014d4:	f001 fc97 	bl	8002e06 <HAL_GPIO_WritePin>
	OLED_SDIN_Set();
 80014d8:	2201      	movs	r2, #1
 80014da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014de:	4808      	ldr	r0, [pc, #32]	; (8001500 <IIC_Start+0x38>)
 80014e0:	f001 fc91 	bl	8002e06 <HAL_GPIO_WritePin>
	OLED_SDIN_Clr();
 80014e4:	2200      	movs	r2, #0
 80014e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <IIC_Start+0x38>)
 80014ec:	f001 fc8b 	bl	8002e06 <HAL_GPIO_WritePin>
	OLED_SCLK_Clr();
 80014f0:	2200      	movs	r2, #0
 80014f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014f6:	4802      	ldr	r0, [pc, #8]	; (8001500 <IIC_Start+0x38>)
 80014f8:	f001 fc85 	bl	8002e06 <HAL_GPIO_WritePin>
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40010c00 	.word	0x40010c00

08001504 <IIC_Stop>:

/**********************************************
 //IIC Stop
 **********************************************/
void IIC_Stop() {
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	OLED_SCLK_Set();
 8001508:	2201      	movs	r2, #1
 800150a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800150e:	4808      	ldr	r0, [pc, #32]	; (8001530 <IIC_Stop+0x2c>)
 8001510:	f001 fc79 	bl	8002e06 <HAL_GPIO_WritePin>
//	OLED_SCLK_Clr();
	OLED_SDIN_Clr();
 8001514:	2200      	movs	r2, #0
 8001516:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <IIC_Stop+0x2c>)
 800151c:	f001 fc73 	bl	8002e06 <HAL_GPIO_WritePin>
	OLED_SDIN_Set();
 8001520:	2201      	movs	r2, #1
 8001522:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001526:	4802      	ldr	r0, [pc, #8]	; (8001530 <IIC_Stop+0x2c>)
 8001528:	f001 fc6d 	bl	8002e06 <HAL_GPIO_WritePin>

}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40010c00 	.word	0x40010c00

08001534 <IIC_Wait_Ack>:

void IIC_Wait_Ack() {
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	 //GPIOB->CRH |= 0x00030000;
	 return;
	 }
	 }
	 */
	OLED_SCLK_Set();
 8001538:	2201      	movs	r2, #1
 800153a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <IIC_Wait_Ack+0x20>)
 8001540:	f001 fc61 	bl	8002e06 <HAL_GPIO_WritePin>
	OLED_SCLK_Clr();
 8001544:	2200      	movs	r2, #0
 8001546:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800154a:	4802      	ldr	r0, [pc, #8]	; (8001554 <IIC_Wait_Ack+0x20>)
 800154c:	f001 fc5b 	bl	8002e06 <HAL_GPIO_WritePin>
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40010c00 	.word	0x40010c00

08001558 <Write_IIC_Byte>:
/**********************************************
 // IIC Write byte
 **********************************************/

void Write_IIC_Byte(unsigned char IIC_Byte) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	unsigned char m, da;
	da = IIC_Byte;
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	73bb      	strb	r3, [r7, #14]
	OLED_SCLK_Clr();
 8001566:	2200      	movs	r2, #0
 8001568:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800156c:	481a      	ldr	r0, [pc, #104]	; (80015d8 <Write_IIC_Byte+0x80>)
 800156e:	f001 fc4a 	bl	8002e06 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8001572:	2300      	movs	r3, #0
 8001574:	73fb      	strb	r3, [r7, #15]
 8001576:	e027      	b.n	80015c8 <Write_IIC_Byte+0x70>
		m = da;
 8001578:	7bbb      	ldrb	r3, [r7, #14]
 800157a:	737b      	strb	r3, [r7, #13]
		//	OLED_SCLK_Clr();
		m = m & 0x80;
 800157c:	7b7b      	ldrb	r3, [r7, #13]
 800157e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001582:	737b      	strb	r3, [r7, #13]
		if (m == 0x80) {
 8001584:	7b7b      	ldrb	r3, [r7, #13]
 8001586:	2b80      	cmp	r3, #128	; 0x80
 8001588:	d106      	bne.n	8001598 <Write_IIC_Byte+0x40>
			OLED_SDIN_Set();
 800158a:	2201      	movs	r2, #1
 800158c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001590:	4811      	ldr	r0, [pc, #68]	; (80015d8 <Write_IIC_Byte+0x80>)
 8001592:	f001 fc38 	bl	8002e06 <HAL_GPIO_WritePin>
 8001596:	e005      	b.n	80015a4 <Write_IIC_Byte+0x4c>
		} else
			OLED_SDIN_Clr();
 8001598:	2200      	movs	r2, #0
 800159a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800159e:	480e      	ldr	r0, [pc, #56]	; (80015d8 <Write_IIC_Byte+0x80>)
 80015a0:	f001 fc31 	bl	8002e06 <HAL_GPIO_WritePin>
		da = da << 1;
 80015a4:	7bbb      	ldrb	r3, [r7, #14]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	73bb      	strb	r3, [r7, #14]
		OLED_SCLK_Set();
 80015aa:	2201      	movs	r2, #1
 80015ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015b0:	4809      	ldr	r0, [pc, #36]	; (80015d8 <Write_IIC_Byte+0x80>)
 80015b2:	f001 fc28 	bl	8002e06 <HAL_GPIO_WritePin>
		OLED_SCLK_Clr();
 80015b6:	2200      	movs	r2, #0
 80015b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015bc:	4806      	ldr	r0, [pc, #24]	; (80015d8 <Write_IIC_Byte+0x80>)
 80015be:	f001 fc22 	bl	8002e06 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	3301      	adds	r3, #1
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	2b07      	cmp	r3, #7
 80015cc:	d9d4      	bls.n	8001578 <Write_IIC_Byte+0x20>
	}

}
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40010c00 	.word	0x40010c00

080015dc <Write_IIC_Command>:
/**********************************************
 // IIC Write Command
 **********************************************/
void Write_IIC_Command(unsigned char IIC_Command) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
	IIC_Start();
 80015e6:	f7ff ff6f 	bl	80014c8 <IIC_Start>
	Write_IIC_Byte(0x78);            //Slave address,SA0=0
 80015ea:	2078      	movs	r0, #120	; 0x78
 80015ec:	f7ff ffb4 	bl	8001558 <Write_IIC_Byte>
	IIC_Wait_Ack();
 80015f0:	f7ff ffa0 	bl	8001534 <IIC_Wait_Ack>
	Write_IIC_Byte(0x00);			//write command
 80015f4:	2000      	movs	r0, #0
 80015f6:	f7ff ffaf 	bl	8001558 <Write_IIC_Byte>
	IIC_Wait_Ack();
 80015fa:	f7ff ff9b 	bl	8001534 <IIC_Wait_Ack>
	Write_IIC_Byte(IIC_Command);
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ffa9 	bl	8001558 <Write_IIC_Byte>
	IIC_Wait_Ack();
 8001606:	f7ff ff95 	bl	8001534 <IIC_Wait_Ack>
	IIC_Stop();
 800160a:	f7ff ff7b 	bl	8001504 <IIC_Stop>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <Write_IIC_Data>:
/**********************************************
 // IIC Write Data
 **********************************************/
void Write_IIC_Data(unsigned char IIC_Data) {
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	71fb      	strb	r3, [r7, #7]
	IIC_Start();
 8001620:	f7ff ff52 	bl	80014c8 <IIC_Start>
	Write_IIC_Byte(0x78);			//D/C#=0; R/W#=0
 8001624:	2078      	movs	r0, #120	; 0x78
 8001626:	f7ff ff97 	bl	8001558 <Write_IIC_Byte>
	IIC_Wait_Ack();
 800162a:	f7ff ff83 	bl	8001534 <IIC_Wait_Ack>
	Write_IIC_Byte(0x40);			//write data
 800162e:	2040      	movs	r0, #64	; 0x40
 8001630:	f7ff ff92 	bl	8001558 <Write_IIC_Byte>
	IIC_Wait_Ack();
 8001634:	f7ff ff7e 	bl	8001534 <IIC_Wait_Ack>
	Write_IIC_Byte(IIC_Data);
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff8c 	bl	8001558 <Write_IIC_Byte>
	IIC_Wait_Ack();
 8001640:	f7ff ff78 	bl	8001534 <IIC_Wait_Ack>
	IIC_Stop();
 8001644:	f7ff ff5e 	bl	8001504 <IIC_Stop>
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <OLED_WR_Byte>:
void OLED_WR_Byte(unsigned dat, unsigned cmd) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
	if (cmd) {
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <OLED_WR_Byte+0x1c>

		Write_IIC_Data(dat);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ffd6 	bl	8001616 <Write_IIC_Data>
	} else {
		Write_IIC_Command(dat);

	}

}
 800166a:	e004      	b.n	8001676 <OLED_WR_Byte+0x26>
		Write_IIC_Command(dat);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ffb3 	bl	80015dc <Write_IIC_Command>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <OLED_Set_Pos>:
	}
}

//坐标设置

void OLED_Set_Pos(unsigned char x, unsigned char y) {
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	460a      	mov	r2, r1
 8001688:	71fb      	strb	r3, [r7, #7]
 800168a:	4613      	mov	r3, r2
 800168c:	71bb      	strb	r3, [r7, #6]
	OLED_WR_Byte(0xb0 + y, OLED_CMD);
 800168e:	79bb      	ldrb	r3, [r7, #6]
 8001690:	33b0      	adds	r3, #176	; 0xb0
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ffdb 	bl	8001650 <OLED_WR_Byte>
	OLED_WR_Byte(((x & 0xf0) >> 4) | 0x10, OLED_CMD);
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	091b      	lsrs	r3, r3, #4
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	f043 0310 	orr.w	r3, r3, #16
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ffd1 	bl	8001650 <OLED_WR_Byte>
	OLED_WR_Byte((x & 0x0f), OLED_CMD);
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	f003 030f 	and.w	r3, r3, #15
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ffca 	bl	8001650 <OLED_WR_Byte>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <OLED_Clear>:
	OLED_WR_Byte(0X8D, OLED_CMD);  //SET DCDC命令
	OLED_WR_Byte(0X10, OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE, OLED_CMD);  //DISPLAY OFF
}
//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!
void OLED_Clear(void) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
	u8 i, n;
	for (i = 0; i < 8; i++) {
 80016ca:	2300      	movs	r3, #0
 80016cc:	71fb      	strb	r3, [r7, #7]
 80016ce:	e01e      	b.n	800170e <OLED_Clear+0x4a>
		OLED_WR_Byte(0xb0 + i, OLED_CMD);    //设置页地址（0~7）
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	33b0      	adds	r3, #176	; 0xb0
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff ffba 	bl	8001650 <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);      //设置显示位置—列低地址
 80016dc:	2100      	movs	r1, #0
 80016de:	2000      	movs	r0, #0
 80016e0:	f7ff ffb6 	bl	8001650 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);      //设置显示位置—列高地址
 80016e4:	2100      	movs	r1, #0
 80016e6:	2010      	movs	r0, #16
 80016e8:	f7ff ffb2 	bl	8001650 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	71bb      	strb	r3, [r7, #6]
 80016f0:	e006      	b.n	8001700 <OLED_Clear+0x3c>
			OLED_WR_Byte(0, OLED_DATA);
 80016f2:	2101      	movs	r1, #1
 80016f4:	2000      	movs	r0, #0
 80016f6:	f7ff ffab 	bl	8001650 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 80016fa:	79bb      	ldrb	r3, [r7, #6]
 80016fc:	3301      	adds	r3, #1
 80016fe:	71bb      	strb	r3, [r7, #6]
 8001700:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001704:	2b00      	cmp	r3, #0
 8001706:	daf4      	bge.n	80016f2 <OLED_Clear+0x2e>
	for (i = 0; i < 8; i++) {
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	3301      	adds	r3, #1
 800170c:	71fb      	strb	r3, [r7, #7]
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2b07      	cmp	r3, #7
 8001712:	d9dd      	bls.n	80016d0 <OLED_Clear+0xc>
	} //更新显示
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <OLED_ShowChar>:
//在指定位置显示一个字符,包括部分字符
//x:0~127
//y:0~63
//mode:0,反白显示;1,正常显示
//size:选择字体 16/12
void OLED_ShowChar(u8 x, u8 y, u8 chr, u8 Char_Size) {
 800171c:	b590      	push	{r4, r7, lr}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	4604      	mov	r4, r0
 8001724:	4608      	mov	r0, r1
 8001726:	4611      	mov	r1, r2
 8001728:	461a      	mov	r2, r3
 800172a:	4623      	mov	r3, r4
 800172c:	71fb      	strb	r3, [r7, #7]
 800172e:	4603      	mov	r3, r0
 8001730:	71bb      	strb	r3, [r7, #6]
 8001732:	460b      	mov	r3, r1
 8001734:	717b      	strb	r3, [r7, #5]
 8001736:	4613      	mov	r3, r2
 8001738:	713b      	strb	r3, [r7, #4]
	unsigned char c = 0, i = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	73bb      	strb	r3, [r7, #14]
 800173e:	2300      	movs	r3, #0
 8001740:	73fb      	strb	r3, [r7, #15]
	c = chr - ' '; //得到偏移后的值
 8001742:	797b      	ldrb	r3, [r7, #5]
 8001744:	3b20      	subs	r3, #32
 8001746:	73bb      	strb	r3, [r7, #14]
	if (x > Max_Column - 1) {
 8001748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174c:	2b00      	cmp	r3, #0
 800174e:	da04      	bge.n	800175a <OLED_ShowChar+0x3e>
		x = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	71fb      	strb	r3, [r7, #7]
		y = y + 2;
 8001754:	79bb      	ldrb	r3, [r7, #6]
 8001756:	3302      	adds	r3, #2
 8001758:	71bb      	strb	r3, [r7, #6]
	}
	OLED_Set_Pos(x, y);
 800175a:	79ba      	ldrb	r2, [r7, #6]
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff8c 	bl	800167e <OLED_Set_Pos>
	for (i = 0; i < 8; i++)
 8001766:	2300      	movs	r3, #0
 8001768:	73fb      	strb	r3, [r7, #15]
 800176a:	e00c      	b.n	8001786 <OLED_ShowChar+0x6a>
		OLED_WR_Byte(F8X16[c * 16 + i], OLED_DATA);
 800176c:	7bbb      	ldrb	r3, [r7, #14]
 800176e:	011a      	lsls	r2, r3, #4
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	4413      	add	r3, r2
 8001774:	4a15      	ldr	r2, [pc, #84]	; (80017cc <OLED_ShowChar+0xb0>)
 8001776:	5cd3      	ldrb	r3, [r2, r3]
 8001778:	2101      	movs	r1, #1
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ff68 	bl	8001650 <OLED_WR_Byte>
	for (i = 0; i < 8; i++)
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	3301      	adds	r3, #1
 8001784:	73fb      	strb	r3, [r7, #15]
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	2b07      	cmp	r3, #7
 800178a:	d9ef      	bls.n	800176c <OLED_ShowChar+0x50>
	OLED_Set_Pos(x, y + 1);
 800178c:	79bb      	ldrb	r3, [r7, #6]
 800178e:	3301      	adds	r3, #1
 8001790:	b2da      	uxtb	r2, r3
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	4611      	mov	r1, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff71 	bl	800167e <OLED_Set_Pos>
	for (i = 0; i < 8; i++)
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]
 80017a0:	e00d      	b.n	80017be <OLED_ShowChar+0xa2>
		OLED_WR_Byte(F8X16[c * 16 + i + 8], OLED_DATA);
 80017a2:	7bbb      	ldrb	r3, [r7, #14]
 80017a4:	011a      	lsls	r2, r3, #4
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	4413      	add	r3, r2
 80017aa:	3308      	adds	r3, #8
 80017ac:	4a07      	ldr	r2, [pc, #28]	; (80017cc <OLED_ShowChar+0xb0>)
 80017ae:	5cd3      	ldrb	r3, [r2, r3]
 80017b0:	2101      	movs	r1, #1
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff4c 	bl	8001650 <OLED_WR_Byte>
	for (i = 0; i < 8; i++)
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	3301      	adds	r3, #1
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	2b07      	cmp	r3, #7
 80017c2:	d9ee      	bls.n	80017a2 <OLED_ShowChar+0x86>
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd90      	pop	{r4, r7, pc}
 80017cc:	08006b38 	.word	0x08006b38

080017d0 <OLED_ShowString>:
		}
		OLED_ShowChar(x + (size2 / 2) * t, y, temp + '0', size2);
	}
}
//显示一个字符号串
void OLED_ShowString(u8 x, u8 y, u8 *chr) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	603a      	str	r2, [r7, #0]
 80017da:	71fb      	strb	r3, [r7, #7]
 80017dc:	460b      	mov	r3, r1
 80017de:	71bb      	strb	r3, [r7, #6]
	unsigned char j = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	73fb      	strb	r3, [r7, #15]
	while (chr[j] != '\0') {
 80017e4:	e016      	b.n	8001814 <OLED_ShowString+0x44>
		OLED_ShowChar(x, y, chr[j], 1);
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	781a      	ldrb	r2, [r3, #0]
 80017ee:	79b9      	ldrb	r1, [r7, #6]
 80017f0:	79f8      	ldrb	r0, [r7, #7]
 80017f2:	2301      	movs	r3, #1
 80017f4:	f7ff ff92 	bl	800171c <OLED_ShowChar>
		x += 8;
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	3308      	adds	r3, #8
 80017fc:	71fb      	strb	r3, [r7, #7]
		if (x > 120) {
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	2b78      	cmp	r3, #120	; 0x78
 8001802:	d904      	bls.n	800180e <OLED_ShowString+0x3e>
			x = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	71fb      	strb	r3, [r7, #7]
			y += 2;
 8001808:	79bb      	ldrb	r3, [r7, #6]
 800180a:	3302      	adds	r3, #2
 800180c:	71bb      	strb	r3, [r7, #6]
		}
		j++;
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	3301      	adds	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
	while (chr[j] != '\0') {
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	4413      	add	r3, r2
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1e2      	bne.n	80017e6 <OLED_ShowString+0x16>
	}
}
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <OLED_Init>:
//		}
//	}
//}

//初始化SSD1306
void OLED_Init(void) {
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0

	OLED_WR_Byte(0xAE, OLED_CMD); //--display off
 800182c:	2100      	movs	r1, #0
 800182e:	20ae      	movs	r0, #174	; 0xae
 8001830:	f7ff ff0e 	bl	8001650 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //---set low column address
 8001834:	2100      	movs	r1, #0
 8001836:	2000      	movs	r0, #0
 8001838:	f7ff ff0a 	bl	8001650 <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 800183c:	2100      	movs	r1, #0
 800183e:	2010      	movs	r0, #16
 8001840:	f7ff ff06 	bl	8001650 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address
 8001844:	2100      	movs	r1, #0
 8001846:	2040      	movs	r0, #64	; 0x40
 8001848:	f7ff ff02 	bl	8001650 <OLED_WR_Byte>
	OLED_WR_Byte(0xB0, OLED_CMD); //--set page address
 800184c:	2100      	movs	r1, #0
 800184e:	20b0      	movs	r0, #176	; 0xb0
 8001850:	f7ff fefe 	bl	8001650 <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); // contract control
 8001854:	2100      	movs	r1, #0
 8001856:	2081      	movs	r0, #129	; 0x81
 8001858:	f7ff fefa 	bl	8001650 <OLED_WR_Byte>
	OLED_WR_Byte(0xFF, OLED_CMD); //--128
 800185c:	2100      	movs	r1, #0
 800185e:	20ff      	movs	r0, #255	; 0xff
 8001860:	f7ff fef6 	bl	8001650 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //set segment remap
 8001864:	2100      	movs	r1, #0
 8001866:	20a1      	movs	r0, #161	; 0xa1
 8001868:	f7ff fef2 	bl	8001650 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--normal / reverse
 800186c:	2100      	movs	r1, #0
 800186e:	20a6      	movs	r0, #166	; 0xa6
 8001870:	f7ff feee 	bl	8001650 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 8001874:	2100      	movs	r1, #0
 8001876:	20a8      	movs	r0, #168	; 0xa8
 8001878:	f7ff feea 	bl	8001650 <OLED_WR_Byte>
	OLED_WR_Byte(0x3F, OLED_CMD); //--1/32 duty
 800187c:	2100      	movs	r1, #0
 800187e:	203f      	movs	r0, #63	; 0x3f
 8001880:	f7ff fee6 	bl	8001650 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); //Com scan direction
 8001884:	2100      	movs	r1, #0
 8001886:	20c8      	movs	r0, #200	; 0xc8
 8001888:	f7ff fee2 	bl	8001650 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset
 800188c:	2100      	movs	r1, #0
 800188e:	20d3      	movs	r0, #211	; 0xd3
 8001890:	f7ff fede 	bl	8001650 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //
 8001894:	2100      	movs	r1, #0
 8001896:	2000      	movs	r0, #0
 8001898:	f7ff feda 	bl	8001650 <OLED_WR_Byte>

	OLED_WR_Byte(0xD5, OLED_CMD); //set osc division
 800189c:	2100      	movs	r1, #0
 800189e:	20d5      	movs	r0, #213	; 0xd5
 80018a0:	f7ff fed6 	bl	8001650 <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //
 80018a4:	2100      	movs	r1, #0
 80018a6:	2080      	movs	r0, #128	; 0x80
 80018a8:	f7ff fed2 	bl	8001650 <OLED_WR_Byte>

	OLED_WR_Byte(0xD8, OLED_CMD); //set area color mode off
 80018ac:	2100      	movs	r1, #0
 80018ae:	20d8      	movs	r0, #216	; 0xd8
 80018b0:	f7ff fece 	bl	8001650 <OLED_WR_Byte>
	OLED_WR_Byte(0x05, OLED_CMD); //
 80018b4:	2100      	movs	r1, #0
 80018b6:	2005      	movs	r0, #5
 80018b8:	f7ff feca 	bl	8001650 <OLED_WR_Byte>

	OLED_WR_Byte(0xD9, OLED_CMD); //Set Pre-Charge Period
 80018bc:	2100      	movs	r1, #0
 80018be:	20d9      	movs	r0, #217	; 0xd9
 80018c0:	f7ff fec6 	bl	8001650 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); //
 80018c4:	2100      	movs	r1, #0
 80018c6:	20f1      	movs	r0, #241	; 0xf1
 80018c8:	f7ff fec2 	bl	8001650 <OLED_WR_Byte>

	OLED_WR_Byte(0xDA, OLED_CMD); //set com pin configuartion
 80018cc:	2100      	movs	r1, #0
 80018ce:	20da      	movs	r0, #218	; 0xda
 80018d0:	f7ff febe 	bl	8001650 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD); //
 80018d4:	2100      	movs	r1, #0
 80018d6:	2012      	movs	r0, #18
 80018d8:	f7ff feba 	bl	8001650 <OLED_WR_Byte>

	OLED_WR_Byte(0xDB, OLED_CMD); //set Vcomh
 80018dc:	2100      	movs	r1, #0
 80018de:	20db      	movs	r0, #219	; 0xdb
 80018e0:	f7ff feb6 	bl	8001650 <OLED_WR_Byte>
	OLED_WR_Byte(0x30, OLED_CMD); //
 80018e4:	2100      	movs	r1, #0
 80018e6:	2030      	movs	r0, #48	; 0x30
 80018e8:	f7ff feb2 	bl	8001650 <OLED_WR_Byte>

	OLED_WR_Byte(0x8D, OLED_CMD); //set charge pump enable
 80018ec:	2100      	movs	r1, #0
 80018ee:	208d      	movs	r0, #141	; 0x8d
 80018f0:	f7ff feae 	bl	8001650 <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //
 80018f4:	2100      	movs	r1, #0
 80018f6:	2014      	movs	r0, #20
 80018f8:	f7ff feaa 	bl	8001650 <OLED_WR_Byte>

	OLED_WR_Byte(0xAF, OLED_CMD); //--turn on oled panel
 80018fc:	2100      	movs	r1, #0
 80018fe:	20af      	movs	r0, #175	; 0xaf
 8001900:	f7ff fea6 	bl	8001650 <OLED_WR_Byte>
	OLED_Clear();
 8001904:	f7ff fede 	bl	80016c4 <OLED_Clear>
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_MspInit+0x5c>)
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	4a14      	ldr	r2, [pc, #80]	; (8001968 <HAL_MspInit+0x5c>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6193      	str	r3, [r2, #24]
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_MspInit+0x5c>)
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <HAL_MspInit+0x5c>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <HAL_MspInit+0x5c>)
 8001930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001934:	61d3      	str	r3, [r2, #28]
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <HAL_MspInit+0x5c>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <HAL_MspInit+0x60>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	4a04      	ldr	r2, [pc, #16]	; (800196c <HAL_MspInit+0x60>)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195e:	bf00      	nop
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	40021000 	.word	0x40021000
 800196c:	40010000 	.word	0x40010000

08001970 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8001980:	e7fe      	b.n	8001980 <HardFault_Handler+0x4>

08001982 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001986:	e7fe      	b.n	8001986 <MemManage_Handler+0x4>

08001988 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800198c:	e7fe      	b.n	800198c <BusFault_Handler+0x4>

0800198e <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001992:	e7fe      	b.n	8001992 <UsageFault_Handler+0x4>

08001994 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80019bc:	f000 fae0 	bl	8001f80 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <_sbrk+0x50>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <_sbrk+0x16>
		heap_end = &end;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <_sbrk+0x50>)
 80019d6:	4a10      	ldr	r2, [pc, #64]	; (8001a18 <_sbrk+0x54>)
 80019d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <_sbrk+0x50>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <_sbrk+0x50>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4413      	add	r3, r2
 80019e8:	466a      	mov	r2, sp
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d907      	bls.n	80019fe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80019ee:	f002 ff8b 	bl	8004908 <__errno>
 80019f2:	4602      	mov	r2, r0
 80019f4:	230c      	movs	r3, #12
 80019f6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80019f8:	f04f 33ff 	mov.w	r3, #4294967295
 80019fc:	e006      	b.n	8001a0c <_sbrk+0x48>
	}

	heap_end += incr;
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <_sbrk+0x50>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	4a03      	ldr	r2, [pc, #12]	; (8001a14 <_sbrk+0x50>)
 8001a08:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000204 	.word	0x20000204
 8001a18:	200003b0 	.word	0x200003b0

08001a1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001a20:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <SystemInit+0x5c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a14      	ldr	r2, [pc, #80]	; (8001a78 <SystemInit+0x5c>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <SystemInit+0x5c>)
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	4911      	ldr	r1, [pc, #68]	; (8001a78 <SystemInit+0x5c>)
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <SystemInit+0x60>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <SystemInit+0x5c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0e      	ldr	r2, [pc, #56]	; (8001a78 <SystemInit+0x5c>)
 8001a3e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a46:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <SystemInit+0x5c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <SystemInit+0x5c>)
 8001a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a52:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <SystemInit+0x5c>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <SystemInit+0x5c>)
 8001a5a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001a5e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <SystemInit+0x5c>)
 8001a62:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001a66:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <SystemInit+0x64>)
 8001a6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a6e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	f8ff0000 	.word	0xf8ff0000
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_OC_InitTypeDef TIM4_CHHandler;	    //定时器3通道4句柄

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	htim4.Instance=TIM4;            //定时器3
 8001a88:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <MX_TIM4_Init+0x98>)
 8001a8a:	4a25      	ldr	r2, [pc, #148]	; (8001b20 <MX_TIM4_Init+0x9c>)
 8001a8c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler=71;       //定时器分频
 8001a8e:	4b23      	ldr	r3, [pc, #140]	; (8001b1c <MX_TIM4_Init+0x98>)
 8001a90:	2247      	movs	r2, #71	; 0x47
 8001a92:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode=TIM_COUNTERMODE_UP;//向上计数模式
 8001a94:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <MX_TIM4_Init+0x98>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
    htim4.Init.Period=255;          //自动重装载值
 8001a9a:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <MX_TIM4_Init+0x98>)
 8001a9c:	22ff      	movs	r2, #255	; 0xff
 8001a9e:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision=TIM_CLOCKDIVISION_DIV1;
 8001aa0:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <MX_TIM4_Init+0x98>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
    HAL_TIM_PWM_Init(&htim4);       //初始化PWM
 8001aa6:	481d      	ldr	r0, [pc, #116]	; (8001b1c <MX_TIM4_Init+0x98>)
 8001aa8:	f001 ff54 	bl	8003954 <HAL_TIM_PWM_Init>

    TIM4_CHHandler.OCMode=TIM_OCMODE_PWM1; //模式选择PWM1
 8001aac:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <MX_TIM4_Init+0xa0>)
 8001aae:	2260      	movs	r2, #96	; 0x60
 8001ab0:	601a      	str	r2, [r3, #0]
    TIM4_CHHandler.Pulse=0;            //设置比较值,此值用来确定占空比，默认比较值为自动重装载值的一半,即占空比为50%
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <MX_TIM4_Init+0xa0>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	605a      	str	r2, [r3, #4]
    TIM4_CHHandler.OCPolarity=TIM_OCPOLARITY_LOW; //输出比较极性为低
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <MX_TIM4_Init+0xa0>)
 8001aba:	2202      	movs	r2, #2
 8001abc:	609a      	str	r2, [r3, #8]
    HAL_TIM_PWM_ConfigChannel(&htim4,&TIM4_CHHandler,TIM_CHANNEL_1);//配置TIM3通道4
 8001abe:	2200      	movs	r2, #0
 8001ac0:	4918      	ldr	r1, [pc, #96]	; (8001b24 <MX_TIM4_Init+0xa0>)
 8001ac2:	4816      	ldr	r0, [pc, #88]	; (8001b1c <MX_TIM4_Init+0x98>)
 8001ac4:	f001 ffa4 	bl	8003a10 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_ConfigChannel(&htim4,&TIM4_CHHandler,TIM_CHANNEL_2);//配置TIM3通道4
 8001ac8:	2204      	movs	r2, #4
 8001aca:	4916      	ldr	r1, [pc, #88]	; (8001b24 <MX_TIM4_Init+0xa0>)
 8001acc:	4813      	ldr	r0, [pc, #76]	; (8001b1c <MX_TIM4_Init+0x98>)
 8001ace:	f001 ff9f 	bl	8003a10 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_ConfigChannel(&htim4,&TIM4_CHHandler,TIM_CHANNEL_3);//配置TIM3通道4
 8001ad2:	2208      	movs	r2, #8
 8001ad4:	4913      	ldr	r1, [pc, #76]	; (8001b24 <MX_TIM4_Init+0xa0>)
 8001ad6:	4811      	ldr	r0, [pc, #68]	; (8001b1c <MX_TIM4_Init+0x98>)
 8001ad8:	f001 ff9a 	bl	8003a10 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_ConfigChannel(&htim4,&TIM4_CHHandler,TIM_CHANNEL_4);//配置TIM3通道4
 8001adc:	220c      	movs	r2, #12
 8001ade:	4911      	ldr	r1, [pc, #68]	; (8001b24 <MX_TIM4_Init+0xa0>)
 8001ae0:	480e      	ldr	r0, [pc, #56]	; (8001b1c <MX_TIM4_Init+0x98>)
 8001ae2:	f001 ff95 	bl	8003a10 <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	480c      	ldr	r0, [pc, #48]	; (8001b1c <MX_TIM4_Init+0x98>)
 8001aea:	f001 ff5f 	bl	80039ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8001aee:	2104      	movs	r1, #4
 8001af0:	480a      	ldr	r0, [pc, #40]	; (8001b1c <MX_TIM4_Init+0x98>)
 8001af2:	f001 ff5b 	bl	80039ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8001af6:	2108      	movs	r1, #8
 8001af8:	4808      	ldr	r0, [pc, #32]	; (8001b1c <MX_TIM4_Init+0x98>)
 8001afa:	f001 ff57 	bl	80039ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8001afe:	210c      	movs	r1, #12
 8001b00:	4806      	ldr	r0, [pc, #24]	; (8001b1c <MX_TIM4_Init+0x98>)
 8001b02:	f001 ff53 	bl	80039ac <HAL_TIM_PWM_Start>
	LEDR_ON(255);LEDG_ON(255);LEDB_ON(255);
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <MX_TIM4_Init+0x9c>)
 8001b08:	22ff      	movs	r2, #255	; 0xff
 8001b0a:	639a      	str	r2, [r3, #56]	; 0x38
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <MX_TIM4_Init+0x9c>)
 8001b0e:	22ff      	movs	r2, #255	; 0xff
 8001b10:	635a      	str	r2, [r3, #52]	; 0x34
 8001b12:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <MX_TIM4_Init+0x9c>)
 8001b14:	22ff      	movs	r2, #255	; 0xff
 8001b16:	63da      	str	r2, [r3, #60]	; 0x3c


}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000284 	.word	0x20000284
 8001b20:	40000800 	.word	0x40000800
 8001b24:	200002c4 	.word	0x200002c4

08001b28 <HAL_TIM_PWM_MspInit>:
//
//  /* USER CODE END TIM4_MspInit 1 */
//  }
//}
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* timHandle)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a16      	ldr	r2, [pc, #88]	; (8001b9c <HAL_TIM_PWM_MspInit+0x74>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d124      	bne.n	8001b92 <HAL_TIM_PWM_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */
	  __HAL_RCC_TIM4_CLK_ENABLE();
 8001b48:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_TIM_PWM_MspInit+0x78>)
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <HAL_TIM_PWM_MspInit+0x78>)
 8001b4e:	f043 0304 	orr.w	r3, r3, #4
 8001b52:	61d3      	str	r3, [r2, #28]
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_TIM_PWM_MspInit+0x78>)
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <HAL_TIM_PWM_MspInit+0x78>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <HAL_TIM_PWM_MspInit+0x78>)
 8001b66:	f043 0308 	orr.w	r3, r3, #8
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <HAL_TIM_PWM_MspInit+0x78>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001b78:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001b7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b82:	2303      	movs	r3, #3
 8001b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b86:	f107 0310 	add.w	r3, r7, #16
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <HAL_TIM_PWM_MspInit+0x7c>)
 8001b8e:	f000 ffc9 	bl	8002b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b92:	bf00      	nop
 8001b94:	3720      	adds	r7, #32
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40000800 	.word	0x40000800
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010c00 	.word	0x40010c00

08001ba8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bae:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <MX_USART1_UART_Init+0x50>)
 8001bb0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bb8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bce:	220c      	movs	r2, #12
 8001bd0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001bde:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001be0:	f002 f9ea 	bl	8003fb8 <HAL_UART_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001bea:	f7ff fbfe 	bl	80013ea <Error_Handler>
	}

}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000320 	.word	0x20000320
 8001bf8:	40013800 	.word	0x40013800

08001bfc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0

	huart3.Instance = USART3;
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <MX_USART3_UART_Init+0x54>)
 8001c02:	4a14      	ldr	r2, [pc, #80]	; (8001c54 <MX_USART3_UART_Init+0x58>)
 8001c04:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <MX_USART3_UART_Init+0x54>)
 8001c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c0c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <MX_USART3_UART_Init+0x54>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001c14:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <MX_USART3_UART_Init+0x54>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <MX_USART3_UART_Init+0x54>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <MX_USART3_UART_Init+0x54>)
 8001c22:	220c      	movs	r2, #12
 8001c24:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <MX_USART3_UART_Init+0x54>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <MX_USART3_UART_Init+0x54>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001c32:	4807      	ldr	r0, [pc, #28]	; (8001c50 <MX_USART3_UART_Init+0x54>)
 8001c34:	f002 f9c0 	bl	8003fb8 <HAL_UART_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8001c3e:	f7ff fbd4 	bl	80013ea <Error_Handler>
	}
	HAL_UART_Receive_IT(&huart3, (u8 *)aRxBuffer, 1);//该函数会开启接收中断：标志位UART_IT_RXNE，并且设置接收缓冲以及接收缓冲接收最大数据量
 8001c42:	2201      	movs	r2, #1
 8001c44:	4904      	ldr	r1, [pc, #16]	; (8001c58 <MX_USART3_UART_Init+0x5c>)
 8001c46:	4802      	ldr	r0, [pc, #8]	; (8001c50 <MX_USART3_UART_Init+0x54>)
 8001c48:	f002 fa9c 	bl	8004184 <HAL_UART_Receive_IT>

}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	200002e0 	.word	0x200002e0
 8001c54:	40004800 	.word	0x40004800
 8001c58:	20000364 	.word	0x20000364

08001c5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001c64:	f107 0318 	add.w	r3, r7, #24
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
	if (uartHandle->Instance == USART1) {
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a40      	ldr	r2, [pc, #256]	; (8001d78 <HAL_UART_MspInit+0x11c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d13a      	bne.n	8001cf2 <HAL_UART_MspInit+0x96>
		/* USER CODE BEGIN USART1_MspInit 0 */

		/* USER CODE END USART1_MspInit 0 */
		/* USART1 clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 8001c7c:	4b3f      	ldr	r3, [pc, #252]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	4a3e      	ldr	r2, [pc, #248]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001c82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c86:	6193      	str	r3, [r2, #24]
 8001c88:	4b3c      	ldr	r3, [pc, #240]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c94:	4b39      	ldr	r3, [pc, #228]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4a38      	ldr	r2, [pc, #224]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	6193      	str	r3, [r2, #24]
 8001ca0:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	693b      	ldr	r3, [r7, #16]
		/**USART1 GPIO Configuration
		 PA9     ------> USART1_TX
		 PA10     ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb0:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cba:	f107 0318 	add.w	r3, r7, #24
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	482f      	ldr	r0, [pc, #188]	; (8001d80 <HAL_UART_MspInit+0x124>)
 8001cc2:	f000 ff2f 	bl	8002b24 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cca:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd4:	f107 0318 	add.w	r3, r7, #24
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4829      	ldr	r0, [pc, #164]	; (8001d80 <HAL_UART_MspInit+0x124>)
 8001cdc:	f000 ff22 	bl	8002b24 <HAL_GPIO_Init>

		/* USART1 interrupt Init */
		HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2025      	movs	r0, #37	; 0x25
 8001ce6:	f000 fe70 	bl	80029ca <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cea:	2025      	movs	r0, #37	; 0x25
 8001cec:	f000 fe89 	bl	8002a02 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(USART3_IRQn);
		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}
}
 8001cf0:	e03e      	b.n	8001d70 <HAL_UART_MspInit+0x114>
	} else if (uartHandle->Instance == USART3) {
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a23      	ldr	r2, [pc, #140]	; (8001d84 <HAL_UART_MspInit+0x128>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d139      	bne.n	8001d70 <HAL_UART_MspInit+0x114>
		__HAL_RCC_USART3_CLK_ENABLE();
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	4a1e      	ldr	r2, [pc, #120]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001d02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d06:	61d3      	str	r3, [r2, #28]
 8001d08:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a18      	ldr	r2, [pc, #96]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001d1a:	f043 0308 	orr.w	r3, r3, #8
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d30:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d36:	2303      	movs	r3, #3
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3a:	f107 0318 	add.w	r3, r7, #24
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4811      	ldr	r0, [pc, #68]	; (8001d88 <HAL_UART_MspInit+0x12c>)
 8001d42:	f000 feef 	bl	8002b24 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d4a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d54:	f107 0318 	add.w	r3, r7, #24
 8001d58:	4619      	mov	r1, r3
 8001d5a:	480b      	ldr	r0, [pc, #44]	; (8001d88 <HAL_UART_MspInit+0x12c>)
 8001d5c:	f000 fee2 	bl	8002b24 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
 8001d60:	2201      	movs	r2, #1
 8001d62:	2101      	movs	r1, #1
 8001d64:	2027      	movs	r0, #39	; 0x27
 8001d66:	f000 fe30 	bl	80029ca <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d6a:	2027      	movs	r0, #39	; 0x27
 8001d6c:	f000 fe49 	bl	8002a02 <HAL_NVIC_EnableIRQ>
}
 8001d70:	bf00      	nop
 8001d72:	3728      	adds	r7, #40	; 0x28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40013800 	.word	0x40013800
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40010800 	.word	0x40010800
 8001d84:	40004800 	.word	0x40004800
 8001d88:	40010c00 	.word	0x40010c00

08001d8c <USART3_IRQHandler>:
//	HAL_UART_IRQHandler(&huart1);
//}
/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0

	u32 timeout=0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
	u32 maxDelay=0x1FFFF;
 8001d96:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <USART3_IRQHandler+0x68>)
 8001d98:	603b      	str	r3, [r7, #0]
#if SYSTEM_SUPPORT_OS	 	//使用OS
	OSIntEnter();
#endif

	HAL_UART_IRQHandler(&huart3);	//调用HAL库中断处理公用函数
 8001d9a:	4817      	ldr	r0, [pc, #92]	; (8001df8 <USART3_IRQHandler+0x6c>)
 8001d9c:	f002 fa46 	bl	800422c <HAL_UART_IRQHandler>

	timeout=0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	607b      	str	r3, [r7, #4]
    while (HAL_UART_GetState(&huart3) != HAL_UART_STATE_READY)//等待就绪
 8001da4:	e006      	b.n	8001db4 <USART3_IRQHandler+0x28>
	{
	 timeout++;////超时处理
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3301      	adds	r3, #1
 8001daa:	607b      	str	r3, [r7, #4]
     if(timeout>maxDelay) break;
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d806      	bhi.n	8001dc2 <USART3_IRQHandler+0x36>
    while (HAL_UART_GetState(&huart3) != HAL_UART_STATE_READY)//等待就绪
 8001db4:	4810      	ldr	r0, [pc, #64]	; (8001df8 <USART3_IRQHandler+0x6c>)
 8001db6:	f002 fb47 	bl	8004448 <HAL_UART_GetState>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b20      	cmp	r3, #32
 8001dbe:	d1f2      	bne.n	8001da6 <USART3_IRQHandler+0x1a>
 8001dc0:	e000      	b.n	8001dc4 <USART3_IRQHandler+0x38>
     if(timeout>maxDelay) break;
 8001dc2:	bf00      	nop
	}

	timeout=0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	607b      	str	r3, [r7, #4]
	while(HAL_UART_Receive_IT(&huart3, (u8 *)aRxBuffer, 1) != HAL_OK)//一次处理完成之后，重新开启中断并设置RxXferCount为1
 8001dc8:	e006      	b.n	8001dd8 <USART3_IRQHandler+0x4c>
	{
	 timeout++; //超时处理
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	607b      	str	r3, [r7, #4]
	 if(timeout>maxDelay) break;
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d808      	bhi.n	8001dea <USART3_IRQHandler+0x5e>
	while(HAL_UART_Receive_IT(&huart3, (u8 *)aRxBuffer, 1) != HAL_OK)//一次处理完成之后，重新开启中断并设置RxXferCount为1
 8001dd8:	2201      	movs	r2, #1
 8001dda:	4908      	ldr	r1, [pc, #32]	; (8001dfc <USART3_IRQHandler+0x70>)
 8001ddc:	4806      	ldr	r0, [pc, #24]	; (8001df8 <USART3_IRQHandler+0x6c>)
 8001dde:	f002 f9d1 	bl	8004184 <HAL_UART_Receive_IT>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f0      	bne.n	8001dca <USART3_IRQHandler+0x3e>
	}
}
 8001de8:	e000      	b.n	8001dec <USART3_IRQHandler+0x60>
	 if(timeout>maxDelay) break;
 8001dea:	bf00      	nop
}
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	0001ffff 	.word	0x0001ffff
 8001df8:	200002e0 	.word	0x200002e0
 8001dfc:	20000364 	.word	0x20000364

08001e00 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3)//如果是串口1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a23      	ldr	r2, [pc, #140]	; (8001e9c <HAL_UART_RxCpltCallback+0x9c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d13f      	bne.n	8001e92 <HAL_UART_RxCpltCallback+0x92>
	{
		if((uart3_message.USART_RX_STA&0x8000)==0)//接收未完成
 8001e12:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <HAL_UART_RxCpltCallback+0xa0>)
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	b21b      	sxth	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	db3a      	blt.n	8001e92 <HAL_UART_RxCpltCallback+0x92>
		{
			if(uart3_message.USART_RX_STA&0x4000)//接收到了0x0d
 8001e1c:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <HAL_UART_RxCpltCallback+0xa0>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d011      	beq.n	8001e4c <HAL_UART_RxCpltCallback+0x4c>
			{
				if(aRxBuffer[0]!=0x0a)uart3_message.USART_RX_STA=0;//接收错误,重新开始
 8001e28:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <HAL_UART_RxCpltCallback+0xa4>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b0a      	cmp	r3, #10
 8001e2e:	d003      	beq.n	8001e38 <HAL_UART_RxCpltCallback+0x38>
 8001e30:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <HAL_UART_RxCpltCallback+0xa0>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	801a      	strh	r2, [r3, #0]
					if(uart3_message.USART_RX_STA>(64-1))uart3_message.USART_RX_STA=0;//接收数据错误,重新开始接收
				}
			}
		}
	}
}
 8001e36:	e02c      	b.n	8001e92 <HAL_UART_RxCpltCallback+0x92>
				else uart3_message.USART_RX_STA|=0x8000;	//接收完成了
 8001e38:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <HAL_UART_RxCpltCallback+0xa0>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <HAL_UART_RxCpltCallback+0xa0>)
 8001e48:	801a      	strh	r2, [r3, #0]
}
 8001e4a:	e022      	b.n	8001e92 <HAL_UART_RxCpltCallback+0x92>
				if(aRxBuffer[0]==0x0d)uart3_message.USART_RX_STA|=0x4000;
 8001e4c:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <HAL_UART_RxCpltCallback+0xa4>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b0d      	cmp	r3, #13
 8001e52:	d107      	bne.n	8001e64 <HAL_UART_RxCpltCallback+0x64>
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_UART_RxCpltCallback+0xa0>)
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <HAL_UART_RxCpltCallback+0xa0>)
 8001e60:	801a      	strh	r2, [r3, #0]
}
 8001e62:	e016      	b.n	8001e92 <HAL_UART_RxCpltCallback+0x92>
					uart3_message.USART_RX_BUF[uart3_message.USART_RX_STA&0X3FFF]=aRxBuffer[0] ;
 8001e64:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <HAL_UART_RxCpltCallback+0xa0>)
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ea4 <HAL_UART_RxCpltCallback+0xa4>)
 8001e6e:	7811      	ldrb	r1, [r2, #0]
 8001e70:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <HAL_UART_RxCpltCallback+0xa0>)
 8001e72:	4413      	add	r3, r2
 8001e74:	460a      	mov	r2, r1
 8001e76:	709a      	strb	r2, [r3, #2]
					uart3_message.USART_RX_STA++;
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_UART_RxCpltCallback+0xa0>)
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <HAL_UART_RxCpltCallback+0xa0>)
 8001e82:	801a      	strh	r2, [r3, #0]
					if(uart3_message.USART_RX_STA>(64-1))uart3_message.USART_RX_STA=0;//接收数据错误,重新开始接收
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_UART_RxCpltCallback+0xa0>)
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	2b3f      	cmp	r3, #63	; 0x3f
 8001e8a:	d902      	bls.n	8001e92 <HAL_UART_RxCpltCallback+0x92>
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <HAL_UART_RxCpltCallback+0xa0>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	801a      	strh	r2, [r3, #0]
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	40004800 	.word	0x40004800
 8001ea0:	20000208 	.word	0x20000208
 8001ea4:	20000364 	.word	0x20000364

08001ea8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ea8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001eaa:	e003      	b.n	8001eb4 <LoopCopyDataInit>

08001eac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001eae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001eb0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001eb2:	3104      	adds	r1, #4

08001eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001eb4:	480a      	ldr	r0, [pc, #40]	; (8001ee0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001eb8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001eba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001ebc:	d3f6      	bcc.n	8001eac <CopyDataInit>
  ldr r2, =_sbss
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001ec0:	e002      	b.n	8001ec8 <LoopFillZerobss>

08001ec2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001ec4:	f842 3b04 	str.w	r3, [r2], #4

08001ec8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001eca:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ecc:	d3f9      	bcc.n	8001ec2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ece:	f7ff fda5 	bl	8001a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ed2:	f002 fd1f 	bl	8004914 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ed6:	f7ff fa01 	bl	80012dc <main>
  bx lr
 8001eda:	4770      	bx	lr
  ldr r3, =_sidata
 8001edc:	08007408 	.word	0x08007408
  ldr r0, =_sdata
 8001ee0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ee4:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8001ee8:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8001eec:	200003b0 	.word	0x200003b0

08001ef0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ef0:	e7fe      	b.n	8001ef0 <ADC1_2_IRQHandler>
	...

08001ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <HAL_Init+0x28>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <HAL_Init+0x28>)
 8001efe:	f043 0310 	orr.w	r3, r3, #16
 8001f02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f04:	2003      	movs	r0, #3
 8001f06:	f000 fd55 	bl	80029b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f000 f808 	bl	8001f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f10:	f7ff fcfc 	bl	800190c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40022000 	.word	0x40022000

08001f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_InitTick+0x54>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_InitTick+0x58>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 fd6d 	bl	8002a1e <HAL_SYSTICK_Config>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00e      	b.n	8001f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b0f      	cmp	r3, #15
 8001f52:	d80a      	bhi.n	8001f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f54:	2200      	movs	r2, #0
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f000 fd35 	bl	80029ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f60:	4a06      	ldr	r2, [pc, #24]	; (8001f7c <HAL_InitTick+0x5c>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e000      	b.n	8001f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	2000000c 	.word	0x2000000c
 8001f78:	20000014 	.word	0x20000014
 8001f7c:	20000010 	.word	0x20000010

08001f80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <HAL_IncTick+0x1c>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <HAL_IncTick+0x20>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a03      	ldr	r2, [pc, #12]	; (8001fa0 <HAL_IncTick+0x20>)
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	20000014 	.word	0x20000014
 8001fa0:	200003a8 	.word	0x200003a8

08001fa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa8:	4b02      	ldr	r3, [pc, #8]	; (8001fb4 <HAL_GetTick+0x10>)
 8001faa:	681b      	ldr	r3, [r3, #0]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	200003a8 	.word	0x200003a8

08001fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc0:	f7ff fff0 	bl	8001fa4 <HAL_GetTick>
 8001fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd0:	d005      	beq.n	8001fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fd2:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <HAL_Delay+0x40>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4413      	add	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fde:	bf00      	nop
 8001fe0:	f7ff ffe0 	bl	8001fa4 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d8f7      	bhi.n	8001fe0 <HAL_Delay+0x28>
  {
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000014 	.word	0x20000014

08001ffc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e0be      	b.n	800219c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	2b00      	cmp	r3, #0
 800202a:	d109      	bne.n	8002040 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7fe ff20 	bl	8000e80 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 fbb1 	bl	80027a8 <ADC_ConversionStop_Disable>
 8002046:	4603      	mov	r3, r0
 8002048:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 8099 	bne.w	800218a <HAL_ADC_Init+0x18e>
 8002058:	7dfb      	ldrb	r3, [r7, #23]
 800205a:	2b00      	cmp	r3, #0
 800205c:	f040 8095 	bne.w	800218a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002064:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002068:	f023 0302 	bic.w	r3, r3, #2
 800206c:	f043 0202 	orr.w	r2, r3, #2
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800207c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	7b1b      	ldrb	r3, [r3, #12]
 8002082:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002084:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	4313      	orrs	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002094:	d003      	beq.n	800209e <HAL_ADC_Init+0xa2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d102      	bne.n	80020a4 <HAL_ADC_Init+0xa8>
 800209e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020a2:	e000      	b.n	80020a6 <HAL_ADC_Init+0xaa>
 80020a4:	2300      	movs	r3, #0
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	7d1b      	ldrb	r3, [r3, #20]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d119      	bne.n	80020e8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	7b1b      	ldrb	r3, [r3, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d109      	bne.n	80020d0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	035a      	lsls	r2, r3, #13
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	e00b      	b.n	80020e8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	f043 0220 	orr.w	r2, r3, #32
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	f043 0201 	orr.w	r2, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <HAL_ADC_Init+0x1a8>)
 8002104:	4013      	ands	r3, r2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	68b9      	ldr	r1, [r7, #8]
 800210c:	430b      	orrs	r3, r1
 800210e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002118:	d003      	beq.n	8002122 <HAL_ADC_Init+0x126>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d104      	bne.n	800212c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	3b01      	subs	r3, #1
 8002128:	051b      	lsls	r3, r3, #20
 800212a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002132:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	430a      	orrs	r2, r1
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <HAL_ADC_Init+0x1ac>)
 8002148:	4013      	ands	r3, r2
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	429a      	cmp	r2, r3
 800214e:	d10b      	bne.n	8002168 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215a:	f023 0303 	bic.w	r3, r3, #3
 800215e:	f043 0201 	orr.w	r2, r3, #1
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002166:	e018      	b.n	800219a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216c:	f023 0312 	bic.w	r3, r3, #18
 8002170:	f043 0210 	orr.w	r2, r3, #16
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	f043 0201 	orr.w	r2, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002188:	e007      	b.n	800219a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	f043 0210 	orr.w	r2, r3, #16
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800219a:	7dfb      	ldrb	r3, [r7, #23]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	ffe1f7fd 	.word	0xffe1f7fd
 80021a8:	ff1f0efe 	.word	0xff1f0efe

080021ac <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_Start+0x1a>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e098      	b.n	80022f8 <HAL_ADC_Start+0x14c>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 fa98 	bl	8002704 <ADC_Enable>
 80021d4:	4603      	mov	r3, r0
 80021d6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f040 8087 	bne.w	80022ee <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a41      	ldr	r2, [pc, #260]	; (8002300 <HAL_ADC_Start+0x154>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d105      	bne.n	800220a <HAL_ADC_Start+0x5e>
 80021fe:	4b41      	ldr	r3, [pc, #260]	; (8002304 <HAL_ADC_Start+0x158>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d115      	bne.n	8002236 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002220:	2b00      	cmp	r3, #0
 8002222:	d026      	beq.n	8002272 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002228:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800222c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002234:	e01d      	b.n	8002272 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a2f      	ldr	r2, [pc, #188]	; (8002304 <HAL_ADC_Start+0x158>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d004      	beq.n	8002256 <HAL_ADC_Start+0xaa>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a2b      	ldr	r2, [pc, #172]	; (8002300 <HAL_ADC_Start+0x154>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d10d      	bne.n	8002272 <HAL_ADC_Start+0xc6>
 8002256:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <HAL_ADC_Start+0x158>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225e:	2b00      	cmp	r3, #0
 8002260:	d007      	beq.n	8002272 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002266:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800226a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d006      	beq.n	800228c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	f023 0206 	bic.w	r2, r3, #6
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	62da      	str	r2, [r3, #44]	; 0x2c
 800228a:	e002      	b.n	8002292 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f06f 0202 	mvn.w	r2, #2
 80022a2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022b2:	d113      	bne.n	80022dc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022b8:	4a11      	ldr	r2, [pc, #68]	; (8002300 <HAL_ADC_Start+0x154>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d105      	bne.n	80022ca <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80022be:	4b11      	ldr	r3, [pc, #68]	; (8002304 <HAL_ADC_Start+0x158>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d108      	bne.n	80022dc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	e00c      	b.n	80022f6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	e003      	b.n	80022f6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40012800 	.word	0x40012800
 8002304:	40012400 	.word	0x40012400

08002308 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b087      	sub	sp, #28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800231e:	f7ff fe41 	bl	8001fa4 <HAL_GetTick>
 8002322:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00b      	beq.n	800234a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002336:	f043 0220 	orr.w	r2, r3, #32
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e0c8      	b.n	80024dc <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002354:	2b00      	cmp	r3, #0
 8002356:	d12a      	bne.n	80023ae <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002362:	2b00      	cmp	r3, #0
 8002364:	d123      	bne.n	80023ae <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002366:	e01a      	b.n	800239e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236e:	d016      	beq.n	800239e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d007      	beq.n	8002386 <HAL_ADC_PollForConversion+0x7e>
 8002376:	f7ff fe15 	bl	8001fa4 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d20b      	bcs.n	800239e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238a:	f043 0204 	orr.w	r2, r3, #4
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e09e      	b.n	80024dc <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0dd      	beq.n	8002368 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80023ac:	e06c      	b.n	8002488 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80023ae:	4b4d      	ldr	r3, [pc, #308]	; (80024e4 <HAL_ADC_PollForConversion+0x1dc>)
 80023b0:	681c      	ldr	r4, [r3, #0]
 80023b2:	2002      	movs	r0, #2
 80023b4:	f001 fa12 	bl	80037dc <HAL_RCCEx_GetPeriphCLKFreq>
 80023b8:	4603      	mov	r3, r0
 80023ba:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6919      	ldr	r1, [r3, #16]
 80023c4:	4b48      	ldr	r3, [pc, #288]	; (80024e8 <HAL_ADC_PollForConversion+0x1e0>)
 80023c6:	400b      	ands	r3, r1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d118      	bne.n	80023fe <HAL_ADC_PollForConversion+0xf6>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68d9      	ldr	r1, [r3, #12]
 80023d2:	4b46      	ldr	r3, [pc, #280]	; (80024ec <HAL_ADC_PollForConversion+0x1e4>)
 80023d4:	400b      	ands	r3, r1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d111      	bne.n	80023fe <HAL_ADC_PollForConversion+0xf6>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6919      	ldr	r1, [r3, #16]
 80023e0:	4b43      	ldr	r3, [pc, #268]	; (80024f0 <HAL_ADC_PollForConversion+0x1e8>)
 80023e2:	400b      	ands	r3, r1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d108      	bne.n	80023fa <HAL_ADC_PollForConversion+0xf2>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68d9      	ldr	r1, [r3, #12]
 80023ee:	4b41      	ldr	r3, [pc, #260]	; (80024f4 <HAL_ADC_PollForConversion+0x1ec>)
 80023f0:	400b      	ands	r3, r1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_ADC_PollForConversion+0xf2>
 80023f6:	2314      	movs	r3, #20
 80023f8:	e020      	b.n	800243c <HAL_ADC_PollForConversion+0x134>
 80023fa:	2329      	movs	r3, #41	; 0x29
 80023fc:	e01e      	b.n	800243c <HAL_ADC_PollForConversion+0x134>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6919      	ldr	r1, [r3, #16]
 8002404:	4b3a      	ldr	r3, [pc, #232]	; (80024f0 <HAL_ADC_PollForConversion+0x1e8>)
 8002406:	400b      	ands	r3, r1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d106      	bne.n	800241a <HAL_ADC_PollForConversion+0x112>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68d9      	ldr	r1, [r3, #12]
 8002412:	4b38      	ldr	r3, [pc, #224]	; (80024f4 <HAL_ADC_PollForConversion+0x1ec>)
 8002414:	400b      	ands	r3, r1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00d      	beq.n	8002436 <HAL_ADC_PollForConversion+0x12e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6919      	ldr	r1, [r3, #16]
 8002420:	4b35      	ldr	r3, [pc, #212]	; (80024f8 <HAL_ADC_PollForConversion+0x1f0>)
 8002422:	400b      	ands	r3, r1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d108      	bne.n	800243a <HAL_ADC_PollForConversion+0x132>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68d9      	ldr	r1, [r3, #12]
 800242e:	4b32      	ldr	r3, [pc, #200]	; (80024f8 <HAL_ADC_PollForConversion+0x1f0>)
 8002430:	400b      	ands	r3, r1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_ADC_PollForConversion+0x132>
 8002436:	2354      	movs	r3, #84	; 0x54
 8002438:	e000      	b.n	800243c <HAL_ADC_PollForConversion+0x134>
 800243a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800243c:	fb02 f303 	mul.w	r3, r2, r3
 8002440:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002442:	e01d      	b.n	8002480 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244a:	d016      	beq.n	800247a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d007      	beq.n	8002462 <HAL_ADC_PollForConversion+0x15a>
 8002452:	f7ff fda7 	bl	8001fa4 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d20b      	bcs.n	800247a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	f043 0204 	orr.w	r2, r3, #4
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e030      	b.n	80024dc <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	3301      	adds	r3, #1
 800247e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	429a      	cmp	r2, r3
 8002486:	d8dd      	bhi.n	8002444 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f06f 0212 	mvn.w	r2, #18
 8002490:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002496:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80024a8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80024ac:	d115      	bne.n	80024da <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d111      	bne.n	80024da <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d105      	bne.n	80024da <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	f043 0201 	orr.w	r2, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	371c      	adds	r7, #28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd90      	pop	{r4, r7, pc}
 80024e4:	2000000c 	.word	0x2000000c
 80024e8:	24924924 	.word	0x24924924
 80024ec:	00924924 	.word	0x00924924
 80024f0:	12492492 	.word	0x12492492
 80024f4:	00492492 	.word	0x00492492
 80024f8:	00249249 	.word	0x00249249

080024fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x20>
 8002530:	2302      	movs	r3, #2
 8002532:	e0dc      	b.n	80026ee <HAL_ADC_ConfigChannel+0x1da>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b06      	cmp	r3, #6
 8002542:	d81c      	bhi.n	800257e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	3b05      	subs	r3, #5
 8002556:	221f      	movs	r2, #31
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	4019      	ands	r1, r3
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	3b05      	subs	r3, #5
 8002570:	fa00 f203 	lsl.w	r2, r0, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	635a      	str	r2, [r3, #52]	; 0x34
 800257c:	e03c      	b.n	80025f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b0c      	cmp	r3, #12
 8002584:	d81c      	bhi.n	80025c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	3b23      	subs	r3, #35	; 0x23
 8002598:	221f      	movs	r2, #31
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	4019      	ands	r1, r3
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	3b23      	subs	r3, #35	; 0x23
 80025b2:	fa00 f203 	lsl.w	r2, r0, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	631a      	str	r2, [r3, #48]	; 0x30
 80025be:	e01b      	b.n	80025f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	3b41      	subs	r3, #65	; 0x41
 80025d2:	221f      	movs	r2, #31
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	4019      	ands	r1, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	3b41      	subs	r3, #65	; 0x41
 80025ec:	fa00 f203 	lsl.w	r2, r0, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b09      	cmp	r3, #9
 80025fe:	d91c      	bls.n	800263a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68d9      	ldr	r1, [r3, #12]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	4613      	mov	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4413      	add	r3, r2
 8002610:	3b1e      	subs	r3, #30
 8002612:	2207      	movs	r2, #7
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	4019      	ands	r1, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	6898      	ldr	r0, [r3, #8]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4613      	mov	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	4413      	add	r3, r2
 800262a:	3b1e      	subs	r3, #30
 800262c:	fa00 f203 	lsl.w	r2, r0, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	60da      	str	r2, [r3, #12]
 8002638:	e019      	b.n	800266e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6919      	ldr	r1, [r3, #16]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4613      	mov	r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4413      	add	r3, r2
 800264a:	2207      	movs	r2, #7
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	4019      	ands	r1, r3
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6898      	ldr	r0, [r3, #8]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4613      	mov	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	fa00 f203 	lsl.w	r2, r0, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b10      	cmp	r3, #16
 8002674:	d003      	beq.n	800267e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800267a:	2b11      	cmp	r3, #17
 800267c:	d132      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d125      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d126      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80026a4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b10      	cmp	r3, #16
 80026ac:	d11a      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026ae:	4b13      	ldr	r3, [pc, #76]	; (80026fc <HAL_ADC_ConfigChannel+0x1e8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a13      	ldr	r2, [pc, #76]	; (8002700 <HAL_ADC_ConfigChannel+0x1ec>)
 80026b4:	fba2 2303 	umull	r2, r3, r2, r3
 80026b8:	0c9a      	lsrs	r2, r3, #18
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026c4:	e002      	b.n	80026cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f9      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x1b2>
 80026d2:	e007      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	f043 0220 	orr.w	r2, r3, #32
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	40012400 	.word	0x40012400
 80026fc:	2000000c 	.word	0x2000000c
 8002700:	431bde83 	.word	0x431bde83

08002704 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b01      	cmp	r3, #1
 8002720:	d039      	beq.n	8002796 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0201 	orr.w	r2, r2, #1
 8002730:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002732:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <ADC_Enable+0x9c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a1b      	ldr	r2, [pc, #108]	; (80027a4 <ADC_Enable+0xa0>)
 8002738:	fba2 2303 	umull	r2, r3, r2, r3
 800273c:	0c9b      	lsrs	r3, r3, #18
 800273e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002740:	e002      	b.n	8002748 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	3b01      	subs	r3, #1
 8002746:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f9      	bne.n	8002742 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800274e:	f7ff fc29 	bl	8001fa4 <HAL_GetTick>
 8002752:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002754:	e018      	b.n	8002788 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002756:	f7ff fc25 	bl	8001fa4 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d911      	bls.n	8002788 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	f043 0210 	orr.w	r2, r3, #16
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	f043 0201 	orr.w	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e007      	b.n	8002798 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b01      	cmp	r3, #1
 8002794:	d1df      	bne.n	8002756 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	2000000c 	.word	0x2000000c
 80027a4:	431bde83 	.word	0x431bde83

080027a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d127      	bne.n	8002812 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0201 	bic.w	r2, r2, #1
 80027d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027d2:	f7ff fbe7 	bl	8001fa4 <HAL_GetTick>
 80027d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027d8:	e014      	b.n	8002804 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027da:	f7ff fbe3 	bl	8001fa4 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d90d      	bls.n	8002804 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	f043 0210 	orr.w	r2, r3, #16
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	f043 0201 	orr.w	r2, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e007      	b.n	8002814 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b01      	cmp	r3, #1
 8002810:	d0e3      	beq.n	80027da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800282c:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <__NVIC_SetPriorityGrouping+0x44>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002838:	4013      	ands	r3, r2
 800283a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800284c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800284e:	4a04      	ldr	r2, [pc, #16]	; (8002860 <__NVIC_SetPriorityGrouping+0x44>)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	60d3      	str	r3, [r2, #12]
}
 8002854:	bf00      	nop
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002868:	4b04      	ldr	r3, [pc, #16]	; (800287c <__NVIC_GetPriorityGrouping+0x18>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	f003 0307 	and.w	r3, r3, #7
}
 8002872:	4618      	mov	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	2b00      	cmp	r3, #0
 8002890:	db0b      	blt.n	80028aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	f003 021f 	and.w	r2, r3, #31
 8002898:	4906      	ldr	r1, [pc, #24]	; (80028b4 <__NVIC_EnableIRQ+0x34>)
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	2001      	movs	r0, #1
 80028a2:	fa00 f202 	lsl.w	r2, r0, r2
 80028a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	e000e100 	.word	0xe000e100

080028b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	db0a      	blt.n	80028e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	490c      	ldr	r1, [pc, #48]	; (8002904 <__NVIC_SetPriority+0x4c>)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	0112      	lsls	r2, r2, #4
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	440b      	add	r3, r1
 80028dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e0:	e00a      	b.n	80028f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4908      	ldr	r1, [pc, #32]	; (8002908 <__NVIC_SetPriority+0x50>)
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	3b04      	subs	r3, #4
 80028f0:	0112      	lsls	r2, r2, #4
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	440b      	add	r3, r1
 80028f6:	761a      	strb	r2, [r3, #24]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	e000e100 	.word	0xe000e100
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	; 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f1c3 0307 	rsb	r3, r3, #7
 8002926:	2b04      	cmp	r3, #4
 8002928:	bf28      	it	cs
 800292a:	2304      	movcs	r3, #4
 800292c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3304      	adds	r3, #4
 8002932:	2b06      	cmp	r3, #6
 8002934:	d902      	bls.n	800293c <NVIC_EncodePriority+0x30>
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3b03      	subs	r3, #3
 800293a:	e000      	b.n	800293e <NVIC_EncodePriority+0x32>
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	f04f 32ff 	mov.w	r2, #4294967295
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43da      	mvns	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	401a      	ands	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002954:	f04f 31ff 	mov.w	r1, #4294967295
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	43d9      	mvns	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002964:	4313      	orrs	r3, r2
         );
}
 8002966:	4618      	mov	r0, r3
 8002968:	3724      	adds	r7, #36	; 0x24
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3b01      	subs	r3, #1
 800297c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002980:	d301      	bcc.n	8002986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002982:	2301      	movs	r3, #1
 8002984:	e00f      	b.n	80029a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002986:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <SysTick_Config+0x40>)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3b01      	subs	r3, #1
 800298c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800298e:	210f      	movs	r1, #15
 8002990:	f04f 30ff 	mov.w	r0, #4294967295
 8002994:	f7ff ff90 	bl	80028b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <SysTick_Config+0x40>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800299e:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <SysTick_Config+0x40>)
 80029a0:	2207      	movs	r2, #7
 80029a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	e000e010 	.word	0xe000e010

080029b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ff2d 	bl	800281c <__NVIC_SetPriorityGrouping>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b086      	sub	sp, #24
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4603      	mov	r3, r0
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029dc:	f7ff ff42 	bl	8002864 <__NVIC_GetPriorityGrouping>
 80029e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	6978      	ldr	r0, [r7, #20]
 80029e8:	f7ff ff90 	bl	800290c <NVIC_EncodePriority>
 80029ec:	4602      	mov	r2, r0
 80029ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff5f 	bl	80028b8 <__NVIC_SetPriority>
}
 80029fa:	bf00      	nop
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff35 	bl	8002880 <__NVIC_EnableIRQ>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ffa2 	bl	8002970 <SysTick_Config>
 8002a2c:	4603      	mov	r3, r0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d005      	beq.n	8002a5a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2204      	movs	r2, #4
 8002a52:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
 8002a58:	e051      	b.n	8002afe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 020e 	bic.w	r2, r2, #14
 8002a68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0201 	bic.w	r2, r2, #1
 8002a78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a22      	ldr	r2, [pc, #136]	; (8002b08 <HAL_DMA_Abort_IT+0xd0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d029      	beq.n	8002ad8 <HAL_DMA_Abort_IT+0xa0>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a20      	ldr	r2, [pc, #128]	; (8002b0c <HAL_DMA_Abort_IT+0xd4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d022      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x9c>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a1f      	ldr	r2, [pc, #124]	; (8002b10 <HAL_DMA_Abort_IT+0xd8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d01a      	beq.n	8002ace <HAL_DMA_Abort_IT+0x96>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a1d      	ldr	r2, [pc, #116]	; (8002b14 <HAL_DMA_Abort_IT+0xdc>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d012      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0x90>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a1c      	ldr	r2, [pc, #112]	; (8002b18 <HAL_DMA_Abort_IT+0xe0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d00a      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x8a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1a      	ldr	r2, [pc, #104]	; (8002b1c <HAL_DMA_Abort_IT+0xe4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d102      	bne.n	8002abc <HAL_DMA_Abort_IT+0x84>
 8002ab6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002aba:	e00e      	b.n	8002ada <HAL_DMA_Abort_IT+0xa2>
 8002abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ac0:	e00b      	b.n	8002ada <HAL_DMA_Abort_IT+0xa2>
 8002ac2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ac6:	e008      	b.n	8002ada <HAL_DMA_Abort_IT+0xa2>
 8002ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002acc:	e005      	b.n	8002ada <HAL_DMA_Abort_IT+0xa2>
 8002ace:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ad2:	e002      	b.n	8002ada <HAL_DMA_Abort_IT+0xa2>
 8002ad4:	2310      	movs	r3, #16
 8002ad6:	e000      	b.n	8002ada <HAL_DMA_Abort_IT+0xa2>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	4a11      	ldr	r2, [pc, #68]	; (8002b20 <HAL_DMA_Abort_IT+0xe8>)
 8002adc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	4798      	blx	r3
    } 
  }
  return status;
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40020008 	.word	0x40020008
 8002b0c:	4002001c 	.word	0x4002001c
 8002b10:	40020030 	.word	0x40020030
 8002b14:	40020044 	.word	0x40020044
 8002b18:	40020058 	.word	0x40020058
 8002b1c:	4002006c 	.word	0x4002006c
 8002b20:	40020000 	.word	0x40020000

08002b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b08b      	sub	sp, #44	; 0x2c
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b32:	2300      	movs	r3, #0
 8002b34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b36:	e127      	b.n	8002d88 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b38:	2201      	movs	r2, #1
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	f040 8116 	bne.w	8002d82 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b12      	cmp	r3, #18
 8002b5c:	d034      	beq.n	8002bc8 <HAL_GPIO_Init+0xa4>
 8002b5e:	2b12      	cmp	r3, #18
 8002b60:	d80d      	bhi.n	8002b7e <HAL_GPIO_Init+0x5a>
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d02b      	beq.n	8002bbe <HAL_GPIO_Init+0x9a>
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d804      	bhi.n	8002b74 <HAL_GPIO_Init+0x50>
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d031      	beq.n	8002bd2 <HAL_GPIO_Init+0xae>
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d01c      	beq.n	8002bac <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b72:	e048      	b.n	8002c06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d043      	beq.n	8002c00 <HAL_GPIO_Init+0xdc>
 8002b78:	2b11      	cmp	r3, #17
 8002b7a:	d01b      	beq.n	8002bb4 <HAL_GPIO_Init+0x90>
          break;
 8002b7c:	e043      	b.n	8002c06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b7e:	4a89      	ldr	r2, [pc, #548]	; (8002da4 <HAL_GPIO_Init+0x280>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d026      	beq.n	8002bd2 <HAL_GPIO_Init+0xae>
 8002b84:	4a87      	ldr	r2, [pc, #540]	; (8002da4 <HAL_GPIO_Init+0x280>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d806      	bhi.n	8002b98 <HAL_GPIO_Init+0x74>
 8002b8a:	4a87      	ldr	r2, [pc, #540]	; (8002da8 <HAL_GPIO_Init+0x284>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d020      	beq.n	8002bd2 <HAL_GPIO_Init+0xae>
 8002b90:	4a86      	ldr	r2, [pc, #536]	; (8002dac <HAL_GPIO_Init+0x288>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d01d      	beq.n	8002bd2 <HAL_GPIO_Init+0xae>
          break;
 8002b96:	e036      	b.n	8002c06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b98:	4a85      	ldr	r2, [pc, #532]	; (8002db0 <HAL_GPIO_Init+0x28c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d019      	beq.n	8002bd2 <HAL_GPIO_Init+0xae>
 8002b9e:	4a85      	ldr	r2, [pc, #532]	; (8002db4 <HAL_GPIO_Init+0x290>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d016      	beq.n	8002bd2 <HAL_GPIO_Init+0xae>
 8002ba4:	4a84      	ldr	r2, [pc, #528]	; (8002db8 <HAL_GPIO_Init+0x294>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d013      	beq.n	8002bd2 <HAL_GPIO_Init+0xae>
          break;
 8002baa:	e02c      	b.n	8002c06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	623b      	str	r3, [r7, #32]
          break;
 8002bb2:	e028      	b.n	8002c06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	623b      	str	r3, [r7, #32]
          break;
 8002bbc:	e023      	b.n	8002c06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	3308      	adds	r3, #8
 8002bc4:	623b      	str	r3, [r7, #32]
          break;
 8002bc6:	e01e      	b.n	8002c06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	330c      	adds	r3, #12
 8002bce:	623b      	str	r3, [r7, #32]
          break;
 8002bd0:	e019      	b.n	8002c06 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d102      	bne.n	8002be0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bda:	2304      	movs	r3, #4
 8002bdc:	623b      	str	r3, [r7, #32]
          break;
 8002bde:	e012      	b.n	8002c06 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d105      	bne.n	8002bf4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002be8:	2308      	movs	r3, #8
 8002bea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	611a      	str	r2, [r3, #16]
          break;
 8002bf2:	e008      	b.n	8002c06 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bf4:	2308      	movs	r3, #8
 8002bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	615a      	str	r2, [r3, #20]
          break;
 8002bfe:	e002      	b.n	8002c06 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c00:	2300      	movs	r3, #0
 8002c02:	623b      	str	r3, [r7, #32]
          break;
 8002c04:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	2bff      	cmp	r3, #255	; 0xff
 8002c0a:	d801      	bhi.n	8002c10 <HAL_GPIO_Init+0xec>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	e001      	b.n	8002c14 <HAL_GPIO_Init+0xf0>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3304      	adds	r3, #4
 8002c14:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	2bff      	cmp	r3, #255	; 0xff
 8002c1a:	d802      	bhi.n	8002c22 <HAL_GPIO_Init+0xfe>
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	e002      	b.n	8002c28 <HAL_GPIO_Init+0x104>
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	3b08      	subs	r3, #8
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	210f      	movs	r1, #15
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	401a      	ands	r2, r3
 8002c3a:	6a39      	ldr	r1, [r7, #32]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c42:	431a      	orrs	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 8096 	beq.w	8002d82 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c56:	4b59      	ldr	r3, [pc, #356]	; (8002dbc <HAL_GPIO_Init+0x298>)
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	4a58      	ldr	r2, [pc, #352]	; (8002dbc <HAL_GPIO_Init+0x298>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	6193      	str	r3, [r2, #24]
 8002c62:	4b56      	ldr	r3, [pc, #344]	; (8002dbc <HAL_GPIO_Init+0x298>)
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c6e:	4a54      	ldr	r2, [pc, #336]	; (8002dc0 <HAL_GPIO_Init+0x29c>)
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	089b      	lsrs	r3, r3, #2
 8002c74:	3302      	adds	r3, #2
 8002c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	220f      	movs	r2, #15
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a4b      	ldr	r2, [pc, #300]	; (8002dc4 <HAL_GPIO_Init+0x2a0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d013      	beq.n	8002cc2 <HAL_GPIO_Init+0x19e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a4a      	ldr	r2, [pc, #296]	; (8002dc8 <HAL_GPIO_Init+0x2a4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00d      	beq.n	8002cbe <HAL_GPIO_Init+0x19a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a49      	ldr	r2, [pc, #292]	; (8002dcc <HAL_GPIO_Init+0x2a8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d007      	beq.n	8002cba <HAL_GPIO_Init+0x196>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a48      	ldr	r2, [pc, #288]	; (8002dd0 <HAL_GPIO_Init+0x2ac>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d101      	bne.n	8002cb6 <HAL_GPIO_Init+0x192>
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e006      	b.n	8002cc4 <HAL_GPIO_Init+0x1a0>
 8002cb6:	2304      	movs	r3, #4
 8002cb8:	e004      	b.n	8002cc4 <HAL_GPIO_Init+0x1a0>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e002      	b.n	8002cc4 <HAL_GPIO_Init+0x1a0>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_GPIO_Init+0x1a0>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc6:	f002 0203 	and.w	r2, r2, #3
 8002cca:	0092      	lsls	r2, r2, #2
 8002ccc:	4093      	lsls	r3, r2
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cd4:	493a      	ldr	r1, [pc, #232]	; (8002dc0 <HAL_GPIO_Init+0x29c>)
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	3302      	adds	r3, #2
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cee:	4b39      	ldr	r3, [pc, #228]	; (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4938      	ldr	r1, [pc, #224]	; (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]
 8002cfa:	e006      	b.n	8002d0a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cfc:	4b35      	ldr	r3, [pc, #212]	; (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	4933      	ldr	r1, [pc, #204]	; (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d006      	beq.n	8002d24 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d16:	4b2f      	ldr	r3, [pc, #188]	; (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	492e      	ldr	r1, [pc, #184]	; (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	604b      	str	r3, [r1, #4]
 8002d22:	e006      	b.n	8002d32 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d24:	4b2b      	ldr	r3, [pc, #172]	; (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	4929      	ldr	r1, [pc, #164]	; (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d006      	beq.n	8002d4c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d3e:	4b25      	ldr	r3, [pc, #148]	; (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	4924      	ldr	r1, [pc, #144]	; (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	608b      	str	r3, [r1, #8]
 8002d4a:	e006      	b.n	8002d5a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d4c:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	43db      	mvns	r3, r3
 8002d54:	491f      	ldr	r1, [pc, #124]	; (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d006      	beq.n	8002d74 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d66:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	491a      	ldr	r1, [pc, #104]	; (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60cb      	str	r3, [r1, #12]
 8002d72:	e006      	b.n	8002d82 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d74:	4b17      	ldr	r3, [pc, #92]	; (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	4915      	ldr	r1, [pc, #84]	; (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	3301      	adds	r3, #1
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f47f aed0 	bne.w	8002b38 <HAL_GPIO_Init+0x14>
  }
}
 8002d98:	bf00      	nop
 8002d9a:	372c      	adds	r7, #44	; 0x2c
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	10210000 	.word	0x10210000
 8002da8:	10110000 	.word	0x10110000
 8002dac:	10120000 	.word	0x10120000
 8002db0:	10310000 	.word	0x10310000
 8002db4:	10320000 	.word	0x10320000
 8002db8:	10220000 	.word	0x10220000
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40010000 	.word	0x40010000
 8002dc4:	40010800 	.word	0x40010800
 8002dc8:	40010c00 	.word	0x40010c00
 8002dcc:	40011000 	.word	0x40011000
 8002dd0:	40011400 	.word	0x40011400
 8002dd4:	40010400 	.word	0x40010400

08002dd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	887b      	ldrh	r3, [r7, #2]
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002df0:	2301      	movs	r3, #1
 8002df2:	73fb      	strb	r3, [r7, #15]
 8002df4:	e001      	b.n	8002dfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002df6:	2300      	movs	r3, #0
 8002df8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr

08002e06 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	807b      	strh	r3, [r7, #2]
 8002e12:	4613      	mov	r3, r2
 8002e14:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e16:	787b      	ldrb	r3, [r7, #1]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e1c:	887a      	ldrh	r2, [r7, #2]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e22:	e003      	b.n	8002e2c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e24:	887b      	ldrh	r3, [r7, #2]
 8002e26:	041a      	lsls	r2, r3, #16
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	611a      	str	r2, [r3, #16]
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr
	...

08002e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e26c      	b.n	8003324 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8087 	beq.w	8002f66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e58:	4b92      	ldr	r3, [pc, #584]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 030c 	and.w	r3, r3, #12
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d00c      	beq.n	8002e7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e64:	4b8f      	ldr	r3, [pc, #572]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 030c 	and.w	r3, r3, #12
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d112      	bne.n	8002e96 <HAL_RCC_OscConfig+0x5e>
 8002e70:	4b8c      	ldr	r3, [pc, #560]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e7c:	d10b      	bne.n	8002e96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7e:	4b89      	ldr	r3, [pc, #548]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d06c      	beq.n	8002f64 <HAL_RCC_OscConfig+0x12c>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d168      	bne.n	8002f64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e246      	b.n	8003324 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9e:	d106      	bne.n	8002eae <HAL_RCC_OscConfig+0x76>
 8002ea0:	4b80      	ldr	r3, [pc, #512]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a7f      	ldr	r2, [pc, #508]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eaa:	6013      	str	r3, [r2, #0]
 8002eac:	e02e      	b.n	8002f0c <HAL_RCC_OscConfig+0xd4>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x98>
 8002eb6:	4b7b      	ldr	r3, [pc, #492]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a7a      	ldr	r2, [pc, #488]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	4b78      	ldr	r3, [pc, #480]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a77      	ldr	r2, [pc, #476]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	e01d      	b.n	8002f0c <HAL_RCC_OscConfig+0xd4>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0xbc>
 8002eda:	4b72      	ldr	r3, [pc, #456]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a71      	ldr	r2, [pc, #452]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	4b6f      	ldr	r3, [pc, #444]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6e      	ldr	r2, [pc, #440]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	e00b      	b.n	8002f0c <HAL_RCC_OscConfig+0xd4>
 8002ef4:	4b6b      	ldr	r3, [pc, #428]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a6a      	ldr	r2, [pc, #424]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	4b68      	ldr	r3, [pc, #416]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a67      	ldr	r2, [pc, #412]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d013      	beq.n	8002f3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7ff f846 	bl	8001fa4 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f1c:	f7ff f842 	bl	8001fa4 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	; 0x64
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e1fa      	b.n	8003324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	4b5d      	ldr	r3, [pc, #372]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0xe4>
 8002f3a:	e014      	b.n	8002f66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7ff f832 	bl	8001fa4 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f44:	f7ff f82e 	bl	8001fa4 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	; 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e1e6      	b.n	8003324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f56:	4b53      	ldr	r3, [pc, #332]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0x10c>
 8002f62:	e000      	b.n	8002f66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d063      	beq.n	800303a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f72:	4b4c      	ldr	r3, [pc, #304]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00b      	beq.n	8002f96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f7e:	4b49      	ldr	r3, [pc, #292]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d11c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x18c>
 8002f8a:	4b46      	ldr	r3, [pc, #280]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d116      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f96:	4b43      	ldr	r3, [pc, #268]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <HAL_RCC_OscConfig+0x176>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d001      	beq.n	8002fae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e1ba      	b.n	8003324 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fae:	4b3d      	ldr	r3, [pc, #244]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4939      	ldr	r1, [pc, #228]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc2:	e03a      	b.n	800303a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d020      	beq.n	800300e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fcc:	4b36      	ldr	r3, [pc, #216]	; (80030a8 <HAL_RCC_OscConfig+0x270>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd2:	f7fe ffe7 	bl	8001fa4 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fda:	f7fe ffe3 	bl	8001fa4 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e19b      	b.n	8003324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fec:	4b2d      	ldr	r3, [pc, #180]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff8:	4b2a      	ldr	r3, [pc, #168]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4927      	ldr	r1, [pc, #156]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8003008:	4313      	orrs	r3, r2
 800300a:	600b      	str	r3, [r1, #0]
 800300c:	e015      	b.n	800303a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800300e:	4b26      	ldr	r3, [pc, #152]	; (80030a8 <HAL_RCC_OscConfig+0x270>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7fe ffc6 	bl	8001fa4 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800301c:	f7fe ffc2 	bl	8001fa4 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e17a      	b.n	8003324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302e:	4b1d      	ldr	r3, [pc, #116]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d03a      	beq.n	80030bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d019      	beq.n	8003082 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800304e:	4b17      	ldr	r3, [pc, #92]	; (80030ac <HAL_RCC_OscConfig+0x274>)
 8003050:	2201      	movs	r2, #1
 8003052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003054:	f7fe ffa6 	bl	8001fa4 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800305c:	f7fe ffa2 	bl	8001fa4 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e15a      	b.n	8003324 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306e:	4b0d      	ldr	r3, [pc, #52]	; (80030a4 <HAL_RCC_OscConfig+0x26c>)
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800307a:	2001      	movs	r0, #1
 800307c:	f000 fada 	bl	8003634 <RCC_Delay>
 8003080:	e01c      	b.n	80030bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003082:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <HAL_RCC_OscConfig+0x274>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003088:	f7fe ff8c 	bl	8001fa4 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800308e:	e00f      	b.n	80030b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003090:	f7fe ff88 	bl	8001fa4 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d908      	bls.n	80030b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e140      	b.n	8003324 <HAL_RCC_OscConfig+0x4ec>
 80030a2:	bf00      	nop
 80030a4:	40021000 	.word	0x40021000
 80030a8:	42420000 	.word	0x42420000
 80030ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b0:	4b9e      	ldr	r3, [pc, #632]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e9      	bne.n	8003090 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 80a6 	beq.w	8003216 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ca:	2300      	movs	r3, #0
 80030cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ce:	4b97      	ldr	r3, [pc, #604]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10d      	bne.n	80030f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030da:	4b94      	ldr	r3, [pc, #592]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	4a93      	ldr	r2, [pc, #588]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 80030e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e4:	61d3      	str	r3, [r2, #28]
 80030e6:	4b91      	ldr	r3, [pc, #580]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f2:	2301      	movs	r3, #1
 80030f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f6:	4b8e      	ldr	r3, [pc, #568]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d118      	bne.n	8003134 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003102:	4b8b      	ldr	r3, [pc, #556]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a8a      	ldr	r2, [pc, #552]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310e:	f7fe ff49 	bl	8001fa4 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003116:	f7fe ff45 	bl	8001fa4 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b64      	cmp	r3, #100	; 0x64
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e0fd      	b.n	8003324 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003128:	4b81      	ldr	r3, [pc, #516]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f0      	beq.n	8003116 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d106      	bne.n	800314a <HAL_RCC_OscConfig+0x312>
 800313c:	4b7b      	ldr	r3, [pc, #492]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	4a7a      	ldr	r2, [pc, #488]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	6213      	str	r3, [r2, #32]
 8003148:	e02d      	b.n	80031a6 <HAL_RCC_OscConfig+0x36e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10c      	bne.n	800316c <HAL_RCC_OscConfig+0x334>
 8003152:	4b76      	ldr	r3, [pc, #472]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	4a75      	ldr	r2, [pc, #468]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 8003158:	f023 0301 	bic.w	r3, r3, #1
 800315c:	6213      	str	r3, [r2, #32]
 800315e:	4b73      	ldr	r3, [pc, #460]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	4a72      	ldr	r2, [pc, #456]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 8003164:	f023 0304 	bic.w	r3, r3, #4
 8003168:	6213      	str	r3, [r2, #32]
 800316a:	e01c      	b.n	80031a6 <HAL_RCC_OscConfig+0x36e>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2b05      	cmp	r3, #5
 8003172:	d10c      	bne.n	800318e <HAL_RCC_OscConfig+0x356>
 8003174:	4b6d      	ldr	r3, [pc, #436]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	4a6c      	ldr	r2, [pc, #432]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 800317a:	f043 0304 	orr.w	r3, r3, #4
 800317e:	6213      	str	r3, [r2, #32]
 8003180:	4b6a      	ldr	r3, [pc, #424]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	4a69      	ldr	r2, [pc, #420]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 8003186:	f043 0301 	orr.w	r3, r3, #1
 800318a:	6213      	str	r3, [r2, #32]
 800318c:	e00b      	b.n	80031a6 <HAL_RCC_OscConfig+0x36e>
 800318e:	4b67      	ldr	r3, [pc, #412]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	4a66      	ldr	r2, [pc, #408]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	6213      	str	r3, [r2, #32]
 800319a:	4b64      	ldr	r3, [pc, #400]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	4a63      	ldr	r2, [pc, #396]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 80031a0:	f023 0304 	bic.w	r3, r3, #4
 80031a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d015      	beq.n	80031da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ae:	f7fe fef9 	bl	8001fa4 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b4:	e00a      	b.n	80031cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b6:	f7fe fef5 	bl	8001fa4 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e0ab      	b.n	8003324 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031cc:	4b57      	ldr	r3, [pc, #348]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0ee      	beq.n	80031b6 <HAL_RCC_OscConfig+0x37e>
 80031d8:	e014      	b.n	8003204 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031da:	f7fe fee3 	bl	8001fa4 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e0:	e00a      	b.n	80031f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e2:	f7fe fedf 	bl	8001fa4 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e095      	b.n	8003324 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f8:	4b4c      	ldr	r3, [pc, #304]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1ee      	bne.n	80031e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003204:	7dfb      	ldrb	r3, [r7, #23]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d105      	bne.n	8003216 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800320a:	4b48      	ldr	r3, [pc, #288]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	4a47      	ldr	r2, [pc, #284]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 8003210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003214:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 8081 	beq.w	8003322 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003220:	4b42      	ldr	r3, [pc, #264]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 030c 	and.w	r3, r3, #12
 8003228:	2b08      	cmp	r3, #8
 800322a:	d061      	beq.n	80032f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d146      	bne.n	80032c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003234:	4b3f      	ldr	r3, [pc, #252]	; (8003334 <HAL_RCC_OscConfig+0x4fc>)
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323a:	f7fe feb3 	bl	8001fa4 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003242:	f7fe feaf 	bl	8001fa4 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e067      	b.n	8003324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003254:	4b35      	ldr	r3, [pc, #212]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1f0      	bne.n	8003242 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003268:	d108      	bne.n	800327c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800326a:	4b30      	ldr	r3, [pc, #192]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	492d      	ldr	r1, [pc, #180]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 8003278:	4313      	orrs	r3, r2
 800327a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800327c:	4b2b      	ldr	r3, [pc, #172]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a19      	ldr	r1, [r3, #32]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	430b      	orrs	r3, r1
 800328e:	4927      	ldr	r1, [pc, #156]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 8003290:	4313      	orrs	r3, r2
 8003292:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003294:	4b27      	ldr	r3, [pc, #156]	; (8003334 <HAL_RCC_OscConfig+0x4fc>)
 8003296:	2201      	movs	r2, #1
 8003298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329a:	f7fe fe83 	bl	8001fa4 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a2:	f7fe fe7f 	bl	8001fa4 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e037      	b.n	8003324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032b4:	4b1d      	ldr	r3, [pc, #116]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0f0      	beq.n	80032a2 <HAL_RCC_OscConfig+0x46a>
 80032c0:	e02f      	b.n	8003322 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c2:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <HAL_RCC_OscConfig+0x4fc>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c8:	f7fe fe6c 	bl	8001fa4 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d0:	f7fe fe68 	bl	8001fa4 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e020      	b.n	8003324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032e2:	4b12      	ldr	r3, [pc, #72]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x498>
 80032ee:	e018      	b.n	8003322 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e013      	b.n	8003324 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_RCC_OscConfig+0x4f4>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	429a      	cmp	r2, r3
 800330e:	d106      	bne.n	800331e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331a:	429a      	cmp	r2, r3
 800331c:	d001      	beq.n	8003322 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40021000 	.word	0x40021000
 8003330:	40007000 	.word	0x40007000
 8003334:	42420060 	.word	0x42420060

08003338 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0d0      	b.n	80034ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800334c:	4b6a      	ldr	r3, [pc, #424]	; (80034f8 <HAL_RCC_ClockConfig+0x1c0>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d910      	bls.n	800337c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335a:	4b67      	ldr	r3, [pc, #412]	; (80034f8 <HAL_RCC_ClockConfig+0x1c0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f023 0207 	bic.w	r2, r3, #7
 8003362:	4965      	ldr	r1, [pc, #404]	; (80034f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800336a:	4b63      	ldr	r3, [pc, #396]	; (80034f8 <HAL_RCC_ClockConfig+0x1c0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d001      	beq.n	800337c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0b8      	b.n	80034ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d020      	beq.n	80033ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003394:	4b59      	ldr	r3, [pc, #356]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4a58      	ldr	r2, [pc, #352]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 800339a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800339e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033ac:	4b53      	ldr	r3, [pc, #332]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4a52      	ldr	r2, [pc, #328]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 80033b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b8:	4b50      	ldr	r3, [pc, #320]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	494d      	ldr	r1, [pc, #308]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d040      	beq.n	8003458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d107      	bne.n	80033ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033de:	4b47      	ldr	r3, [pc, #284]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d115      	bne.n	8003416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e07f      	b.n	80034ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d107      	bne.n	8003406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f6:	4b41      	ldr	r3, [pc, #260]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d109      	bne.n	8003416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e073      	b.n	80034ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003406:	4b3d      	ldr	r3, [pc, #244]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e06b      	b.n	80034ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003416:	4b39      	ldr	r3, [pc, #228]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f023 0203 	bic.w	r2, r3, #3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	4936      	ldr	r1, [pc, #216]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003428:	f7fe fdbc 	bl	8001fa4 <HAL_GetTick>
 800342c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342e:	e00a      	b.n	8003446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003430:	f7fe fdb8 	bl	8001fa4 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	f241 3288 	movw	r2, #5000	; 0x1388
 800343e:	4293      	cmp	r3, r2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e053      	b.n	80034ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003446:	4b2d      	ldr	r3, [pc, #180]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 020c 	and.w	r2, r3, #12
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	429a      	cmp	r2, r3
 8003456:	d1eb      	bne.n	8003430 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003458:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <HAL_RCC_ClockConfig+0x1c0>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d210      	bcs.n	8003488 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003466:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 0207 	bic.w	r2, r3, #7
 800346e:	4922      	ldr	r1, [pc, #136]	; (80034f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	4313      	orrs	r3, r2
 8003474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003476:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d001      	beq.n	8003488 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e032      	b.n	80034ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003494:	4b19      	ldr	r3, [pc, #100]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4916      	ldr	r1, [pc, #88]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034b2:	4b12      	ldr	r3, [pc, #72]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	490e      	ldr	r1, [pc, #56]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034c6:	f000 f821 	bl	800350c <HAL_RCC_GetSysClockFreq>
 80034ca:	4601      	mov	r1, r0
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80034d8:	5cd3      	ldrb	r3, [r2, r3]
 80034da:	fa21 f303 	lsr.w	r3, r1, r3
 80034de:	4a09      	ldr	r2, [pc, #36]	; (8003504 <HAL_RCC_ClockConfig+0x1cc>)
 80034e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034e2:	4b09      	ldr	r3, [pc, #36]	; (8003508 <HAL_RCC_ClockConfig+0x1d0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fe fd1a 	bl	8001f20 <HAL_InitTick>

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40022000 	.word	0x40022000
 80034fc:	40021000 	.word	0x40021000
 8003500:	08007128 	.word	0x08007128
 8003504:	2000000c 	.word	0x2000000c
 8003508:	20000010 	.word	0x20000010

0800350c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800350c:	b490      	push	{r4, r7}
 800350e:	b08a      	sub	sp, #40	; 0x28
 8003510:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003512:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003514:	1d3c      	adds	r4, r7, #4
 8003516:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800351c:	4b28      	ldr	r3, [pc, #160]	; (80035c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
 8003526:	2300      	movs	r3, #0
 8003528:	61bb      	str	r3, [r7, #24]
 800352a:	2300      	movs	r3, #0
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003536:	4b23      	ldr	r3, [pc, #140]	; (80035c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	2b04      	cmp	r3, #4
 8003544:	d002      	beq.n	800354c <HAL_RCC_GetSysClockFreq+0x40>
 8003546:	2b08      	cmp	r3, #8
 8003548:	d003      	beq.n	8003552 <HAL_RCC_GetSysClockFreq+0x46>
 800354a:	e02d      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800354c:	4b1e      	ldr	r3, [pc, #120]	; (80035c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800354e:	623b      	str	r3, [r7, #32]
      break;
 8003550:	e02d      	b.n	80035ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	0c9b      	lsrs	r3, r3, #18
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800355e:	4413      	add	r3, r2
 8003560:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003564:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d013      	beq.n	8003598 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003570:	4b14      	ldr	r3, [pc, #80]	; (80035c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	0c5b      	lsrs	r3, r3, #17
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800357e:	4413      	add	r3, r2
 8003580:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003584:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	4a0f      	ldr	r2, [pc, #60]	; (80035c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800358a:	fb02 f203 	mul.w	r2, r2, r3
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
 8003596:	e004      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	4a0c      	ldr	r2, [pc, #48]	; (80035cc <HAL_RCC_GetSysClockFreq+0xc0>)
 800359c:	fb02 f303 	mul.w	r3, r2, r3
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	623b      	str	r3, [r7, #32]
      break;
 80035a6:	e002      	b.n	80035ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035a8:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035aa:	623b      	str	r3, [r7, #32]
      break;
 80035ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ae:	6a3b      	ldr	r3, [r7, #32]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3728      	adds	r7, #40	; 0x28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc90      	pop	{r4, r7}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	08006b10 	.word	0x08006b10
 80035c0:	08006b20 	.word	0x08006b20
 80035c4:	40021000 	.word	0x40021000
 80035c8:	007a1200 	.word	0x007a1200
 80035cc:	003d0900 	.word	0x003d0900

080035d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d4:	4b02      	ldr	r3, [pc, #8]	; (80035e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr
 80035e0:	2000000c 	.word	0x2000000c

080035e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035e8:	f7ff fff2 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 80035ec:	4601      	mov	r1, r0
 80035ee:	4b05      	ldr	r3, [pc, #20]	; (8003604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	0a1b      	lsrs	r3, r3, #8
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	4a03      	ldr	r2, [pc, #12]	; (8003608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035fa:	5cd3      	ldrb	r3, [r2, r3]
 80035fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40021000 	.word	0x40021000
 8003608:	08007138 	.word	0x08007138

0800360c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003610:	f7ff ffde 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 8003614:	4601      	mov	r1, r0
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	0adb      	lsrs	r3, r3, #11
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	4a03      	ldr	r2, [pc, #12]	; (8003630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003622:	5cd3      	ldrb	r3, [r2, r3]
 8003624:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003628:	4618      	mov	r0, r3
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40021000 	.word	0x40021000
 8003630:	08007138 	.word	0x08007138

08003634 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800363c:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <RCC_Delay+0x34>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a0a      	ldr	r2, [pc, #40]	; (800366c <RCC_Delay+0x38>)
 8003642:	fba2 2303 	umull	r2, r3, r2, r3
 8003646:	0a5b      	lsrs	r3, r3, #9
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	fb02 f303 	mul.w	r3, r2, r3
 800364e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003650:	bf00      	nop
  }
  while (Delay --);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	1e5a      	subs	r2, r3, #1
 8003656:	60fa      	str	r2, [r7, #12]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1f9      	bne.n	8003650 <RCC_Delay+0x1c>
}
 800365c:	bf00      	nop
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	bc80      	pop	{r7}
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	2000000c 	.word	0x2000000c
 800366c:	10624dd3 	.word	0x10624dd3

08003670 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d07d      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800368c:	2300      	movs	r3, #0
 800368e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003690:	4b4f      	ldr	r3, [pc, #316]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10d      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800369c:	4b4c      	ldr	r3, [pc, #304]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	4a4b      	ldr	r2, [pc, #300]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a6:	61d3      	str	r3, [r2, #28]
 80036a8:	4b49      	ldr	r3, [pc, #292]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b4:	2301      	movs	r3, #1
 80036b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b8:	4b46      	ldr	r3, [pc, #280]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d118      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036c4:	4b43      	ldr	r3, [pc, #268]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a42      	ldr	r2, [pc, #264]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d0:	f7fe fc68 	bl	8001fa4 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d6:	e008      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d8:	f7fe fc64 	bl	8001fa4 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b64      	cmp	r3, #100	; 0x64
 80036e4:	d901      	bls.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e06d      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ea:	4b3a      	ldr	r3, [pc, #232]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036f6:	4b36      	ldr	r3, [pc, #216]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d02e      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	429a      	cmp	r2, r3
 8003712:	d027      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003714:	4b2e      	ldr	r3, [pc, #184]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800371c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800371e:	4b2e      	ldr	r3, [pc, #184]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003724:	4b2c      	ldr	r3, [pc, #176]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800372a:	4a29      	ldr	r2, [pc, #164]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d014      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373a:	f7fe fc33 	bl	8001fa4 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003740:	e00a      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003742:	f7fe fc2f 	bl	8001fa4 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003750:	4293      	cmp	r3, r2
 8003752:	d901      	bls.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e036      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003758:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0ee      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003764:	4b1a      	ldr	r3, [pc, #104]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	4917      	ldr	r1, [pc, #92]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003772:	4313      	orrs	r3, r2
 8003774:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003776:	7dfb      	ldrb	r3, [r7, #23]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d105      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800377c:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	4a13      	ldr	r2, [pc, #76]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003786:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003794:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	490b      	ldr	r1, [pc, #44]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0310 	and.w	r3, r3, #16
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d008      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037b2:	4b07      	ldr	r3, [pc, #28]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	4904      	ldr	r1, [pc, #16]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40007000 	.word	0x40007000
 80037d8:	42420440 	.word	0x42420440

080037dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80037dc:	b590      	push	{r4, r7, lr}
 80037de:	b08d      	sub	sp, #52	; 0x34
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037e4:	4b55      	ldr	r3, [pc, #340]	; (800393c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80037e6:	f107 040c 	add.w	r4, r7, #12
 80037ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037f0:	4b53      	ldr	r3, [pc, #332]	; (8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
 80037fa:	2300      	movs	r3, #0
 80037fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037fe:	2300      	movs	r3, #0
 8003800:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003802:	2300      	movs	r3, #0
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	2300      	movs	r3, #0
 8003808:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b02      	cmp	r3, #2
 800380e:	d07f      	beq.n	8003910 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003810:	2b10      	cmp	r3, #16
 8003812:	d002      	beq.n	800381a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003814:	2b01      	cmp	r3, #1
 8003816:	d048      	beq.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003818:	e08b      	b.n	8003932 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800381a:	4b4a      	ldr	r3, [pc, #296]	; (8003944 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003820:	4b48      	ldr	r3, [pc, #288]	; (8003944 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d07f      	beq.n	800392c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	0c9b      	lsrs	r3, r3, #18
 8003830:	f003 030f 	and.w	r3, r3, #15
 8003834:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003838:	4413      	add	r3, r2
 800383a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800383e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d018      	beq.n	800387c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800384a:	4b3e      	ldr	r3, [pc, #248]	; (8003944 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	0c5b      	lsrs	r3, r3, #17
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003858:	4413      	add	r3, r2
 800385a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00d      	beq.n	8003886 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800386a:	4a37      	ldr	r2, [pc, #220]	; (8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	fb02 f303 	mul.w	r3, r2, r3
 8003878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800387a:	e004      	b.n	8003886 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	4a33      	ldr	r2, [pc, #204]	; (800394c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003880:	fb02 f303 	mul.w	r3, r2, r3
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003886:	4b2f      	ldr	r3, [pc, #188]	; (8003944 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800388e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003892:	d102      	bne.n	800389a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003896:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003898:	e048      	b.n	800392c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800389a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	4a2c      	ldr	r2, [pc, #176]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80038a0:	fba2 2303 	umull	r2, r3, r2, r3
 80038a4:	085b      	lsrs	r3, r3, #1
 80038a6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80038a8:	e040      	b.n	800392c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80038aa:	4b26      	ldr	r3, [pc, #152]	; (8003944 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ba:	d108      	bne.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80038c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80038cc:	e01f      	b.n	800390e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d8:	d109      	bne.n	80038ee <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80038da:	4b1a      	ldr	r3, [pc, #104]	; (8003944 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80038e6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80038ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ec:	e00f      	b.n	800390e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038f8:	d11a      	bne.n	8003930 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80038fa:	4b12      	ldr	r3, [pc, #72]	; (8003944 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d014      	beq.n	8003930 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003906:	f24f 4324 	movw	r3, #62500	; 0xf424
 800390a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800390c:	e010      	b.n	8003930 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800390e:	e00f      	b.n	8003930 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003910:	f7ff fe7c 	bl	800360c <HAL_RCC_GetPCLK2Freq>
 8003914:	4602      	mov	r2, r0
 8003916:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	0b9b      	lsrs	r3, r3, #14
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	3301      	adds	r3, #1
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	fbb2 f3f3 	udiv	r3, r2, r3
 8003928:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800392a:	e002      	b.n	8003932 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800392c:	bf00      	nop
 800392e:	e000      	b.n	8003932 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003930:	bf00      	nop
    }
  }
  return (frequency);
 8003932:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003934:	4618      	mov	r0, r3
 8003936:	3734      	adds	r7, #52	; 0x34
 8003938:	46bd      	mov	sp, r7
 800393a:	bd90      	pop	{r4, r7, pc}
 800393c:	08006b24 	.word	0x08006b24
 8003940:	08006b34 	.word	0x08006b34
 8003944:	40021000 	.word	0x40021000
 8003948:	007a1200 	.word	0x007a1200
 800394c:	003d0900 	.word	0x003d0900
 8003950:	aaaaaaab 	.word	0xaaaaaaab

08003954 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e01d      	b.n	80039a2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fe f8d4 	bl	8001b28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3304      	adds	r3, #4
 8003990:	4619      	mov	r1, r3
 8003992:	4610      	mov	r0, r2
 8003994:	f000 f902 	bl	8003b9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2201      	movs	r2, #1
 80039bc:	6839      	ldr	r1, [r7, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fad6 	bl	8003f70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a10      	ldr	r2, [pc, #64]	; (8003a0c <HAL_TIM_PWM_Start+0x60>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d107      	bne.n	80039de <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b06      	cmp	r3, #6
 80039ee:	d007      	beq.n	8003a00 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0201 	orr.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40012c00 	.word	0x40012c00

08003a10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e0b4      	b.n	8003b94 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2202      	movs	r2, #2
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b0c      	cmp	r3, #12
 8003a3e:	f200 809f 	bhi.w	8003b80 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003a42:	a201      	add	r2, pc, #4	; (adr r2, 8003a48 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a48:	08003a7d 	.word	0x08003a7d
 8003a4c:	08003b81 	.word	0x08003b81
 8003a50:	08003b81 	.word	0x08003b81
 8003a54:	08003b81 	.word	0x08003b81
 8003a58:	08003abd 	.word	0x08003abd
 8003a5c:	08003b81 	.word	0x08003b81
 8003a60:	08003b81 	.word	0x08003b81
 8003a64:	08003b81 	.word	0x08003b81
 8003a68:	08003aff 	.word	0x08003aff
 8003a6c:	08003b81 	.word	0x08003b81
 8003a70:	08003b81 	.word	0x08003b81
 8003a74:	08003b81 	.word	0x08003b81
 8003a78:	08003b3f 	.word	0x08003b3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 f8ec 	bl	8003c60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0208 	orr.w	r2, r2, #8
 8003a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0204 	bic.w	r2, r2, #4
 8003aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6999      	ldr	r1, [r3, #24]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	619a      	str	r2, [r3, #24]
      break;
 8003aba:	e062      	b.n	8003b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 f932 	bl	8003d2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6999      	ldr	r1, [r3, #24]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	021a      	lsls	r2, r3, #8
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	619a      	str	r2, [r3, #24]
      break;
 8003afc:	e041      	b.n	8003b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68b9      	ldr	r1, [r7, #8]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 f97b 	bl	8003e00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69da      	ldr	r2, [r3, #28]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0208 	orr.w	r2, r2, #8
 8003b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0204 	bic.w	r2, r2, #4
 8003b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69d9      	ldr	r1, [r3, #28]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	61da      	str	r2, [r3, #28]
      break;
 8003b3c:	e021      	b.n	8003b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 f9c5 	bl	8003ed4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69da      	ldr	r2, [r3, #28]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69d9      	ldr	r1, [r3, #28]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	021a      	lsls	r2, r3, #8
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	61da      	str	r2, [r3, #28]
      break;
 8003b7e:	e000      	b.n	8003b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003b80:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a29      	ldr	r2, [pc, #164]	; (8003c54 <TIM_Base_SetConfig+0xb8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00b      	beq.n	8003bcc <TIM_Base_SetConfig+0x30>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bba:	d007      	beq.n	8003bcc <TIM_Base_SetConfig+0x30>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a26      	ldr	r2, [pc, #152]	; (8003c58 <TIM_Base_SetConfig+0xbc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <TIM_Base_SetConfig+0x30>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a25      	ldr	r2, [pc, #148]	; (8003c5c <TIM_Base_SetConfig+0xc0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d108      	bne.n	8003bde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a1c      	ldr	r2, [pc, #112]	; (8003c54 <TIM_Base_SetConfig+0xb8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00b      	beq.n	8003bfe <TIM_Base_SetConfig+0x62>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bec:	d007      	beq.n	8003bfe <TIM_Base_SetConfig+0x62>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a19      	ldr	r2, [pc, #100]	; (8003c58 <TIM_Base_SetConfig+0xbc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d003      	beq.n	8003bfe <TIM_Base_SetConfig+0x62>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a18      	ldr	r2, [pc, #96]	; (8003c5c <TIM_Base_SetConfig+0xc0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d108      	bne.n	8003c10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a07      	ldr	r2, [pc, #28]	; (8003c54 <TIM_Base_SetConfig+0xb8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d103      	bne.n	8003c44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	615a      	str	r2, [r3, #20]
}
 8003c4a:	bf00      	nop
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr
 8003c54:	40012c00 	.word	0x40012c00
 8003c58:	40000400 	.word	0x40000400
 8003c5c:	40000800 	.word	0x40000800

08003c60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	f023 0201 	bic.w	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0303 	bic.w	r3, r3, #3
 8003c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f023 0302 	bic.w	r3, r3, #2
 8003ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a1c      	ldr	r2, [pc, #112]	; (8003d28 <TIM_OC1_SetConfig+0xc8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d10c      	bne.n	8003cd6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f023 0308 	bic.w	r3, r3, #8
 8003cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f023 0304 	bic.w	r3, r3, #4
 8003cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a13      	ldr	r2, [pc, #76]	; (8003d28 <TIM_OC1_SetConfig+0xc8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d111      	bne.n	8003d02 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	621a      	str	r2, [r3, #32]
}
 8003d1c:	bf00      	nop
 8003d1e:	371c      	adds	r7, #28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40012c00 	.word	0x40012c00

08003d2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	f023 0210 	bic.w	r2, r3, #16
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	021b      	lsls	r3, r3, #8
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f023 0320 	bic.w	r3, r3, #32
 8003d76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a1d      	ldr	r2, [pc, #116]	; (8003dfc <TIM_OC2_SetConfig+0xd0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d10d      	bne.n	8003da8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003da6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a14      	ldr	r2, [pc, #80]	; (8003dfc <TIM_OC2_SetConfig+0xd0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d113      	bne.n	8003dd8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003db6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	621a      	str	r2, [r3, #32]
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr
 8003dfc:	40012c00 	.word	0x40012c00

08003e00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0303 	bic.w	r3, r3, #3
 8003e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	021b      	lsls	r3, r3, #8
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a1d      	ldr	r2, [pc, #116]	; (8003ed0 <TIM_OC3_SetConfig+0xd0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d10d      	bne.n	8003e7a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	021b      	lsls	r3, r3, #8
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a14      	ldr	r2, [pc, #80]	; (8003ed0 <TIM_OC3_SetConfig+0xd0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d113      	bne.n	8003eaa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	621a      	str	r2, [r3, #32]
}
 8003ec4:	bf00      	nop
 8003ec6:	371c      	adds	r7, #28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40012c00 	.word	0x40012c00

08003ed4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	031b      	lsls	r3, r3, #12
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a0f      	ldr	r2, [pc, #60]	; (8003f6c <TIM_OC4_SetConfig+0x98>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d109      	bne.n	8003f48 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	019b      	lsls	r3, r3, #6
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	621a      	str	r2, [r3, #32]
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr
 8003f6c:	40012c00 	.word	0x40012c00

08003f70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	2201      	movs	r2, #1
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a1a      	ldr	r2, [r3, #32]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	401a      	ands	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a1a      	ldr	r2, [r3, #32]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	621a      	str	r2, [r3, #32]
}
 8003fae:	bf00      	nop
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e03f      	b.n	800404a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fd fe3c 	bl	8001c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2224      	movs	r2, #36	; 0x24
 8003fe8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ffa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 fba9 	bl	8004754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004010:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695a      	ldr	r2, [r3, #20]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b088      	sub	sp, #32
 8004056:	af02      	add	r7, sp, #8
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	603b      	str	r3, [r7, #0]
 800405e:	4613      	mov	r3, r2
 8004060:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b20      	cmp	r3, #32
 8004070:	f040 8083 	bne.w	800417a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <HAL_UART_Transmit+0x2e>
 800407a:	88fb      	ldrh	r3, [r7, #6]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e07b      	b.n	800417c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800408a:	2b01      	cmp	r3, #1
 800408c:	d101      	bne.n	8004092 <HAL_UART_Transmit+0x40>
 800408e:	2302      	movs	r3, #2
 8004090:	e074      	b.n	800417c <HAL_UART_Transmit+0x12a>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2221      	movs	r2, #33	; 0x21
 80040a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80040a8:	f7fd ff7c 	bl	8001fa4 <HAL_GetTick>
 80040ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	88fa      	ldrh	r2, [r7, #6]
 80040b2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	88fa      	ldrh	r2, [r7, #6]
 80040b8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040ba:	e042      	b.n	8004142 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d2:	d122      	bne.n	800411a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2200      	movs	r2, #0
 80040dc:	2180      	movs	r1, #128	; 0x80
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 f9cf 	bl	8004482 <UART_WaitOnFlagUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e046      	b.n	800417c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004100:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d103      	bne.n	8004112 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	3302      	adds	r3, #2
 800410e:	60bb      	str	r3, [r7, #8]
 8004110:	e017      	b.n	8004142 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	3301      	adds	r3, #1
 8004116:	60bb      	str	r3, [r7, #8]
 8004118:	e013      	b.n	8004142 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2200      	movs	r2, #0
 8004122:	2180      	movs	r1, #128	; 0x80
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f9ac 	bl	8004482 <UART_WaitOnFlagUntilTimeout>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e023      	b.n	800417c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	60ba      	str	r2, [r7, #8]
 800413a:	781a      	ldrb	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004146:	b29b      	uxth	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1b7      	bne.n	80040bc <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2200      	movs	r2, #0
 8004154:	2140      	movs	r1, #64	; 0x40
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 f993 	bl	8004482 <UART_WaitOnFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e00a      	b.n	800417c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2220      	movs	r2, #32
 800416a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	e000      	b.n	800417c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800417a:	2302      	movs	r3, #2
  }
}
 800417c:	4618      	mov	r0, r3
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	4613      	mov	r3, r2
 8004190:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b20      	cmp	r3, #32
 800419c:	d140      	bne.n	8004220 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <HAL_UART_Receive_IT+0x26>
 80041a4:	88fb      	ldrh	r3, [r7, #6]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e039      	b.n	8004222 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_UART_Receive_IT+0x38>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e032      	b.n	8004222 <HAL_UART_Receive_IT+0x9e>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	88fa      	ldrh	r2, [r7, #6]
 80041ce:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	88fa      	ldrh	r2, [r7, #6]
 80041d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2222      	movs	r2, #34	; 0x22
 80041e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041fa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695a      	ldr	r2, [r3, #20]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0220 	orr.w	r2, r2, #32
 800421a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	e000      	b.n	8004222 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004220:	2302      	movs	r3, #2
  }
}
 8004222:	4618      	mov	r0, r3
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr

0800422c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b088      	sub	sp, #32
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800424c:	2300      	movs	r3, #0
 800424e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10d      	bne.n	800427e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	f003 0320 	and.w	r3, r3, #32
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <HAL_UART_IRQHandler+0x52>
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	f003 0320 	and.w	r3, r3, #32
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f9eb 	bl	8004652 <UART_Receive_IT>
      return;
 800427c:	e0cc      	b.n	8004418 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 80ab 	beq.w	80043dc <HAL_UART_IRQHandler+0x1b0>
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d105      	bne.n	800429c <HAL_UART_IRQHandler+0x70>
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 80a0 	beq.w	80043dc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <HAL_UART_IRQHandler+0x90>
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b4:	f043 0201 	orr.w	r2, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <HAL_UART_IRQHandler+0xb0>
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d4:	f043 0202 	orr.w	r2, r3, #2
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <HAL_UART_IRQHandler+0xd0>
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f4:	f043 0204 	orr.w	r2, r3, #4
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <HAL_UART_IRQHandler+0xf0>
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004314:	f043 0208 	orr.w	r2, r3, #8
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004320:	2b00      	cmp	r3, #0
 8004322:	d078      	beq.n	8004416 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <HAL_UART_IRQHandler+0x112>
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f98a 	bl	8004652 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	bf14      	ite	ne
 800434c:	2301      	movne	r3, #1
 800434e:	2300      	moveq	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d102      	bne.n	8004366 <HAL_UART_IRQHandler+0x13a>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d031      	beq.n	80043ca <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f8d5 	bl	8004516 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004376:	2b00      	cmp	r3, #0
 8004378:	d023      	beq.n	80043c2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695a      	ldr	r2, [r3, #20]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004388:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438e:	2b00      	cmp	r3, #0
 8004390:	d013      	beq.n	80043ba <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004396:	4a22      	ldr	r2, [pc, #136]	; (8004420 <HAL_UART_IRQHandler+0x1f4>)
 8004398:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fe fb4a 	bl	8002a38 <HAL_DMA_Abort_IT>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d016      	beq.n	80043d8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043b4:	4610      	mov	r0, r2
 80043b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b8:	e00e      	b.n	80043d8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f83b 	bl	8004436 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c0:	e00a      	b.n	80043d8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f837 	bl	8004436 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c8:	e006      	b.n	80043d8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f833 	bl	8004436 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80043d6:	e01e      	b.n	8004416 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d8:	bf00      	nop
    return;
 80043da:	e01c      	b.n	8004416 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d008      	beq.n	80043f8 <HAL_UART_IRQHandler+0x1cc>
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f8c1 	bl	8004578 <UART_Transmit_IT>
    return;
 80043f6:	e00f      	b.n	8004418 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_UART_IRQHandler+0x1ec>
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f908 	bl	8004622 <UART_EndTransmit_IT>
    return;
 8004412:	bf00      	nop
 8004414:	e000      	b.n	8004418 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004416:	bf00      	nop
  }
}
 8004418:	3720      	adds	r7, #32
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	08004551 	.word	0x08004551

08004424 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr

08004436 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr

08004448 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8004450:	2300      	movs	r3, #0
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	2300      	movs	r3, #0
 8004456:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800445e:	b2db      	uxtb	r3, r3
 8004460:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004468:	b2db      	uxtb	r3, r3
 800446a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	b2da      	uxtb	r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	4313      	orrs	r3, r2
 8004476:	b2db      	uxtb	r3, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr

08004482 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	603b      	str	r3, [r7, #0]
 800448e:	4613      	mov	r3, r2
 8004490:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004492:	e02c      	b.n	80044ee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449a:	d028      	beq.n	80044ee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d007      	beq.n	80044b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80044a2:	f7fd fd7f 	bl	8001fa4 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d21d      	bcs.n	80044ee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044c0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695a      	ldr	r2, [r3, #20]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0201 	bic.w	r2, r2, #1
 80044d0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e00f      	b.n	800450e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4013      	ands	r3, r2
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	bf0c      	ite	eq
 80044fe:	2301      	moveq	r3, #1
 8004500:	2300      	movne	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	461a      	mov	r2, r3
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	429a      	cmp	r2, r3
 800450a:	d0c3      	beq.n	8004494 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800452c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695a      	ldr	r2, [r3, #20]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0201 	bic.w	r2, r2, #1
 800453c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f7ff ff63 	bl	8004436 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004570:	bf00      	nop
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b21      	cmp	r3, #33	; 0x21
 800458a:	d144      	bne.n	8004616 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004594:	d11a      	bne.n	80045cc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045aa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d105      	bne.n	80045c0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	1c9a      	adds	r2, r3, #2
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	621a      	str	r2, [r3, #32]
 80045be:	e00e      	b.n	80045de <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	621a      	str	r2, [r3, #32]
 80045ca:	e008      	b.n	80045de <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	1c59      	adds	r1, r3, #1
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6211      	str	r1, [r2, #32]
 80045d6:	781a      	ldrb	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	4619      	mov	r1, r3
 80045ec:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10f      	bne.n	8004612 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004600:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004610:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	e000      	b.n	8004618 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004616:	2302      	movs	r3, #2
  }
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr

08004622 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004638:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7ff feee 	bl	8004424 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b084      	sub	sp, #16
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b22      	cmp	r3, #34	; 0x22
 8004664:	d171      	bne.n	800474a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466e:	d123      	bne.n	80046b8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004674:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10e      	bne.n	800469c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	b29b      	uxth	r3, r3
 8004686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468a:	b29a      	uxth	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004694:	1c9a      	adds	r2, r3, #2
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	629a      	str	r2, [r3, #40]	; 0x28
 800469a:	e029      	b.n	80046f0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	629a      	str	r2, [r3, #40]	; 0x28
 80046b6:	e01b      	b.n	80046f0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10a      	bne.n	80046d6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6858      	ldr	r0, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ca:	1c59      	adds	r1, r3, #1
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6291      	str	r1, [r2, #40]	; 0x28
 80046d0:	b2c2      	uxtb	r2, r0
 80046d2:	701a      	strb	r2, [r3, #0]
 80046d4:	e00c      	b.n	80046f0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e2:	1c58      	adds	r0, r3, #1
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	6288      	str	r0, [r1, #40]	; 0x28
 80046e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	4619      	mov	r1, r3
 80046fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004700:	2b00      	cmp	r3, #0
 8004702:	d120      	bne.n	8004746 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0220 	bic.w	r2, r2, #32
 8004712:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004722:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695a      	ldr	r2, [r3, #20]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0201 	bic.w	r2, r2, #1
 8004732:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7fd fb5f 	bl	8001e00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e002      	b.n	800474c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	e000      	b.n	800474c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800474a:	2302      	movs	r3, #2
  }
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800478e:	f023 030c 	bic.w	r3, r3, #12
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6812      	ldr	r2, [r2, #0]
 8004796:	68f9      	ldr	r1, [r7, #12]
 8004798:	430b      	orrs	r3, r1
 800479a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699a      	ldr	r2, [r3, #24]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a52      	ldr	r2, [pc, #328]	; (8004900 <UART_SetConfig+0x1ac>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d14e      	bne.n	800485a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047bc:	f7fe ff26 	bl	800360c <HAL_RCC_GetPCLK2Freq>
 80047c0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	009a      	lsls	r2, r3, #2
 80047cc:	441a      	add	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d8:	4a4a      	ldr	r2, [pc, #296]	; (8004904 <UART_SetConfig+0x1b0>)
 80047da:	fba2 2303 	umull	r2, r3, r2, r3
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	0119      	lsls	r1, r3, #4
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	009a      	lsls	r2, r3, #2
 80047ec:	441a      	add	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80047f8:	4b42      	ldr	r3, [pc, #264]	; (8004904 <UART_SetConfig+0x1b0>)
 80047fa:	fba3 0302 	umull	r0, r3, r3, r2
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	2064      	movs	r0, #100	; 0x64
 8004802:	fb00 f303 	mul.w	r3, r0, r3
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	3332      	adds	r3, #50	; 0x32
 800480c:	4a3d      	ldr	r2, [pc, #244]	; (8004904 <UART_SetConfig+0x1b0>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	095b      	lsrs	r3, r3, #5
 8004814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004818:	4419      	add	r1, r3
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	4613      	mov	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	009a      	lsls	r2, r3, #2
 8004824:	441a      	add	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004830:	4b34      	ldr	r3, [pc, #208]	; (8004904 <UART_SetConfig+0x1b0>)
 8004832:	fba3 0302 	umull	r0, r3, r3, r2
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	2064      	movs	r0, #100	; 0x64
 800483a:	fb00 f303 	mul.w	r3, r0, r3
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	3332      	adds	r3, #50	; 0x32
 8004844:	4a2f      	ldr	r2, [pc, #188]	; (8004904 <UART_SetConfig+0x1b0>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	f003 020f 	and.w	r2, r3, #15
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	440a      	add	r2, r1
 8004856:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004858:	e04d      	b.n	80048f6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800485a:	f7fe fec3 	bl	80035e4 <HAL_RCC_GetPCLK1Freq>
 800485e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	4613      	mov	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	009a      	lsls	r2, r3, #2
 800486a:	441a      	add	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	fbb2 f3f3 	udiv	r3, r2, r3
 8004876:	4a23      	ldr	r2, [pc, #140]	; (8004904 <UART_SetConfig+0x1b0>)
 8004878:	fba2 2303 	umull	r2, r3, r2, r3
 800487c:	095b      	lsrs	r3, r3, #5
 800487e:	0119      	lsls	r1, r3, #4
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	4613      	mov	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	009a      	lsls	r2, r3, #2
 800488a:	441a      	add	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	fbb2 f2f3 	udiv	r2, r2, r3
 8004896:	4b1b      	ldr	r3, [pc, #108]	; (8004904 <UART_SetConfig+0x1b0>)
 8004898:	fba3 0302 	umull	r0, r3, r3, r2
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	2064      	movs	r0, #100	; 0x64
 80048a0:	fb00 f303 	mul.w	r3, r0, r3
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	3332      	adds	r3, #50	; 0x32
 80048aa:	4a16      	ldr	r2, [pc, #88]	; (8004904 <UART_SetConfig+0x1b0>)
 80048ac:	fba2 2303 	umull	r2, r3, r2, r3
 80048b0:	095b      	lsrs	r3, r3, #5
 80048b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048b6:	4419      	add	r1, r3
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	009a      	lsls	r2, r3, #2
 80048c2:	441a      	add	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80048ce:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <UART_SetConfig+0x1b0>)
 80048d0:	fba3 0302 	umull	r0, r3, r3, r2
 80048d4:	095b      	lsrs	r3, r3, #5
 80048d6:	2064      	movs	r0, #100	; 0x64
 80048d8:	fb00 f303 	mul.w	r3, r0, r3
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	3332      	adds	r3, #50	; 0x32
 80048e2:	4a08      	ldr	r2, [pc, #32]	; (8004904 <UART_SetConfig+0x1b0>)
 80048e4:	fba2 2303 	umull	r2, r3, r2, r3
 80048e8:	095b      	lsrs	r3, r3, #5
 80048ea:	f003 020f 	and.w	r2, r3, #15
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	440a      	add	r2, r1
 80048f4:	609a      	str	r2, [r3, #8]
}
 80048f6:	bf00      	nop
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40013800 	.word	0x40013800
 8004904:	51eb851f 	.word	0x51eb851f

08004908 <__errno>:
 8004908:	4b01      	ldr	r3, [pc, #4]	; (8004910 <__errno+0x8>)
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	20000018 	.word	0x20000018

08004914 <__libc_init_array>:
 8004914:	b570      	push	{r4, r5, r6, lr}
 8004916:	2500      	movs	r5, #0
 8004918:	4e0c      	ldr	r6, [pc, #48]	; (800494c <__libc_init_array+0x38>)
 800491a:	4c0d      	ldr	r4, [pc, #52]	; (8004950 <__libc_init_array+0x3c>)
 800491c:	1ba4      	subs	r4, r4, r6
 800491e:	10a4      	asrs	r4, r4, #2
 8004920:	42a5      	cmp	r5, r4
 8004922:	d109      	bne.n	8004938 <__libc_init_array+0x24>
 8004924:	f002 f85e 	bl	80069e4 <_init>
 8004928:	2500      	movs	r5, #0
 800492a:	4e0a      	ldr	r6, [pc, #40]	; (8004954 <__libc_init_array+0x40>)
 800492c:	4c0a      	ldr	r4, [pc, #40]	; (8004958 <__libc_init_array+0x44>)
 800492e:	1ba4      	subs	r4, r4, r6
 8004930:	10a4      	asrs	r4, r4, #2
 8004932:	42a5      	cmp	r5, r4
 8004934:	d105      	bne.n	8004942 <__libc_init_array+0x2e>
 8004936:	bd70      	pop	{r4, r5, r6, pc}
 8004938:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800493c:	4798      	blx	r3
 800493e:	3501      	adds	r5, #1
 8004940:	e7ee      	b.n	8004920 <__libc_init_array+0xc>
 8004942:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004946:	4798      	blx	r3
 8004948:	3501      	adds	r5, #1
 800494a:	e7f2      	b.n	8004932 <__libc_init_array+0x1e>
 800494c:	08007400 	.word	0x08007400
 8004950:	08007400 	.word	0x08007400
 8004954:	08007400 	.word	0x08007400
 8004958:	08007404 	.word	0x08007404

0800495c <memset>:
 800495c:	4603      	mov	r3, r0
 800495e:	4402      	add	r2, r0
 8004960:	4293      	cmp	r3, r2
 8004962:	d100      	bne.n	8004966 <memset+0xa>
 8004964:	4770      	bx	lr
 8004966:	f803 1b01 	strb.w	r1, [r3], #1
 800496a:	e7f9      	b.n	8004960 <memset+0x4>

0800496c <__cvt>:
 800496c:	2b00      	cmp	r3, #0
 800496e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004972:	461e      	mov	r6, r3
 8004974:	bfbb      	ittet	lt
 8004976:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800497a:	461e      	movlt	r6, r3
 800497c:	2300      	movge	r3, #0
 800497e:	232d      	movlt	r3, #45	; 0x2d
 8004980:	b088      	sub	sp, #32
 8004982:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004984:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004988:	f027 0720 	bic.w	r7, r7, #32
 800498c:	2f46      	cmp	r7, #70	; 0x46
 800498e:	4614      	mov	r4, r2
 8004990:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004992:	700b      	strb	r3, [r1, #0]
 8004994:	d004      	beq.n	80049a0 <__cvt+0x34>
 8004996:	2f45      	cmp	r7, #69	; 0x45
 8004998:	d100      	bne.n	800499c <__cvt+0x30>
 800499a:	3501      	adds	r5, #1
 800499c:	2302      	movs	r3, #2
 800499e:	e000      	b.n	80049a2 <__cvt+0x36>
 80049a0:	2303      	movs	r3, #3
 80049a2:	aa07      	add	r2, sp, #28
 80049a4:	9204      	str	r2, [sp, #16]
 80049a6:	aa06      	add	r2, sp, #24
 80049a8:	e9cd a202 	strd	sl, r2, [sp, #8]
 80049ac:	e9cd 3500 	strd	r3, r5, [sp]
 80049b0:	4622      	mov	r2, r4
 80049b2:	4633      	mov	r3, r6
 80049b4:	f000 fcd8 	bl	8005368 <_dtoa_r>
 80049b8:	2f47      	cmp	r7, #71	; 0x47
 80049ba:	4680      	mov	r8, r0
 80049bc:	d102      	bne.n	80049c4 <__cvt+0x58>
 80049be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80049c0:	07db      	lsls	r3, r3, #31
 80049c2:	d526      	bpl.n	8004a12 <__cvt+0xa6>
 80049c4:	2f46      	cmp	r7, #70	; 0x46
 80049c6:	eb08 0905 	add.w	r9, r8, r5
 80049ca:	d111      	bne.n	80049f0 <__cvt+0x84>
 80049cc:	f898 3000 	ldrb.w	r3, [r8]
 80049d0:	2b30      	cmp	r3, #48	; 0x30
 80049d2:	d10a      	bne.n	80049ea <__cvt+0x7e>
 80049d4:	2200      	movs	r2, #0
 80049d6:	2300      	movs	r3, #0
 80049d8:	4620      	mov	r0, r4
 80049da:	4631      	mov	r1, r6
 80049dc:	f7fb ffe4 	bl	80009a8 <__aeabi_dcmpeq>
 80049e0:	b918      	cbnz	r0, 80049ea <__cvt+0x7e>
 80049e2:	f1c5 0501 	rsb	r5, r5, #1
 80049e6:	f8ca 5000 	str.w	r5, [sl]
 80049ea:	f8da 3000 	ldr.w	r3, [sl]
 80049ee:	4499      	add	r9, r3
 80049f0:	2200      	movs	r2, #0
 80049f2:	2300      	movs	r3, #0
 80049f4:	4620      	mov	r0, r4
 80049f6:	4631      	mov	r1, r6
 80049f8:	f7fb ffd6 	bl	80009a8 <__aeabi_dcmpeq>
 80049fc:	b938      	cbnz	r0, 8004a0e <__cvt+0xa2>
 80049fe:	2230      	movs	r2, #48	; 0x30
 8004a00:	9b07      	ldr	r3, [sp, #28]
 8004a02:	454b      	cmp	r3, r9
 8004a04:	d205      	bcs.n	8004a12 <__cvt+0xa6>
 8004a06:	1c59      	adds	r1, r3, #1
 8004a08:	9107      	str	r1, [sp, #28]
 8004a0a:	701a      	strb	r2, [r3, #0]
 8004a0c:	e7f8      	b.n	8004a00 <__cvt+0x94>
 8004a0e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a12:	4640      	mov	r0, r8
 8004a14:	9b07      	ldr	r3, [sp, #28]
 8004a16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004a18:	eba3 0308 	sub.w	r3, r3, r8
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	b008      	add	sp, #32
 8004a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004a24 <__exponent>:
 8004a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a26:	2900      	cmp	r1, #0
 8004a28:	bfb4      	ite	lt
 8004a2a:	232d      	movlt	r3, #45	; 0x2d
 8004a2c:	232b      	movge	r3, #43	; 0x2b
 8004a2e:	4604      	mov	r4, r0
 8004a30:	bfb8      	it	lt
 8004a32:	4249      	neglt	r1, r1
 8004a34:	2909      	cmp	r1, #9
 8004a36:	f804 2b02 	strb.w	r2, [r4], #2
 8004a3a:	7043      	strb	r3, [r0, #1]
 8004a3c:	dd21      	ble.n	8004a82 <__exponent+0x5e>
 8004a3e:	f10d 0307 	add.w	r3, sp, #7
 8004a42:	461f      	mov	r7, r3
 8004a44:	260a      	movs	r6, #10
 8004a46:	fb91 f5f6 	sdiv	r5, r1, r6
 8004a4a:	fb06 1115 	mls	r1, r6, r5, r1
 8004a4e:	2d09      	cmp	r5, #9
 8004a50:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004a54:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a58:	f103 32ff 	add.w	r2, r3, #4294967295
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	dc09      	bgt.n	8004a74 <__exponent+0x50>
 8004a60:	3130      	adds	r1, #48	; 0x30
 8004a62:	3b02      	subs	r3, #2
 8004a64:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004a68:	42bb      	cmp	r3, r7
 8004a6a:	4622      	mov	r2, r4
 8004a6c:	d304      	bcc.n	8004a78 <__exponent+0x54>
 8004a6e:	1a10      	subs	r0, r2, r0
 8004a70:	b003      	add	sp, #12
 8004a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a74:	4613      	mov	r3, r2
 8004a76:	e7e6      	b.n	8004a46 <__exponent+0x22>
 8004a78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a7c:	f804 2b01 	strb.w	r2, [r4], #1
 8004a80:	e7f2      	b.n	8004a68 <__exponent+0x44>
 8004a82:	2330      	movs	r3, #48	; 0x30
 8004a84:	4419      	add	r1, r3
 8004a86:	7083      	strb	r3, [r0, #2]
 8004a88:	1d02      	adds	r2, r0, #4
 8004a8a:	70c1      	strb	r1, [r0, #3]
 8004a8c:	e7ef      	b.n	8004a6e <__exponent+0x4a>
	...

08004a90 <_printf_float>:
 8004a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a94:	b091      	sub	sp, #68	; 0x44
 8004a96:	460c      	mov	r4, r1
 8004a98:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004a9a:	4693      	mov	fp, r2
 8004a9c:	461e      	mov	r6, r3
 8004a9e:	4605      	mov	r5, r0
 8004aa0:	f001 fa16 	bl	8005ed0 <_localeconv_r>
 8004aa4:	6803      	ldr	r3, [r0, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8004aaa:	f7fb fb51 	bl	8000150 <strlen>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	930e      	str	r3, [sp, #56]	; 0x38
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	900a      	str	r0, [sp, #40]	; 0x28
 8004ab6:	3307      	adds	r3, #7
 8004ab8:	f023 0307 	bic.w	r3, r3, #7
 8004abc:	f103 0208 	add.w	r2, r3, #8
 8004ac0:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004ac4:	f8d4 a000 	ldr.w	sl, [r4]
 8004ac8:	603a      	str	r2, [r7, #0]
 8004aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ace:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ad2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004ad6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ada:	930b      	str	r3, [sp, #44]	; 0x2c
 8004adc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae0:	4ba6      	ldr	r3, [pc, #664]	; (8004d7c <_printf_float+0x2ec>)
 8004ae2:	4638      	mov	r0, r7
 8004ae4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ae6:	f7fb ff91 	bl	8000a0c <__aeabi_dcmpun>
 8004aea:	bb68      	cbnz	r0, 8004b48 <_printf_float+0xb8>
 8004aec:	f04f 32ff 	mov.w	r2, #4294967295
 8004af0:	4ba2      	ldr	r3, [pc, #648]	; (8004d7c <_printf_float+0x2ec>)
 8004af2:	4638      	mov	r0, r7
 8004af4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004af6:	f7fb ff6b 	bl	80009d0 <__aeabi_dcmple>
 8004afa:	bb28      	cbnz	r0, 8004b48 <_printf_float+0xb8>
 8004afc:	2200      	movs	r2, #0
 8004afe:	2300      	movs	r3, #0
 8004b00:	4638      	mov	r0, r7
 8004b02:	4649      	mov	r1, r9
 8004b04:	f7fb ff5a 	bl	80009bc <__aeabi_dcmplt>
 8004b08:	b110      	cbz	r0, 8004b10 <_printf_float+0x80>
 8004b0a:	232d      	movs	r3, #45	; 0x2d
 8004b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b10:	4f9b      	ldr	r7, [pc, #620]	; (8004d80 <_printf_float+0x2f0>)
 8004b12:	4b9c      	ldr	r3, [pc, #624]	; (8004d84 <_printf_float+0x2f4>)
 8004b14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b18:	bf98      	it	ls
 8004b1a:	461f      	movls	r7, r3
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	f04f 0900 	mov.w	r9, #0
 8004b22:	6123      	str	r3, [r4, #16]
 8004b24:	f02a 0304 	bic.w	r3, sl, #4
 8004b28:	6023      	str	r3, [r4, #0]
 8004b2a:	9600      	str	r6, [sp, #0]
 8004b2c:	465b      	mov	r3, fp
 8004b2e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004b30:	4621      	mov	r1, r4
 8004b32:	4628      	mov	r0, r5
 8004b34:	f000 f9e2 	bl	8004efc <_printf_common>
 8004b38:	3001      	adds	r0, #1
 8004b3a:	f040 8090 	bne.w	8004c5e <_printf_float+0x1ce>
 8004b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b42:	b011      	add	sp, #68	; 0x44
 8004b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b48:	463a      	mov	r2, r7
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	4638      	mov	r0, r7
 8004b4e:	4649      	mov	r1, r9
 8004b50:	f7fb ff5c 	bl	8000a0c <__aeabi_dcmpun>
 8004b54:	b110      	cbz	r0, 8004b5c <_printf_float+0xcc>
 8004b56:	4f8c      	ldr	r7, [pc, #560]	; (8004d88 <_printf_float+0x2f8>)
 8004b58:	4b8c      	ldr	r3, [pc, #560]	; (8004d8c <_printf_float+0x2fc>)
 8004b5a:	e7db      	b.n	8004b14 <_printf_float+0x84>
 8004b5c:	6863      	ldr	r3, [r4, #4]
 8004b5e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004b62:	1c59      	adds	r1, r3, #1
 8004b64:	a80d      	add	r0, sp, #52	; 0x34
 8004b66:	a90e      	add	r1, sp, #56	; 0x38
 8004b68:	d140      	bne.n	8004bec <_printf_float+0x15c>
 8004b6a:	2306      	movs	r3, #6
 8004b6c:	6063      	str	r3, [r4, #4]
 8004b6e:	f04f 0c00 	mov.w	ip, #0
 8004b72:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004b76:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004b7a:	6863      	ldr	r3, [r4, #4]
 8004b7c:	6022      	str	r2, [r4, #0]
 8004b7e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	463a      	mov	r2, r7
 8004b86:	464b      	mov	r3, r9
 8004b88:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	f7ff feed 	bl	800496c <__cvt>
 8004b92:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004b96:	2b47      	cmp	r3, #71	; 0x47
 8004b98:	4607      	mov	r7, r0
 8004b9a:	d109      	bne.n	8004bb0 <_printf_float+0x120>
 8004b9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b9e:	1cd8      	adds	r0, r3, #3
 8004ba0:	db02      	blt.n	8004ba8 <_printf_float+0x118>
 8004ba2:	6862      	ldr	r2, [r4, #4]
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	dd47      	ble.n	8004c38 <_printf_float+0x1a8>
 8004ba8:	f1a8 0802 	sub.w	r8, r8, #2
 8004bac:	fa5f f888 	uxtb.w	r8, r8
 8004bb0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004bb4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004bb6:	d824      	bhi.n	8004c02 <_printf_float+0x172>
 8004bb8:	3901      	subs	r1, #1
 8004bba:	4642      	mov	r2, r8
 8004bbc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004bc0:	910d      	str	r1, [sp, #52]	; 0x34
 8004bc2:	f7ff ff2f 	bl	8004a24 <__exponent>
 8004bc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bc8:	4681      	mov	r9, r0
 8004bca:	1813      	adds	r3, r2, r0
 8004bcc:	2a01      	cmp	r2, #1
 8004bce:	6123      	str	r3, [r4, #16]
 8004bd0:	dc02      	bgt.n	8004bd8 <_printf_float+0x148>
 8004bd2:	6822      	ldr	r2, [r4, #0]
 8004bd4:	07d1      	lsls	r1, r2, #31
 8004bd6:	d501      	bpl.n	8004bdc <_printf_float+0x14c>
 8004bd8:	3301      	adds	r3, #1
 8004bda:	6123      	str	r3, [r4, #16]
 8004bdc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0a2      	beq.n	8004b2a <_printf_float+0x9a>
 8004be4:	232d      	movs	r3, #45	; 0x2d
 8004be6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bea:	e79e      	b.n	8004b2a <_printf_float+0x9a>
 8004bec:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004bf0:	f000 816e 	beq.w	8004ed0 <_printf_float+0x440>
 8004bf4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004bf8:	d1b9      	bne.n	8004b6e <_printf_float+0xde>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1b7      	bne.n	8004b6e <_printf_float+0xde>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e7b4      	b.n	8004b6c <_printf_float+0xdc>
 8004c02:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004c06:	d119      	bne.n	8004c3c <_printf_float+0x1ac>
 8004c08:	2900      	cmp	r1, #0
 8004c0a:	6863      	ldr	r3, [r4, #4]
 8004c0c:	dd0c      	ble.n	8004c28 <_printf_float+0x198>
 8004c0e:	6121      	str	r1, [r4, #16]
 8004c10:	b913      	cbnz	r3, 8004c18 <_printf_float+0x188>
 8004c12:	6822      	ldr	r2, [r4, #0]
 8004c14:	07d2      	lsls	r2, r2, #31
 8004c16:	d502      	bpl.n	8004c1e <_printf_float+0x18e>
 8004c18:	3301      	adds	r3, #1
 8004c1a:	440b      	add	r3, r1
 8004c1c:	6123      	str	r3, [r4, #16]
 8004c1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c20:	f04f 0900 	mov.w	r9, #0
 8004c24:	65a3      	str	r3, [r4, #88]	; 0x58
 8004c26:	e7d9      	b.n	8004bdc <_printf_float+0x14c>
 8004c28:	b913      	cbnz	r3, 8004c30 <_printf_float+0x1a0>
 8004c2a:	6822      	ldr	r2, [r4, #0]
 8004c2c:	07d0      	lsls	r0, r2, #31
 8004c2e:	d501      	bpl.n	8004c34 <_printf_float+0x1a4>
 8004c30:	3302      	adds	r3, #2
 8004c32:	e7f3      	b.n	8004c1c <_printf_float+0x18c>
 8004c34:	2301      	movs	r3, #1
 8004c36:	e7f1      	b.n	8004c1c <_printf_float+0x18c>
 8004c38:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004c3c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004c40:	4293      	cmp	r3, r2
 8004c42:	db05      	blt.n	8004c50 <_printf_float+0x1c0>
 8004c44:	6822      	ldr	r2, [r4, #0]
 8004c46:	6123      	str	r3, [r4, #16]
 8004c48:	07d1      	lsls	r1, r2, #31
 8004c4a:	d5e8      	bpl.n	8004c1e <_printf_float+0x18e>
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	e7e5      	b.n	8004c1c <_printf_float+0x18c>
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	bfcc      	ite	gt
 8004c54:	2301      	movgt	r3, #1
 8004c56:	f1c3 0302 	rsble	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	e7de      	b.n	8004c1c <_printf_float+0x18c>
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	055a      	lsls	r2, r3, #21
 8004c62:	d407      	bmi.n	8004c74 <_printf_float+0x1e4>
 8004c64:	6923      	ldr	r3, [r4, #16]
 8004c66:	463a      	mov	r2, r7
 8004c68:	4659      	mov	r1, fp
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	47b0      	blx	r6
 8004c6e:	3001      	adds	r0, #1
 8004c70:	d129      	bne.n	8004cc6 <_printf_float+0x236>
 8004c72:	e764      	b.n	8004b3e <_printf_float+0xae>
 8004c74:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004c78:	f240 80d7 	bls.w	8004e2a <_printf_float+0x39a>
 8004c7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c80:	2200      	movs	r2, #0
 8004c82:	2300      	movs	r3, #0
 8004c84:	f7fb fe90 	bl	80009a8 <__aeabi_dcmpeq>
 8004c88:	b388      	cbz	r0, 8004cee <_printf_float+0x25e>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	4a40      	ldr	r2, [pc, #256]	; (8004d90 <_printf_float+0x300>)
 8004c8e:	4659      	mov	r1, fp
 8004c90:	4628      	mov	r0, r5
 8004c92:	47b0      	blx	r6
 8004c94:	3001      	adds	r0, #1
 8004c96:	f43f af52 	beq.w	8004b3e <_printf_float+0xae>
 8004c9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	db02      	blt.n	8004ca8 <_printf_float+0x218>
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	07d8      	lsls	r0, r3, #31
 8004ca6:	d50e      	bpl.n	8004cc6 <_printf_float+0x236>
 8004ca8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cac:	4659      	mov	r1, fp
 8004cae:	4628      	mov	r0, r5
 8004cb0:	47b0      	blx	r6
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	f43f af43 	beq.w	8004b3e <_printf_float+0xae>
 8004cb8:	2700      	movs	r7, #0
 8004cba:	f104 081a 	add.w	r8, r4, #26
 8004cbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	42bb      	cmp	r3, r7
 8004cc4:	dc09      	bgt.n	8004cda <_printf_float+0x24a>
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	079f      	lsls	r7, r3, #30
 8004cca:	f100 80fd 	bmi.w	8004ec8 <_printf_float+0x438>
 8004cce:	68e0      	ldr	r0, [r4, #12]
 8004cd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004cd2:	4298      	cmp	r0, r3
 8004cd4:	bfb8      	it	lt
 8004cd6:	4618      	movlt	r0, r3
 8004cd8:	e733      	b.n	8004b42 <_printf_float+0xb2>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	4642      	mov	r2, r8
 8004cde:	4659      	mov	r1, fp
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	47b0      	blx	r6
 8004ce4:	3001      	adds	r0, #1
 8004ce6:	f43f af2a 	beq.w	8004b3e <_printf_float+0xae>
 8004cea:	3701      	adds	r7, #1
 8004cec:	e7e7      	b.n	8004cbe <_printf_float+0x22e>
 8004cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	dc2b      	bgt.n	8004d4c <_printf_float+0x2bc>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	4a26      	ldr	r2, [pc, #152]	; (8004d90 <_printf_float+0x300>)
 8004cf8:	4659      	mov	r1, fp
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	47b0      	blx	r6
 8004cfe:	3001      	adds	r0, #1
 8004d00:	f43f af1d 	beq.w	8004b3e <_printf_float+0xae>
 8004d04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d06:	b923      	cbnz	r3, 8004d12 <_printf_float+0x282>
 8004d08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d0a:	b913      	cbnz	r3, 8004d12 <_printf_float+0x282>
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	07d9      	lsls	r1, r3, #31
 8004d10:	d5d9      	bpl.n	8004cc6 <_printf_float+0x236>
 8004d12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d16:	4659      	mov	r1, fp
 8004d18:	4628      	mov	r0, r5
 8004d1a:	47b0      	blx	r6
 8004d1c:	3001      	adds	r0, #1
 8004d1e:	f43f af0e 	beq.w	8004b3e <_printf_float+0xae>
 8004d22:	f04f 0800 	mov.w	r8, #0
 8004d26:	f104 091a 	add.w	r9, r4, #26
 8004d2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d2c:	425b      	negs	r3, r3
 8004d2e:	4543      	cmp	r3, r8
 8004d30:	dc01      	bgt.n	8004d36 <_printf_float+0x2a6>
 8004d32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d34:	e797      	b.n	8004c66 <_printf_float+0x1d6>
 8004d36:	2301      	movs	r3, #1
 8004d38:	464a      	mov	r2, r9
 8004d3a:	4659      	mov	r1, fp
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	47b0      	blx	r6
 8004d40:	3001      	adds	r0, #1
 8004d42:	f43f aefc 	beq.w	8004b3e <_printf_float+0xae>
 8004d46:	f108 0801 	add.w	r8, r8, #1
 8004d4a:	e7ee      	b.n	8004d2a <_printf_float+0x29a>
 8004d4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d50:	429a      	cmp	r2, r3
 8004d52:	bfa8      	it	ge
 8004d54:	461a      	movge	r2, r3
 8004d56:	2a00      	cmp	r2, #0
 8004d58:	4690      	mov	r8, r2
 8004d5a:	dd07      	ble.n	8004d6c <_printf_float+0x2dc>
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	4659      	mov	r1, fp
 8004d60:	463a      	mov	r2, r7
 8004d62:	4628      	mov	r0, r5
 8004d64:	47b0      	blx	r6
 8004d66:	3001      	adds	r0, #1
 8004d68:	f43f aee9 	beq.w	8004b3e <_printf_float+0xae>
 8004d6c:	f104 031a 	add.w	r3, r4, #26
 8004d70:	f04f 0a00 	mov.w	sl, #0
 8004d74:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004d78:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d7a:	e015      	b.n	8004da8 <_printf_float+0x318>
 8004d7c:	7fefffff 	.word	0x7fefffff
 8004d80:	08007144 	.word	0x08007144
 8004d84:	08007140 	.word	0x08007140
 8004d88:	0800714c 	.word	0x0800714c
 8004d8c:	08007148 	.word	0x08007148
 8004d90:	08007150 	.word	0x08007150
 8004d94:	2301      	movs	r3, #1
 8004d96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d98:	4659      	mov	r1, fp
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	47b0      	blx	r6
 8004d9e:	3001      	adds	r0, #1
 8004da0:	f43f aecd 	beq.w	8004b3e <_printf_float+0xae>
 8004da4:	f10a 0a01 	add.w	sl, sl, #1
 8004da8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004dac:	eba9 0308 	sub.w	r3, r9, r8
 8004db0:	4553      	cmp	r3, sl
 8004db2:	dcef      	bgt.n	8004d94 <_printf_float+0x304>
 8004db4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004db8:	429a      	cmp	r2, r3
 8004dba:	444f      	add	r7, r9
 8004dbc:	db14      	blt.n	8004de8 <_printf_float+0x358>
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	07da      	lsls	r2, r3, #31
 8004dc2:	d411      	bmi.n	8004de8 <_printf_float+0x358>
 8004dc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dc6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004dc8:	eba3 0209 	sub.w	r2, r3, r9
 8004dcc:	eba3 0901 	sub.w	r9, r3, r1
 8004dd0:	4591      	cmp	r9, r2
 8004dd2:	bfa8      	it	ge
 8004dd4:	4691      	movge	r9, r2
 8004dd6:	f1b9 0f00 	cmp.w	r9, #0
 8004dda:	dc0d      	bgt.n	8004df8 <_printf_float+0x368>
 8004ddc:	2700      	movs	r7, #0
 8004dde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004de2:	f104 081a 	add.w	r8, r4, #26
 8004de6:	e018      	b.n	8004e1a <_printf_float+0x38a>
 8004de8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dec:	4659      	mov	r1, fp
 8004dee:	4628      	mov	r0, r5
 8004df0:	47b0      	blx	r6
 8004df2:	3001      	adds	r0, #1
 8004df4:	d1e6      	bne.n	8004dc4 <_printf_float+0x334>
 8004df6:	e6a2      	b.n	8004b3e <_printf_float+0xae>
 8004df8:	464b      	mov	r3, r9
 8004dfa:	463a      	mov	r2, r7
 8004dfc:	4659      	mov	r1, fp
 8004dfe:	4628      	mov	r0, r5
 8004e00:	47b0      	blx	r6
 8004e02:	3001      	adds	r0, #1
 8004e04:	d1ea      	bne.n	8004ddc <_printf_float+0x34c>
 8004e06:	e69a      	b.n	8004b3e <_printf_float+0xae>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	4642      	mov	r2, r8
 8004e0c:	4659      	mov	r1, fp
 8004e0e:	4628      	mov	r0, r5
 8004e10:	47b0      	blx	r6
 8004e12:	3001      	adds	r0, #1
 8004e14:	f43f ae93 	beq.w	8004b3e <_printf_float+0xae>
 8004e18:	3701      	adds	r7, #1
 8004e1a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e1e:	1a9b      	subs	r3, r3, r2
 8004e20:	eba3 0309 	sub.w	r3, r3, r9
 8004e24:	42bb      	cmp	r3, r7
 8004e26:	dcef      	bgt.n	8004e08 <_printf_float+0x378>
 8004e28:	e74d      	b.n	8004cc6 <_printf_float+0x236>
 8004e2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e2c:	2a01      	cmp	r2, #1
 8004e2e:	dc01      	bgt.n	8004e34 <_printf_float+0x3a4>
 8004e30:	07db      	lsls	r3, r3, #31
 8004e32:	d538      	bpl.n	8004ea6 <_printf_float+0x416>
 8004e34:	2301      	movs	r3, #1
 8004e36:	463a      	mov	r2, r7
 8004e38:	4659      	mov	r1, fp
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	47b0      	blx	r6
 8004e3e:	3001      	adds	r0, #1
 8004e40:	f43f ae7d 	beq.w	8004b3e <_printf_float+0xae>
 8004e44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e48:	4659      	mov	r1, fp
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	47b0      	blx	r6
 8004e4e:	3001      	adds	r0, #1
 8004e50:	f107 0701 	add.w	r7, r7, #1
 8004e54:	f43f ae73 	beq.w	8004b3e <_printf_float+0xae>
 8004e58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f103 38ff 	add.w	r8, r3, #4294967295
 8004e64:	2300      	movs	r3, #0
 8004e66:	f7fb fd9f 	bl	80009a8 <__aeabi_dcmpeq>
 8004e6a:	b9c0      	cbnz	r0, 8004e9e <_printf_float+0x40e>
 8004e6c:	4643      	mov	r3, r8
 8004e6e:	463a      	mov	r2, r7
 8004e70:	4659      	mov	r1, fp
 8004e72:	4628      	mov	r0, r5
 8004e74:	47b0      	blx	r6
 8004e76:	3001      	adds	r0, #1
 8004e78:	d10d      	bne.n	8004e96 <_printf_float+0x406>
 8004e7a:	e660      	b.n	8004b3e <_printf_float+0xae>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	4642      	mov	r2, r8
 8004e80:	4659      	mov	r1, fp
 8004e82:	4628      	mov	r0, r5
 8004e84:	47b0      	blx	r6
 8004e86:	3001      	adds	r0, #1
 8004e88:	f43f ae59 	beq.w	8004b3e <_printf_float+0xae>
 8004e8c:	3701      	adds	r7, #1
 8004e8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e90:	3b01      	subs	r3, #1
 8004e92:	42bb      	cmp	r3, r7
 8004e94:	dcf2      	bgt.n	8004e7c <_printf_float+0x3ec>
 8004e96:	464b      	mov	r3, r9
 8004e98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e9c:	e6e4      	b.n	8004c68 <_printf_float+0x1d8>
 8004e9e:	2700      	movs	r7, #0
 8004ea0:	f104 081a 	add.w	r8, r4, #26
 8004ea4:	e7f3      	b.n	8004e8e <_printf_float+0x3fe>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e7e1      	b.n	8004e6e <_printf_float+0x3de>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	4642      	mov	r2, r8
 8004eae:	4659      	mov	r1, fp
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	47b0      	blx	r6
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	f43f ae42 	beq.w	8004b3e <_printf_float+0xae>
 8004eba:	3701      	adds	r7, #1
 8004ebc:	68e3      	ldr	r3, [r4, #12]
 8004ebe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ec0:	1a9b      	subs	r3, r3, r2
 8004ec2:	42bb      	cmp	r3, r7
 8004ec4:	dcf1      	bgt.n	8004eaa <_printf_float+0x41a>
 8004ec6:	e702      	b.n	8004cce <_printf_float+0x23e>
 8004ec8:	2700      	movs	r7, #0
 8004eca:	f104 0819 	add.w	r8, r4, #25
 8004ece:	e7f5      	b.n	8004ebc <_printf_float+0x42c>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f43f ae94 	beq.w	8004bfe <_printf_float+0x16e>
 8004ed6:	f04f 0c00 	mov.w	ip, #0
 8004eda:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004ede:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004ee2:	6022      	str	r2, [r4, #0]
 8004ee4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004ee8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	463a      	mov	r2, r7
 8004ef0:	464b      	mov	r3, r9
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	f7ff fd3a 	bl	800496c <__cvt>
 8004ef8:	4607      	mov	r7, r0
 8004efa:	e64f      	b.n	8004b9c <_printf_float+0x10c>

08004efc <_printf_common>:
 8004efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f00:	4691      	mov	r9, r2
 8004f02:	461f      	mov	r7, r3
 8004f04:	688a      	ldr	r2, [r1, #8]
 8004f06:	690b      	ldr	r3, [r1, #16]
 8004f08:	4606      	mov	r6, r0
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	bfb8      	it	lt
 8004f0e:	4613      	movlt	r3, r2
 8004f10:	f8c9 3000 	str.w	r3, [r9]
 8004f14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f18:	460c      	mov	r4, r1
 8004f1a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f1e:	b112      	cbz	r2, 8004f26 <_printf_common+0x2a>
 8004f20:	3301      	adds	r3, #1
 8004f22:	f8c9 3000 	str.w	r3, [r9]
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	0699      	lsls	r1, r3, #26
 8004f2a:	bf42      	ittt	mi
 8004f2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004f30:	3302      	addmi	r3, #2
 8004f32:	f8c9 3000 	strmi.w	r3, [r9]
 8004f36:	6825      	ldr	r5, [r4, #0]
 8004f38:	f015 0506 	ands.w	r5, r5, #6
 8004f3c:	d107      	bne.n	8004f4e <_printf_common+0x52>
 8004f3e:	f104 0a19 	add.w	sl, r4, #25
 8004f42:	68e3      	ldr	r3, [r4, #12]
 8004f44:	f8d9 2000 	ldr.w	r2, [r9]
 8004f48:	1a9b      	subs	r3, r3, r2
 8004f4a:	42ab      	cmp	r3, r5
 8004f4c:	dc29      	bgt.n	8004fa2 <_printf_common+0xa6>
 8004f4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004f52:	6822      	ldr	r2, [r4, #0]
 8004f54:	3300      	adds	r3, #0
 8004f56:	bf18      	it	ne
 8004f58:	2301      	movne	r3, #1
 8004f5a:	0692      	lsls	r2, r2, #26
 8004f5c:	d42e      	bmi.n	8004fbc <_printf_common+0xc0>
 8004f5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f62:	4639      	mov	r1, r7
 8004f64:	4630      	mov	r0, r6
 8004f66:	47c0      	blx	r8
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d021      	beq.n	8004fb0 <_printf_common+0xb4>
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	68e5      	ldr	r5, [r4, #12]
 8004f70:	f003 0306 	and.w	r3, r3, #6
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	bf18      	it	ne
 8004f78:	2500      	movne	r5, #0
 8004f7a:	f8d9 2000 	ldr.w	r2, [r9]
 8004f7e:	f04f 0900 	mov.w	r9, #0
 8004f82:	bf08      	it	eq
 8004f84:	1aad      	subeq	r5, r5, r2
 8004f86:	68a3      	ldr	r3, [r4, #8]
 8004f88:	6922      	ldr	r2, [r4, #16]
 8004f8a:	bf08      	it	eq
 8004f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f90:	4293      	cmp	r3, r2
 8004f92:	bfc4      	itt	gt
 8004f94:	1a9b      	subgt	r3, r3, r2
 8004f96:	18ed      	addgt	r5, r5, r3
 8004f98:	341a      	adds	r4, #26
 8004f9a:	454d      	cmp	r5, r9
 8004f9c:	d11a      	bne.n	8004fd4 <_printf_common+0xd8>
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	e008      	b.n	8004fb4 <_printf_common+0xb8>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	4652      	mov	r2, sl
 8004fa6:	4639      	mov	r1, r7
 8004fa8:	4630      	mov	r0, r6
 8004faa:	47c0      	blx	r8
 8004fac:	3001      	adds	r0, #1
 8004fae:	d103      	bne.n	8004fb8 <_printf_common+0xbc>
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb8:	3501      	adds	r5, #1
 8004fba:	e7c2      	b.n	8004f42 <_printf_common+0x46>
 8004fbc:	2030      	movs	r0, #48	; 0x30
 8004fbe:	18e1      	adds	r1, r4, r3
 8004fc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fca:	4422      	add	r2, r4
 8004fcc:	3302      	adds	r3, #2
 8004fce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fd2:	e7c4      	b.n	8004f5e <_printf_common+0x62>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	4622      	mov	r2, r4
 8004fd8:	4639      	mov	r1, r7
 8004fda:	4630      	mov	r0, r6
 8004fdc:	47c0      	blx	r8
 8004fde:	3001      	adds	r0, #1
 8004fe0:	d0e6      	beq.n	8004fb0 <_printf_common+0xb4>
 8004fe2:	f109 0901 	add.w	r9, r9, #1
 8004fe6:	e7d8      	b.n	8004f9a <_printf_common+0x9e>

08004fe8 <_printf_i>:
 8004fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	7e09      	ldrb	r1, [r1, #24]
 8004ff4:	b085      	sub	sp, #20
 8004ff6:	296e      	cmp	r1, #110	; 0x6e
 8004ff8:	4617      	mov	r7, r2
 8004ffa:	4606      	mov	r6, r0
 8004ffc:	4698      	mov	r8, r3
 8004ffe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005000:	f000 80b3 	beq.w	800516a <_printf_i+0x182>
 8005004:	d822      	bhi.n	800504c <_printf_i+0x64>
 8005006:	2963      	cmp	r1, #99	; 0x63
 8005008:	d036      	beq.n	8005078 <_printf_i+0x90>
 800500a:	d80a      	bhi.n	8005022 <_printf_i+0x3a>
 800500c:	2900      	cmp	r1, #0
 800500e:	f000 80b9 	beq.w	8005184 <_printf_i+0x19c>
 8005012:	2958      	cmp	r1, #88	; 0x58
 8005014:	f000 8083 	beq.w	800511e <_printf_i+0x136>
 8005018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800501c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005020:	e032      	b.n	8005088 <_printf_i+0xa0>
 8005022:	2964      	cmp	r1, #100	; 0x64
 8005024:	d001      	beq.n	800502a <_printf_i+0x42>
 8005026:	2969      	cmp	r1, #105	; 0x69
 8005028:	d1f6      	bne.n	8005018 <_printf_i+0x30>
 800502a:	6820      	ldr	r0, [r4, #0]
 800502c:	6813      	ldr	r3, [r2, #0]
 800502e:	0605      	lsls	r5, r0, #24
 8005030:	f103 0104 	add.w	r1, r3, #4
 8005034:	d52a      	bpl.n	800508c <_printf_i+0xa4>
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6011      	str	r1, [r2, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	da03      	bge.n	8005046 <_printf_i+0x5e>
 800503e:	222d      	movs	r2, #45	; 0x2d
 8005040:	425b      	negs	r3, r3
 8005042:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005046:	486f      	ldr	r0, [pc, #444]	; (8005204 <_printf_i+0x21c>)
 8005048:	220a      	movs	r2, #10
 800504a:	e039      	b.n	80050c0 <_printf_i+0xd8>
 800504c:	2973      	cmp	r1, #115	; 0x73
 800504e:	f000 809d 	beq.w	800518c <_printf_i+0x1a4>
 8005052:	d808      	bhi.n	8005066 <_printf_i+0x7e>
 8005054:	296f      	cmp	r1, #111	; 0x6f
 8005056:	d020      	beq.n	800509a <_printf_i+0xb2>
 8005058:	2970      	cmp	r1, #112	; 0x70
 800505a:	d1dd      	bne.n	8005018 <_printf_i+0x30>
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	f043 0320 	orr.w	r3, r3, #32
 8005062:	6023      	str	r3, [r4, #0]
 8005064:	e003      	b.n	800506e <_printf_i+0x86>
 8005066:	2975      	cmp	r1, #117	; 0x75
 8005068:	d017      	beq.n	800509a <_printf_i+0xb2>
 800506a:	2978      	cmp	r1, #120	; 0x78
 800506c:	d1d4      	bne.n	8005018 <_printf_i+0x30>
 800506e:	2378      	movs	r3, #120	; 0x78
 8005070:	4865      	ldr	r0, [pc, #404]	; (8005208 <_printf_i+0x220>)
 8005072:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005076:	e055      	b.n	8005124 <_printf_i+0x13c>
 8005078:	6813      	ldr	r3, [r2, #0]
 800507a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800507e:	1d19      	adds	r1, r3, #4
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6011      	str	r1, [r2, #0]
 8005084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005088:	2301      	movs	r3, #1
 800508a:	e08c      	b.n	80051a6 <_printf_i+0x1be>
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005092:	6011      	str	r1, [r2, #0]
 8005094:	bf18      	it	ne
 8005096:	b21b      	sxthne	r3, r3
 8005098:	e7cf      	b.n	800503a <_printf_i+0x52>
 800509a:	6813      	ldr	r3, [r2, #0]
 800509c:	6825      	ldr	r5, [r4, #0]
 800509e:	1d18      	adds	r0, r3, #4
 80050a0:	6010      	str	r0, [r2, #0]
 80050a2:	0628      	lsls	r0, r5, #24
 80050a4:	d501      	bpl.n	80050aa <_printf_i+0xc2>
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	e002      	b.n	80050b0 <_printf_i+0xc8>
 80050aa:	0668      	lsls	r0, r5, #25
 80050ac:	d5fb      	bpl.n	80050a6 <_printf_i+0xbe>
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	296f      	cmp	r1, #111	; 0x6f
 80050b2:	bf14      	ite	ne
 80050b4:	220a      	movne	r2, #10
 80050b6:	2208      	moveq	r2, #8
 80050b8:	4852      	ldr	r0, [pc, #328]	; (8005204 <_printf_i+0x21c>)
 80050ba:	2100      	movs	r1, #0
 80050bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050c0:	6865      	ldr	r5, [r4, #4]
 80050c2:	2d00      	cmp	r5, #0
 80050c4:	60a5      	str	r5, [r4, #8]
 80050c6:	f2c0 8095 	blt.w	80051f4 <_printf_i+0x20c>
 80050ca:	6821      	ldr	r1, [r4, #0]
 80050cc:	f021 0104 	bic.w	r1, r1, #4
 80050d0:	6021      	str	r1, [r4, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d13d      	bne.n	8005152 <_printf_i+0x16a>
 80050d6:	2d00      	cmp	r5, #0
 80050d8:	f040 808e 	bne.w	80051f8 <_printf_i+0x210>
 80050dc:	4665      	mov	r5, ip
 80050de:	2a08      	cmp	r2, #8
 80050e0:	d10b      	bne.n	80050fa <_printf_i+0x112>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	07db      	lsls	r3, r3, #31
 80050e6:	d508      	bpl.n	80050fa <_printf_i+0x112>
 80050e8:	6923      	ldr	r3, [r4, #16]
 80050ea:	6862      	ldr	r2, [r4, #4]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	bfde      	ittt	le
 80050f0:	2330      	movle	r3, #48	; 0x30
 80050f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050fa:	ebac 0305 	sub.w	r3, ip, r5
 80050fe:	6123      	str	r3, [r4, #16]
 8005100:	f8cd 8000 	str.w	r8, [sp]
 8005104:	463b      	mov	r3, r7
 8005106:	aa03      	add	r2, sp, #12
 8005108:	4621      	mov	r1, r4
 800510a:	4630      	mov	r0, r6
 800510c:	f7ff fef6 	bl	8004efc <_printf_common>
 8005110:	3001      	adds	r0, #1
 8005112:	d14d      	bne.n	80051b0 <_printf_i+0x1c8>
 8005114:	f04f 30ff 	mov.w	r0, #4294967295
 8005118:	b005      	add	sp, #20
 800511a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800511e:	4839      	ldr	r0, [pc, #228]	; (8005204 <_printf_i+0x21c>)
 8005120:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005124:	6813      	ldr	r3, [r2, #0]
 8005126:	6821      	ldr	r1, [r4, #0]
 8005128:	1d1d      	adds	r5, r3, #4
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6015      	str	r5, [r2, #0]
 800512e:	060a      	lsls	r2, r1, #24
 8005130:	d50b      	bpl.n	800514a <_printf_i+0x162>
 8005132:	07ca      	lsls	r2, r1, #31
 8005134:	bf44      	itt	mi
 8005136:	f041 0120 	orrmi.w	r1, r1, #32
 800513a:	6021      	strmi	r1, [r4, #0]
 800513c:	b91b      	cbnz	r3, 8005146 <_printf_i+0x15e>
 800513e:	6822      	ldr	r2, [r4, #0]
 8005140:	f022 0220 	bic.w	r2, r2, #32
 8005144:	6022      	str	r2, [r4, #0]
 8005146:	2210      	movs	r2, #16
 8005148:	e7b7      	b.n	80050ba <_printf_i+0xd2>
 800514a:	064d      	lsls	r5, r1, #25
 800514c:	bf48      	it	mi
 800514e:	b29b      	uxthmi	r3, r3
 8005150:	e7ef      	b.n	8005132 <_printf_i+0x14a>
 8005152:	4665      	mov	r5, ip
 8005154:	fbb3 f1f2 	udiv	r1, r3, r2
 8005158:	fb02 3311 	mls	r3, r2, r1, r3
 800515c:	5cc3      	ldrb	r3, [r0, r3]
 800515e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005162:	460b      	mov	r3, r1
 8005164:	2900      	cmp	r1, #0
 8005166:	d1f5      	bne.n	8005154 <_printf_i+0x16c>
 8005168:	e7b9      	b.n	80050de <_printf_i+0xf6>
 800516a:	6813      	ldr	r3, [r2, #0]
 800516c:	6825      	ldr	r5, [r4, #0]
 800516e:	1d18      	adds	r0, r3, #4
 8005170:	6961      	ldr	r1, [r4, #20]
 8005172:	6010      	str	r0, [r2, #0]
 8005174:	0628      	lsls	r0, r5, #24
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	d501      	bpl.n	800517e <_printf_i+0x196>
 800517a:	6019      	str	r1, [r3, #0]
 800517c:	e002      	b.n	8005184 <_printf_i+0x19c>
 800517e:	066a      	lsls	r2, r5, #25
 8005180:	d5fb      	bpl.n	800517a <_printf_i+0x192>
 8005182:	8019      	strh	r1, [r3, #0]
 8005184:	2300      	movs	r3, #0
 8005186:	4665      	mov	r5, ip
 8005188:	6123      	str	r3, [r4, #16]
 800518a:	e7b9      	b.n	8005100 <_printf_i+0x118>
 800518c:	6813      	ldr	r3, [r2, #0]
 800518e:	1d19      	adds	r1, r3, #4
 8005190:	6011      	str	r1, [r2, #0]
 8005192:	681d      	ldr	r5, [r3, #0]
 8005194:	6862      	ldr	r2, [r4, #4]
 8005196:	2100      	movs	r1, #0
 8005198:	4628      	mov	r0, r5
 800519a:	f000 fec1 	bl	8005f20 <memchr>
 800519e:	b108      	cbz	r0, 80051a4 <_printf_i+0x1bc>
 80051a0:	1b40      	subs	r0, r0, r5
 80051a2:	6060      	str	r0, [r4, #4]
 80051a4:	6863      	ldr	r3, [r4, #4]
 80051a6:	6123      	str	r3, [r4, #16]
 80051a8:	2300      	movs	r3, #0
 80051aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ae:	e7a7      	b.n	8005100 <_printf_i+0x118>
 80051b0:	6923      	ldr	r3, [r4, #16]
 80051b2:	462a      	mov	r2, r5
 80051b4:	4639      	mov	r1, r7
 80051b6:	4630      	mov	r0, r6
 80051b8:	47c0      	blx	r8
 80051ba:	3001      	adds	r0, #1
 80051bc:	d0aa      	beq.n	8005114 <_printf_i+0x12c>
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	079b      	lsls	r3, r3, #30
 80051c2:	d413      	bmi.n	80051ec <_printf_i+0x204>
 80051c4:	68e0      	ldr	r0, [r4, #12]
 80051c6:	9b03      	ldr	r3, [sp, #12]
 80051c8:	4298      	cmp	r0, r3
 80051ca:	bfb8      	it	lt
 80051cc:	4618      	movlt	r0, r3
 80051ce:	e7a3      	b.n	8005118 <_printf_i+0x130>
 80051d0:	2301      	movs	r3, #1
 80051d2:	464a      	mov	r2, r9
 80051d4:	4639      	mov	r1, r7
 80051d6:	4630      	mov	r0, r6
 80051d8:	47c0      	blx	r8
 80051da:	3001      	adds	r0, #1
 80051dc:	d09a      	beq.n	8005114 <_printf_i+0x12c>
 80051de:	3501      	adds	r5, #1
 80051e0:	68e3      	ldr	r3, [r4, #12]
 80051e2:	9a03      	ldr	r2, [sp, #12]
 80051e4:	1a9b      	subs	r3, r3, r2
 80051e6:	42ab      	cmp	r3, r5
 80051e8:	dcf2      	bgt.n	80051d0 <_printf_i+0x1e8>
 80051ea:	e7eb      	b.n	80051c4 <_printf_i+0x1dc>
 80051ec:	2500      	movs	r5, #0
 80051ee:	f104 0919 	add.w	r9, r4, #25
 80051f2:	e7f5      	b.n	80051e0 <_printf_i+0x1f8>
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1ac      	bne.n	8005152 <_printf_i+0x16a>
 80051f8:	7803      	ldrb	r3, [r0, #0]
 80051fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005202:	e76c      	b.n	80050de <_printf_i+0xf6>
 8005204:	08007152 	.word	0x08007152
 8005208:	08007163 	.word	0x08007163

0800520c <siprintf>:
 800520c:	b40e      	push	{r1, r2, r3}
 800520e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005212:	b500      	push	{lr}
 8005214:	b09c      	sub	sp, #112	; 0x70
 8005216:	ab1d      	add	r3, sp, #116	; 0x74
 8005218:	9002      	str	r0, [sp, #8]
 800521a:	9006      	str	r0, [sp, #24]
 800521c:	9107      	str	r1, [sp, #28]
 800521e:	9104      	str	r1, [sp, #16]
 8005220:	4808      	ldr	r0, [pc, #32]	; (8005244 <siprintf+0x38>)
 8005222:	4909      	ldr	r1, [pc, #36]	; (8005248 <siprintf+0x3c>)
 8005224:	f853 2b04 	ldr.w	r2, [r3], #4
 8005228:	9105      	str	r1, [sp, #20]
 800522a:	6800      	ldr	r0, [r0, #0]
 800522c:	a902      	add	r1, sp, #8
 800522e:	9301      	str	r3, [sp, #4]
 8005230:	f001 fa7a 	bl	8006728 <_svfiprintf_r>
 8005234:	2200      	movs	r2, #0
 8005236:	9b02      	ldr	r3, [sp, #8]
 8005238:	701a      	strb	r2, [r3, #0]
 800523a:	b01c      	add	sp, #112	; 0x70
 800523c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005240:	b003      	add	sp, #12
 8005242:	4770      	bx	lr
 8005244:	20000018 	.word	0x20000018
 8005248:	ffff0208 	.word	0xffff0208

0800524c <quorem>:
 800524c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005250:	6903      	ldr	r3, [r0, #16]
 8005252:	690c      	ldr	r4, [r1, #16]
 8005254:	4680      	mov	r8, r0
 8005256:	42a3      	cmp	r3, r4
 8005258:	f2c0 8084 	blt.w	8005364 <quorem+0x118>
 800525c:	3c01      	subs	r4, #1
 800525e:	f101 0714 	add.w	r7, r1, #20
 8005262:	f100 0614 	add.w	r6, r0, #20
 8005266:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800526a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800526e:	3501      	adds	r5, #1
 8005270:	fbb0 f5f5 	udiv	r5, r0, r5
 8005274:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005278:	eb06 030c 	add.w	r3, r6, ip
 800527c:	eb07 090c 	add.w	r9, r7, ip
 8005280:	9301      	str	r3, [sp, #4]
 8005282:	b39d      	cbz	r5, 80052ec <quorem+0xa0>
 8005284:	f04f 0a00 	mov.w	sl, #0
 8005288:	4638      	mov	r0, r7
 800528a:	46b6      	mov	lr, r6
 800528c:	46d3      	mov	fp, sl
 800528e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005292:	b293      	uxth	r3, r2
 8005294:	fb05 a303 	mla	r3, r5, r3, sl
 8005298:	0c12      	lsrs	r2, r2, #16
 800529a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800529e:	fb05 a202 	mla	r2, r5, r2, sl
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	ebab 0303 	sub.w	r3, fp, r3
 80052a8:	f8de b000 	ldr.w	fp, [lr]
 80052ac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80052b0:	fa1f fb8b 	uxth.w	fp, fp
 80052b4:	445b      	add	r3, fp
 80052b6:	fa1f fb82 	uxth.w	fp, r2
 80052ba:	f8de 2000 	ldr.w	r2, [lr]
 80052be:	4581      	cmp	r9, r0
 80052c0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80052c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052ce:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80052d2:	f84e 3b04 	str.w	r3, [lr], #4
 80052d6:	d2da      	bcs.n	800528e <quorem+0x42>
 80052d8:	f856 300c 	ldr.w	r3, [r6, ip]
 80052dc:	b933      	cbnz	r3, 80052ec <quorem+0xa0>
 80052de:	9b01      	ldr	r3, [sp, #4]
 80052e0:	3b04      	subs	r3, #4
 80052e2:	429e      	cmp	r6, r3
 80052e4:	461a      	mov	r2, r3
 80052e6:	d331      	bcc.n	800534c <quorem+0x100>
 80052e8:	f8c8 4010 	str.w	r4, [r8, #16]
 80052ec:	4640      	mov	r0, r8
 80052ee:	f001 f845 	bl	800637c <__mcmp>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	db26      	blt.n	8005344 <quorem+0xf8>
 80052f6:	4630      	mov	r0, r6
 80052f8:	f04f 0c00 	mov.w	ip, #0
 80052fc:	3501      	adds	r5, #1
 80052fe:	f857 1b04 	ldr.w	r1, [r7], #4
 8005302:	f8d0 e000 	ldr.w	lr, [r0]
 8005306:	b28b      	uxth	r3, r1
 8005308:	ebac 0303 	sub.w	r3, ip, r3
 800530c:	fa1f f28e 	uxth.w	r2, lr
 8005310:	4413      	add	r3, r2
 8005312:	0c0a      	lsrs	r2, r1, #16
 8005314:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005318:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800531c:	b29b      	uxth	r3, r3
 800531e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005322:	45b9      	cmp	r9, r7
 8005324:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005328:	f840 3b04 	str.w	r3, [r0], #4
 800532c:	d2e7      	bcs.n	80052fe <quorem+0xb2>
 800532e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005332:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005336:	b92a      	cbnz	r2, 8005344 <quorem+0xf8>
 8005338:	3b04      	subs	r3, #4
 800533a:	429e      	cmp	r6, r3
 800533c:	461a      	mov	r2, r3
 800533e:	d30b      	bcc.n	8005358 <quorem+0x10c>
 8005340:	f8c8 4010 	str.w	r4, [r8, #16]
 8005344:	4628      	mov	r0, r5
 8005346:	b003      	add	sp, #12
 8005348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800534c:	6812      	ldr	r2, [r2, #0]
 800534e:	3b04      	subs	r3, #4
 8005350:	2a00      	cmp	r2, #0
 8005352:	d1c9      	bne.n	80052e8 <quorem+0x9c>
 8005354:	3c01      	subs	r4, #1
 8005356:	e7c4      	b.n	80052e2 <quorem+0x96>
 8005358:	6812      	ldr	r2, [r2, #0]
 800535a:	3b04      	subs	r3, #4
 800535c:	2a00      	cmp	r2, #0
 800535e:	d1ef      	bne.n	8005340 <quorem+0xf4>
 8005360:	3c01      	subs	r4, #1
 8005362:	e7ea      	b.n	800533a <quorem+0xee>
 8005364:	2000      	movs	r0, #0
 8005366:	e7ee      	b.n	8005346 <quorem+0xfa>

08005368 <_dtoa_r>:
 8005368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800536c:	4616      	mov	r6, r2
 800536e:	461f      	mov	r7, r3
 8005370:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005372:	b095      	sub	sp, #84	; 0x54
 8005374:	4604      	mov	r4, r0
 8005376:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800537a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800537e:	b93d      	cbnz	r5, 8005390 <_dtoa_r+0x28>
 8005380:	2010      	movs	r0, #16
 8005382:	f000 fdb3 	bl	8005eec <malloc>
 8005386:	6260      	str	r0, [r4, #36]	; 0x24
 8005388:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800538c:	6005      	str	r5, [r0, #0]
 800538e:	60c5      	str	r5, [r0, #12]
 8005390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005392:	6819      	ldr	r1, [r3, #0]
 8005394:	b151      	cbz	r1, 80053ac <_dtoa_r+0x44>
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	2301      	movs	r3, #1
 800539a:	4093      	lsls	r3, r2
 800539c:	604a      	str	r2, [r1, #4]
 800539e:	608b      	str	r3, [r1, #8]
 80053a0:	4620      	mov	r0, r4
 80053a2:	f000 fe0a 	bl	8005fba <_Bfree>
 80053a6:	2200      	movs	r2, #0
 80053a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	1e3b      	subs	r3, r7, #0
 80053ae:	bfaf      	iteee	ge
 80053b0:	2300      	movge	r3, #0
 80053b2:	2201      	movlt	r2, #1
 80053b4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80053b8:	9303      	strlt	r3, [sp, #12]
 80053ba:	bfac      	ite	ge
 80053bc:	f8c8 3000 	strge.w	r3, [r8]
 80053c0:	f8c8 2000 	strlt.w	r2, [r8]
 80053c4:	4bae      	ldr	r3, [pc, #696]	; (8005680 <_dtoa_r+0x318>)
 80053c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80053ca:	ea33 0308 	bics.w	r3, r3, r8
 80053ce:	d11b      	bne.n	8005408 <_dtoa_r+0xa0>
 80053d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80053d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80053d6:	6013      	str	r3, [r2, #0]
 80053d8:	9b02      	ldr	r3, [sp, #8]
 80053da:	b923      	cbnz	r3, 80053e6 <_dtoa_r+0x7e>
 80053dc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80053e0:	2800      	cmp	r0, #0
 80053e2:	f000 8545 	beq.w	8005e70 <_dtoa_r+0xb08>
 80053e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053e8:	b953      	cbnz	r3, 8005400 <_dtoa_r+0x98>
 80053ea:	4ba6      	ldr	r3, [pc, #664]	; (8005684 <_dtoa_r+0x31c>)
 80053ec:	e021      	b.n	8005432 <_dtoa_r+0xca>
 80053ee:	4ba6      	ldr	r3, [pc, #664]	; (8005688 <_dtoa_r+0x320>)
 80053f0:	9306      	str	r3, [sp, #24]
 80053f2:	3308      	adds	r3, #8
 80053f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	9806      	ldr	r0, [sp, #24]
 80053fa:	b015      	add	sp, #84	; 0x54
 80053fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005400:	4ba0      	ldr	r3, [pc, #640]	; (8005684 <_dtoa_r+0x31c>)
 8005402:	9306      	str	r3, [sp, #24]
 8005404:	3303      	adds	r3, #3
 8005406:	e7f5      	b.n	80053f4 <_dtoa_r+0x8c>
 8005408:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800540c:	2200      	movs	r2, #0
 800540e:	2300      	movs	r3, #0
 8005410:	4630      	mov	r0, r6
 8005412:	4639      	mov	r1, r7
 8005414:	f7fb fac8 	bl	80009a8 <__aeabi_dcmpeq>
 8005418:	4682      	mov	sl, r0
 800541a:	b160      	cbz	r0, 8005436 <_dtoa_r+0xce>
 800541c:	2301      	movs	r3, #1
 800541e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 8520 	beq.w	8005e6a <_dtoa_r+0xb02>
 800542a:	4b98      	ldr	r3, [pc, #608]	; (800568c <_dtoa_r+0x324>)
 800542c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	3b01      	subs	r3, #1
 8005432:	9306      	str	r3, [sp, #24]
 8005434:	e7e0      	b.n	80053f8 <_dtoa_r+0x90>
 8005436:	ab12      	add	r3, sp, #72	; 0x48
 8005438:	9301      	str	r3, [sp, #4]
 800543a:	ab13      	add	r3, sp, #76	; 0x4c
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	4632      	mov	r2, r6
 8005440:	463b      	mov	r3, r7
 8005442:	4620      	mov	r0, r4
 8005444:	f001 f812 	bl	800646c <__d2b>
 8005448:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800544c:	4683      	mov	fp, r0
 800544e:	2d00      	cmp	r5, #0
 8005450:	d07d      	beq.n	800554e <_dtoa_r+0x1e6>
 8005452:	46b0      	mov	r8, r6
 8005454:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005458:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800545c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005460:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005464:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005468:	2200      	movs	r2, #0
 800546a:	4b89      	ldr	r3, [pc, #548]	; (8005690 <_dtoa_r+0x328>)
 800546c:	4640      	mov	r0, r8
 800546e:	4649      	mov	r1, r9
 8005470:	f7fa fe7a 	bl	8000168 <__aeabi_dsub>
 8005474:	a37c      	add	r3, pc, #496	; (adr r3, 8005668 <_dtoa_r+0x300>)
 8005476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547a:	f7fb f82d 	bl	80004d8 <__aeabi_dmul>
 800547e:	a37c      	add	r3, pc, #496	; (adr r3, 8005670 <_dtoa_r+0x308>)
 8005480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005484:	f7fa fe72 	bl	800016c <__adddf3>
 8005488:	4606      	mov	r6, r0
 800548a:	4628      	mov	r0, r5
 800548c:	460f      	mov	r7, r1
 800548e:	f7fa ffb9 	bl	8000404 <__aeabi_i2d>
 8005492:	a379      	add	r3, pc, #484	; (adr r3, 8005678 <_dtoa_r+0x310>)
 8005494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005498:	f7fb f81e 	bl	80004d8 <__aeabi_dmul>
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4630      	mov	r0, r6
 80054a2:	4639      	mov	r1, r7
 80054a4:	f7fa fe62 	bl	800016c <__adddf3>
 80054a8:	4606      	mov	r6, r0
 80054aa:	460f      	mov	r7, r1
 80054ac:	f7fb fac4 	bl	8000a38 <__aeabi_d2iz>
 80054b0:	2200      	movs	r2, #0
 80054b2:	4682      	mov	sl, r0
 80054b4:	2300      	movs	r3, #0
 80054b6:	4630      	mov	r0, r6
 80054b8:	4639      	mov	r1, r7
 80054ba:	f7fb fa7f 	bl	80009bc <__aeabi_dcmplt>
 80054be:	b148      	cbz	r0, 80054d4 <_dtoa_r+0x16c>
 80054c0:	4650      	mov	r0, sl
 80054c2:	f7fa ff9f 	bl	8000404 <__aeabi_i2d>
 80054c6:	4632      	mov	r2, r6
 80054c8:	463b      	mov	r3, r7
 80054ca:	f7fb fa6d 	bl	80009a8 <__aeabi_dcmpeq>
 80054ce:	b908      	cbnz	r0, 80054d4 <_dtoa_r+0x16c>
 80054d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054d4:	f1ba 0f16 	cmp.w	sl, #22
 80054d8:	d85a      	bhi.n	8005590 <_dtoa_r+0x228>
 80054da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054de:	496d      	ldr	r1, [pc, #436]	; (8005694 <_dtoa_r+0x32c>)
 80054e0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80054e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054e8:	f7fb fa86 	bl	80009f8 <__aeabi_dcmpgt>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	d051      	beq.n	8005594 <_dtoa_r+0x22c>
 80054f0:	2300      	movs	r3, #0
 80054f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054f6:	930d      	str	r3, [sp, #52]	; 0x34
 80054f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054fa:	1b5d      	subs	r5, r3, r5
 80054fc:	1e6b      	subs	r3, r5, #1
 80054fe:	9307      	str	r3, [sp, #28]
 8005500:	bf43      	ittte	mi
 8005502:	2300      	movmi	r3, #0
 8005504:	f1c5 0901 	rsbmi	r9, r5, #1
 8005508:	9307      	strmi	r3, [sp, #28]
 800550a:	f04f 0900 	movpl.w	r9, #0
 800550e:	f1ba 0f00 	cmp.w	sl, #0
 8005512:	db41      	blt.n	8005598 <_dtoa_r+0x230>
 8005514:	9b07      	ldr	r3, [sp, #28]
 8005516:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800551a:	4453      	add	r3, sl
 800551c:	9307      	str	r3, [sp, #28]
 800551e:	2300      	movs	r3, #0
 8005520:	9308      	str	r3, [sp, #32]
 8005522:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005524:	2b09      	cmp	r3, #9
 8005526:	f200 808f 	bhi.w	8005648 <_dtoa_r+0x2e0>
 800552a:	2b05      	cmp	r3, #5
 800552c:	bfc4      	itt	gt
 800552e:	3b04      	subgt	r3, #4
 8005530:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005532:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005534:	bfc8      	it	gt
 8005536:	2500      	movgt	r5, #0
 8005538:	f1a3 0302 	sub.w	r3, r3, #2
 800553c:	bfd8      	it	le
 800553e:	2501      	movle	r5, #1
 8005540:	2b03      	cmp	r3, #3
 8005542:	f200 808d 	bhi.w	8005660 <_dtoa_r+0x2f8>
 8005546:	e8df f003 	tbb	[pc, r3]
 800554a:	7d7b      	.short	0x7d7b
 800554c:	6f2f      	.short	0x6f2f
 800554e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005552:	441d      	add	r5, r3
 8005554:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005558:	2820      	cmp	r0, #32
 800555a:	dd13      	ble.n	8005584 <_dtoa_r+0x21c>
 800555c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005560:	9b02      	ldr	r3, [sp, #8]
 8005562:	fa08 f800 	lsl.w	r8, r8, r0
 8005566:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800556a:	fa23 f000 	lsr.w	r0, r3, r0
 800556e:	ea48 0000 	orr.w	r0, r8, r0
 8005572:	f7fa ff37 	bl	80003e4 <__aeabi_ui2d>
 8005576:	2301      	movs	r3, #1
 8005578:	4680      	mov	r8, r0
 800557a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800557e:	3d01      	subs	r5, #1
 8005580:	9310      	str	r3, [sp, #64]	; 0x40
 8005582:	e771      	b.n	8005468 <_dtoa_r+0x100>
 8005584:	9b02      	ldr	r3, [sp, #8]
 8005586:	f1c0 0020 	rsb	r0, r0, #32
 800558a:	fa03 f000 	lsl.w	r0, r3, r0
 800558e:	e7f0      	b.n	8005572 <_dtoa_r+0x20a>
 8005590:	2301      	movs	r3, #1
 8005592:	e7b0      	b.n	80054f6 <_dtoa_r+0x18e>
 8005594:	900d      	str	r0, [sp, #52]	; 0x34
 8005596:	e7af      	b.n	80054f8 <_dtoa_r+0x190>
 8005598:	f1ca 0300 	rsb	r3, sl, #0
 800559c:	9308      	str	r3, [sp, #32]
 800559e:	2300      	movs	r3, #0
 80055a0:	eba9 090a 	sub.w	r9, r9, sl
 80055a4:	930c      	str	r3, [sp, #48]	; 0x30
 80055a6:	e7bc      	b.n	8005522 <_dtoa_r+0x1ba>
 80055a8:	2301      	movs	r3, #1
 80055aa:	9309      	str	r3, [sp, #36]	; 0x24
 80055ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	dd74      	ble.n	800569c <_dtoa_r+0x334>
 80055b2:	4698      	mov	r8, r3
 80055b4:	9304      	str	r3, [sp, #16]
 80055b6:	2200      	movs	r2, #0
 80055b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80055ba:	6072      	str	r2, [r6, #4]
 80055bc:	2204      	movs	r2, #4
 80055be:	f102 0014 	add.w	r0, r2, #20
 80055c2:	4298      	cmp	r0, r3
 80055c4:	6871      	ldr	r1, [r6, #4]
 80055c6:	d96e      	bls.n	80056a6 <_dtoa_r+0x33e>
 80055c8:	4620      	mov	r0, r4
 80055ca:	f000 fcc2 	bl	8005f52 <_Balloc>
 80055ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055d0:	6030      	str	r0, [r6, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f1b8 0f0e 	cmp.w	r8, #14
 80055d8:	9306      	str	r3, [sp, #24]
 80055da:	f200 80ed 	bhi.w	80057b8 <_dtoa_r+0x450>
 80055de:	2d00      	cmp	r5, #0
 80055e0:	f000 80ea 	beq.w	80057b8 <_dtoa_r+0x450>
 80055e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055e8:	f1ba 0f00 	cmp.w	sl, #0
 80055ec:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80055f0:	dd77      	ble.n	80056e2 <_dtoa_r+0x37a>
 80055f2:	4a28      	ldr	r2, [pc, #160]	; (8005694 <_dtoa_r+0x32c>)
 80055f4:	f00a 030f 	and.w	r3, sl, #15
 80055f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80055fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005600:	06f0      	lsls	r0, r6, #27
 8005602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005606:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800560a:	d568      	bpl.n	80056de <_dtoa_r+0x376>
 800560c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005610:	4b21      	ldr	r3, [pc, #132]	; (8005698 <_dtoa_r+0x330>)
 8005612:	2503      	movs	r5, #3
 8005614:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005618:	f7fb f888 	bl	800072c <__aeabi_ddiv>
 800561c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005620:	f006 060f 	and.w	r6, r6, #15
 8005624:	4f1c      	ldr	r7, [pc, #112]	; (8005698 <_dtoa_r+0x330>)
 8005626:	e04f      	b.n	80056c8 <_dtoa_r+0x360>
 8005628:	2301      	movs	r3, #1
 800562a:	9309      	str	r3, [sp, #36]	; 0x24
 800562c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800562e:	4453      	add	r3, sl
 8005630:	f103 0801 	add.w	r8, r3, #1
 8005634:	9304      	str	r3, [sp, #16]
 8005636:	4643      	mov	r3, r8
 8005638:	2b01      	cmp	r3, #1
 800563a:	bfb8      	it	lt
 800563c:	2301      	movlt	r3, #1
 800563e:	e7ba      	b.n	80055b6 <_dtoa_r+0x24e>
 8005640:	2300      	movs	r3, #0
 8005642:	e7b2      	b.n	80055aa <_dtoa_r+0x242>
 8005644:	2300      	movs	r3, #0
 8005646:	e7f0      	b.n	800562a <_dtoa_r+0x2c2>
 8005648:	2501      	movs	r5, #1
 800564a:	2300      	movs	r3, #0
 800564c:	9509      	str	r5, [sp, #36]	; 0x24
 800564e:	931e      	str	r3, [sp, #120]	; 0x78
 8005650:	f04f 33ff 	mov.w	r3, #4294967295
 8005654:	2200      	movs	r2, #0
 8005656:	9304      	str	r3, [sp, #16]
 8005658:	4698      	mov	r8, r3
 800565a:	2312      	movs	r3, #18
 800565c:	921f      	str	r2, [sp, #124]	; 0x7c
 800565e:	e7aa      	b.n	80055b6 <_dtoa_r+0x24e>
 8005660:	2301      	movs	r3, #1
 8005662:	9309      	str	r3, [sp, #36]	; 0x24
 8005664:	e7f4      	b.n	8005650 <_dtoa_r+0x2e8>
 8005666:	bf00      	nop
 8005668:	636f4361 	.word	0x636f4361
 800566c:	3fd287a7 	.word	0x3fd287a7
 8005670:	8b60c8b3 	.word	0x8b60c8b3
 8005674:	3fc68a28 	.word	0x3fc68a28
 8005678:	509f79fb 	.word	0x509f79fb
 800567c:	3fd34413 	.word	0x3fd34413
 8005680:	7ff00000 	.word	0x7ff00000
 8005684:	0800717d 	.word	0x0800717d
 8005688:	08007174 	.word	0x08007174
 800568c:	08007151 	.word	0x08007151
 8005690:	3ff80000 	.word	0x3ff80000
 8005694:	08007218 	.word	0x08007218
 8005698:	080071f0 	.word	0x080071f0
 800569c:	2301      	movs	r3, #1
 800569e:	9304      	str	r3, [sp, #16]
 80056a0:	4698      	mov	r8, r3
 80056a2:	461a      	mov	r2, r3
 80056a4:	e7da      	b.n	800565c <_dtoa_r+0x2f4>
 80056a6:	3101      	adds	r1, #1
 80056a8:	6071      	str	r1, [r6, #4]
 80056aa:	0052      	lsls	r2, r2, #1
 80056ac:	e787      	b.n	80055be <_dtoa_r+0x256>
 80056ae:	07f1      	lsls	r1, r6, #31
 80056b0:	d508      	bpl.n	80056c4 <_dtoa_r+0x35c>
 80056b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80056b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ba:	f7fa ff0d 	bl	80004d8 <__aeabi_dmul>
 80056be:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80056c2:	3501      	adds	r5, #1
 80056c4:	1076      	asrs	r6, r6, #1
 80056c6:	3708      	adds	r7, #8
 80056c8:	2e00      	cmp	r6, #0
 80056ca:	d1f0      	bne.n	80056ae <_dtoa_r+0x346>
 80056cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80056d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056d4:	f7fb f82a 	bl	800072c <__aeabi_ddiv>
 80056d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056dc:	e01b      	b.n	8005716 <_dtoa_r+0x3ae>
 80056de:	2502      	movs	r5, #2
 80056e0:	e7a0      	b.n	8005624 <_dtoa_r+0x2bc>
 80056e2:	f000 80a4 	beq.w	800582e <_dtoa_r+0x4c6>
 80056e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80056ea:	f1ca 0600 	rsb	r6, sl, #0
 80056ee:	4ba0      	ldr	r3, [pc, #640]	; (8005970 <_dtoa_r+0x608>)
 80056f0:	f006 020f 	and.w	r2, r6, #15
 80056f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fc:	f7fa feec 	bl	80004d8 <__aeabi_dmul>
 8005700:	2502      	movs	r5, #2
 8005702:	2300      	movs	r3, #0
 8005704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005708:	4f9a      	ldr	r7, [pc, #616]	; (8005974 <_dtoa_r+0x60c>)
 800570a:	1136      	asrs	r6, r6, #4
 800570c:	2e00      	cmp	r6, #0
 800570e:	f040 8083 	bne.w	8005818 <_dtoa_r+0x4b0>
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e0      	bne.n	80056d8 <_dtoa_r+0x370>
 8005716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 808a 	beq.w	8005832 <_dtoa_r+0x4ca>
 800571e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005722:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005726:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800572a:	2200      	movs	r2, #0
 800572c:	4b92      	ldr	r3, [pc, #584]	; (8005978 <_dtoa_r+0x610>)
 800572e:	f7fb f945 	bl	80009bc <__aeabi_dcmplt>
 8005732:	2800      	cmp	r0, #0
 8005734:	d07d      	beq.n	8005832 <_dtoa_r+0x4ca>
 8005736:	f1b8 0f00 	cmp.w	r8, #0
 800573a:	d07a      	beq.n	8005832 <_dtoa_r+0x4ca>
 800573c:	9b04      	ldr	r3, [sp, #16]
 800573e:	2b00      	cmp	r3, #0
 8005740:	dd36      	ble.n	80057b0 <_dtoa_r+0x448>
 8005742:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005746:	2200      	movs	r2, #0
 8005748:	4b8c      	ldr	r3, [pc, #560]	; (800597c <_dtoa_r+0x614>)
 800574a:	f7fa fec5 	bl	80004d8 <__aeabi_dmul>
 800574e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005752:	9e04      	ldr	r6, [sp, #16]
 8005754:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005758:	3501      	adds	r5, #1
 800575a:	4628      	mov	r0, r5
 800575c:	f7fa fe52 	bl	8000404 <__aeabi_i2d>
 8005760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005764:	f7fa feb8 	bl	80004d8 <__aeabi_dmul>
 8005768:	2200      	movs	r2, #0
 800576a:	4b85      	ldr	r3, [pc, #532]	; (8005980 <_dtoa_r+0x618>)
 800576c:	f7fa fcfe 	bl	800016c <__adddf3>
 8005770:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005774:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005778:	950b      	str	r5, [sp, #44]	; 0x2c
 800577a:	2e00      	cmp	r6, #0
 800577c:	d15c      	bne.n	8005838 <_dtoa_r+0x4d0>
 800577e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005782:	2200      	movs	r2, #0
 8005784:	4b7f      	ldr	r3, [pc, #508]	; (8005984 <_dtoa_r+0x61c>)
 8005786:	f7fa fcef 	bl	8000168 <__aeabi_dsub>
 800578a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800578c:	462b      	mov	r3, r5
 800578e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005792:	f7fb f931 	bl	80009f8 <__aeabi_dcmpgt>
 8005796:	2800      	cmp	r0, #0
 8005798:	f040 8281 	bne.w	8005c9e <_dtoa_r+0x936>
 800579c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057a2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80057a6:	f7fb f909 	bl	80009bc <__aeabi_dcmplt>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	f040 8275 	bne.w	8005c9a <_dtoa_r+0x932>
 80057b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80057b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80057b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f2c0 814b 	blt.w	8005a56 <_dtoa_r+0x6ee>
 80057c0:	f1ba 0f0e 	cmp.w	sl, #14
 80057c4:	f300 8147 	bgt.w	8005a56 <_dtoa_r+0x6ee>
 80057c8:	4b69      	ldr	r3, [pc, #420]	; (8005970 <_dtoa_r+0x608>)
 80057ca:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80057ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f280 80d7 	bge.w	800598c <_dtoa_r+0x624>
 80057de:	f1b8 0f00 	cmp.w	r8, #0
 80057e2:	f300 80d3 	bgt.w	800598c <_dtoa_r+0x624>
 80057e6:	f040 8257 	bne.w	8005c98 <_dtoa_r+0x930>
 80057ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057ee:	2200      	movs	r2, #0
 80057f0:	4b64      	ldr	r3, [pc, #400]	; (8005984 <_dtoa_r+0x61c>)
 80057f2:	f7fa fe71 	bl	80004d8 <__aeabi_dmul>
 80057f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057fa:	f7fb f8f3 	bl	80009e4 <__aeabi_dcmpge>
 80057fe:	4646      	mov	r6, r8
 8005800:	4647      	mov	r7, r8
 8005802:	2800      	cmp	r0, #0
 8005804:	f040 822d 	bne.w	8005c62 <_dtoa_r+0x8fa>
 8005808:	9b06      	ldr	r3, [sp, #24]
 800580a:	9a06      	ldr	r2, [sp, #24]
 800580c:	1c5d      	adds	r5, r3, #1
 800580e:	2331      	movs	r3, #49	; 0x31
 8005810:	f10a 0a01 	add.w	sl, sl, #1
 8005814:	7013      	strb	r3, [r2, #0]
 8005816:	e228      	b.n	8005c6a <_dtoa_r+0x902>
 8005818:	07f2      	lsls	r2, r6, #31
 800581a:	d505      	bpl.n	8005828 <_dtoa_r+0x4c0>
 800581c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005820:	f7fa fe5a 	bl	80004d8 <__aeabi_dmul>
 8005824:	2301      	movs	r3, #1
 8005826:	3501      	adds	r5, #1
 8005828:	1076      	asrs	r6, r6, #1
 800582a:	3708      	adds	r7, #8
 800582c:	e76e      	b.n	800570c <_dtoa_r+0x3a4>
 800582e:	2502      	movs	r5, #2
 8005830:	e771      	b.n	8005716 <_dtoa_r+0x3ae>
 8005832:	4657      	mov	r7, sl
 8005834:	4646      	mov	r6, r8
 8005836:	e790      	b.n	800575a <_dtoa_r+0x3f2>
 8005838:	4b4d      	ldr	r3, [pc, #308]	; (8005970 <_dtoa_r+0x608>)
 800583a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800583e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005844:	2b00      	cmp	r3, #0
 8005846:	d048      	beq.n	80058da <_dtoa_r+0x572>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	2000      	movs	r0, #0
 800584e:	494e      	ldr	r1, [pc, #312]	; (8005988 <_dtoa_r+0x620>)
 8005850:	f7fa ff6c 	bl	800072c <__aeabi_ddiv>
 8005854:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005858:	f7fa fc86 	bl	8000168 <__aeabi_dsub>
 800585c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005860:	9d06      	ldr	r5, [sp, #24]
 8005862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005866:	f7fb f8e7 	bl	8000a38 <__aeabi_d2iz>
 800586a:	9011      	str	r0, [sp, #68]	; 0x44
 800586c:	f7fa fdca 	bl	8000404 <__aeabi_i2d>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005878:	f7fa fc76 	bl	8000168 <__aeabi_dsub>
 800587c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800587e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005882:	3330      	adds	r3, #48	; 0x30
 8005884:	f805 3b01 	strb.w	r3, [r5], #1
 8005888:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800588c:	f7fb f896 	bl	80009bc <__aeabi_dcmplt>
 8005890:	2800      	cmp	r0, #0
 8005892:	d163      	bne.n	800595c <_dtoa_r+0x5f4>
 8005894:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005898:	2000      	movs	r0, #0
 800589a:	4937      	ldr	r1, [pc, #220]	; (8005978 <_dtoa_r+0x610>)
 800589c:	f7fa fc64 	bl	8000168 <__aeabi_dsub>
 80058a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058a4:	f7fb f88a 	bl	80009bc <__aeabi_dcmplt>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	f040 80b5 	bne.w	8005a18 <_dtoa_r+0x6b0>
 80058ae:	9b06      	ldr	r3, [sp, #24]
 80058b0:	1aeb      	subs	r3, r5, r3
 80058b2:	429e      	cmp	r6, r3
 80058b4:	f77f af7c 	ble.w	80057b0 <_dtoa_r+0x448>
 80058b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80058bc:	2200      	movs	r2, #0
 80058be:	4b2f      	ldr	r3, [pc, #188]	; (800597c <_dtoa_r+0x614>)
 80058c0:	f7fa fe0a 	bl	80004d8 <__aeabi_dmul>
 80058c4:	2200      	movs	r2, #0
 80058c6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80058ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058ce:	4b2b      	ldr	r3, [pc, #172]	; (800597c <_dtoa_r+0x614>)
 80058d0:	f7fa fe02 	bl	80004d8 <__aeabi_dmul>
 80058d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058d8:	e7c3      	b.n	8005862 <_dtoa_r+0x4fa>
 80058da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058de:	f7fa fdfb 	bl	80004d8 <__aeabi_dmul>
 80058e2:	9b06      	ldr	r3, [sp, #24]
 80058e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80058e8:	199d      	adds	r5, r3, r6
 80058ea:	461e      	mov	r6, r3
 80058ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058f0:	f7fb f8a2 	bl	8000a38 <__aeabi_d2iz>
 80058f4:	9011      	str	r0, [sp, #68]	; 0x44
 80058f6:	f7fa fd85 	bl	8000404 <__aeabi_i2d>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005902:	f7fa fc31 	bl	8000168 <__aeabi_dsub>
 8005906:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005908:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800590c:	3330      	adds	r3, #48	; 0x30
 800590e:	f806 3b01 	strb.w	r3, [r6], #1
 8005912:	42ae      	cmp	r6, r5
 8005914:	f04f 0200 	mov.w	r2, #0
 8005918:	d124      	bne.n	8005964 <_dtoa_r+0x5fc>
 800591a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800591e:	4b1a      	ldr	r3, [pc, #104]	; (8005988 <_dtoa_r+0x620>)
 8005920:	f7fa fc24 	bl	800016c <__adddf3>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800592c:	f7fb f864 	bl	80009f8 <__aeabi_dcmpgt>
 8005930:	2800      	cmp	r0, #0
 8005932:	d171      	bne.n	8005a18 <_dtoa_r+0x6b0>
 8005934:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005938:	2000      	movs	r0, #0
 800593a:	4913      	ldr	r1, [pc, #76]	; (8005988 <_dtoa_r+0x620>)
 800593c:	f7fa fc14 	bl	8000168 <__aeabi_dsub>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005948:	f7fb f838 	bl	80009bc <__aeabi_dcmplt>
 800594c:	2800      	cmp	r0, #0
 800594e:	f43f af2f 	beq.w	80057b0 <_dtoa_r+0x448>
 8005952:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005956:	1e6a      	subs	r2, r5, #1
 8005958:	2b30      	cmp	r3, #48	; 0x30
 800595a:	d001      	beq.n	8005960 <_dtoa_r+0x5f8>
 800595c:	46ba      	mov	sl, r7
 800595e:	e04a      	b.n	80059f6 <_dtoa_r+0x68e>
 8005960:	4615      	mov	r5, r2
 8005962:	e7f6      	b.n	8005952 <_dtoa_r+0x5ea>
 8005964:	4b05      	ldr	r3, [pc, #20]	; (800597c <_dtoa_r+0x614>)
 8005966:	f7fa fdb7 	bl	80004d8 <__aeabi_dmul>
 800596a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800596e:	e7bd      	b.n	80058ec <_dtoa_r+0x584>
 8005970:	08007218 	.word	0x08007218
 8005974:	080071f0 	.word	0x080071f0
 8005978:	3ff00000 	.word	0x3ff00000
 800597c:	40240000 	.word	0x40240000
 8005980:	401c0000 	.word	0x401c0000
 8005984:	40140000 	.word	0x40140000
 8005988:	3fe00000 	.word	0x3fe00000
 800598c:	9d06      	ldr	r5, [sp, #24]
 800598e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005992:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005996:	4630      	mov	r0, r6
 8005998:	4639      	mov	r1, r7
 800599a:	f7fa fec7 	bl	800072c <__aeabi_ddiv>
 800599e:	f7fb f84b 	bl	8000a38 <__aeabi_d2iz>
 80059a2:	4681      	mov	r9, r0
 80059a4:	f7fa fd2e 	bl	8000404 <__aeabi_i2d>
 80059a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059ac:	f7fa fd94 	bl	80004d8 <__aeabi_dmul>
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	4630      	mov	r0, r6
 80059b6:	4639      	mov	r1, r7
 80059b8:	f7fa fbd6 	bl	8000168 <__aeabi_dsub>
 80059bc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80059c0:	f805 6b01 	strb.w	r6, [r5], #1
 80059c4:	9e06      	ldr	r6, [sp, #24]
 80059c6:	4602      	mov	r2, r0
 80059c8:	1bae      	subs	r6, r5, r6
 80059ca:	45b0      	cmp	r8, r6
 80059cc:	460b      	mov	r3, r1
 80059ce:	d135      	bne.n	8005a3c <_dtoa_r+0x6d4>
 80059d0:	f7fa fbcc 	bl	800016c <__adddf3>
 80059d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059d8:	4606      	mov	r6, r0
 80059da:	460f      	mov	r7, r1
 80059dc:	f7fb f80c 	bl	80009f8 <__aeabi_dcmpgt>
 80059e0:	b9c8      	cbnz	r0, 8005a16 <_dtoa_r+0x6ae>
 80059e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059e6:	4630      	mov	r0, r6
 80059e8:	4639      	mov	r1, r7
 80059ea:	f7fa ffdd 	bl	80009a8 <__aeabi_dcmpeq>
 80059ee:	b110      	cbz	r0, 80059f6 <_dtoa_r+0x68e>
 80059f0:	f019 0f01 	tst.w	r9, #1
 80059f4:	d10f      	bne.n	8005a16 <_dtoa_r+0x6ae>
 80059f6:	4659      	mov	r1, fp
 80059f8:	4620      	mov	r0, r4
 80059fa:	f000 fade 	bl	8005fba <_Bfree>
 80059fe:	2300      	movs	r3, #0
 8005a00:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a02:	702b      	strb	r3, [r5, #0]
 8005a04:	f10a 0301 	add.w	r3, sl, #1
 8005a08:	6013      	str	r3, [r2, #0]
 8005a0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f43f acf3 	beq.w	80053f8 <_dtoa_r+0x90>
 8005a12:	601d      	str	r5, [r3, #0]
 8005a14:	e4f0      	b.n	80053f8 <_dtoa_r+0x90>
 8005a16:	4657      	mov	r7, sl
 8005a18:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a1c:	1e6b      	subs	r3, r5, #1
 8005a1e:	2a39      	cmp	r2, #57	; 0x39
 8005a20:	d106      	bne.n	8005a30 <_dtoa_r+0x6c8>
 8005a22:	9a06      	ldr	r2, [sp, #24]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d107      	bne.n	8005a38 <_dtoa_r+0x6d0>
 8005a28:	2330      	movs	r3, #48	; 0x30
 8005a2a:	7013      	strb	r3, [r2, #0]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	3701      	adds	r7, #1
 8005a30:	781a      	ldrb	r2, [r3, #0]
 8005a32:	3201      	adds	r2, #1
 8005a34:	701a      	strb	r2, [r3, #0]
 8005a36:	e791      	b.n	800595c <_dtoa_r+0x5f4>
 8005a38:	461d      	mov	r5, r3
 8005a3a:	e7ed      	b.n	8005a18 <_dtoa_r+0x6b0>
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	4b99      	ldr	r3, [pc, #612]	; (8005ca4 <_dtoa_r+0x93c>)
 8005a40:	f7fa fd4a 	bl	80004d8 <__aeabi_dmul>
 8005a44:	2200      	movs	r2, #0
 8005a46:	2300      	movs	r3, #0
 8005a48:	4606      	mov	r6, r0
 8005a4a:	460f      	mov	r7, r1
 8005a4c:	f7fa ffac 	bl	80009a8 <__aeabi_dcmpeq>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	d09e      	beq.n	8005992 <_dtoa_r+0x62a>
 8005a54:	e7cf      	b.n	80059f6 <_dtoa_r+0x68e>
 8005a56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a58:	2a00      	cmp	r2, #0
 8005a5a:	f000 8088 	beq.w	8005b6e <_dtoa_r+0x806>
 8005a5e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005a60:	2a01      	cmp	r2, #1
 8005a62:	dc6d      	bgt.n	8005b40 <_dtoa_r+0x7d8>
 8005a64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a66:	2a00      	cmp	r2, #0
 8005a68:	d066      	beq.n	8005b38 <_dtoa_r+0x7d0>
 8005a6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a6e:	464d      	mov	r5, r9
 8005a70:	9e08      	ldr	r6, [sp, #32]
 8005a72:	9a07      	ldr	r2, [sp, #28]
 8005a74:	2101      	movs	r1, #1
 8005a76:	441a      	add	r2, r3
 8005a78:	4620      	mov	r0, r4
 8005a7a:	4499      	add	r9, r3
 8005a7c:	9207      	str	r2, [sp, #28]
 8005a7e:	f000 fb3c 	bl	80060fa <__i2b>
 8005a82:	4607      	mov	r7, r0
 8005a84:	2d00      	cmp	r5, #0
 8005a86:	dd0b      	ble.n	8005aa0 <_dtoa_r+0x738>
 8005a88:	9b07      	ldr	r3, [sp, #28]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	dd08      	ble.n	8005aa0 <_dtoa_r+0x738>
 8005a8e:	42ab      	cmp	r3, r5
 8005a90:	bfa8      	it	ge
 8005a92:	462b      	movge	r3, r5
 8005a94:	9a07      	ldr	r2, [sp, #28]
 8005a96:	eba9 0903 	sub.w	r9, r9, r3
 8005a9a:	1aed      	subs	r5, r5, r3
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	9307      	str	r3, [sp, #28]
 8005aa0:	9b08      	ldr	r3, [sp, #32]
 8005aa2:	b1eb      	cbz	r3, 8005ae0 <_dtoa_r+0x778>
 8005aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d065      	beq.n	8005b76 <_dtoa_r+0x80e>
 8005aaa:	b18e      	cbz	r6, 8005ad0 <_dtoa_r+0x768>
 8005aac:	4639      	mov	r1, r7
 8005aae:	4632      	mov	r2, r6
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f000 fbc1 	bl	8006238 <__pow5mult>
 8005ab6:	465a      	mov	r2, fp
 8005ab8:	4601      	mov	r1, r0
 8005aba:	4607      	mov	r7, r0
 8005abc:	4620      	mov	r0, r4
 8005abe:	f000 fb25 	bl	800610c <__multiply>
 8005ac2:	4659      	mov	r1, fp
 8005ac4:	900a      	str	r0, [sp, #40]	; 0x28
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	f000 fa77 	bl	8005fba <_Bfree>
 8005acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ace:	469b      	mov	fp, r3
 8005ad0:	9b08      	ldr	r3, [sp, #32]
 8005ad2:	1b9a      	subs	r2, r3, r6
 8005ad4:	d004      	beq.n	8005ae0 <_dtoa_r+0x778>
 8005ad6:	4659      	mov	r1, fp
 8005ad8:	4620      	mov	r0, r4
 8005ada:	f000 fbad 	bl	8006238 <__pow5mult>
 8005ade:	4683      	mov	fp, r0
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f000 fb09 	bl	80060fa <__i2b>
 8005ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005aea:	4606      	mov	r6, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 81c6 	beq.w	8005e7e <_dtoa_r+0xb16>
 8005af2:	461a      	mov	r2, r3
 8005af4:	4601      	mov	r1, r0
 8005af6:	4620      	mov	r0, r4
 8005af8:	f000 fb9e 	bl	8006238 <__pow5mult>
 8005afc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005afe:	4606      	mov	r6, r0
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	dc3e      	bgt.n	8005b82 <_dtoa_r+0x81a>
 8005b04:	9b02      	ldr	r3, [sp, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d137      	bne.n	8005b7a <_dtoa_r+0x812>
 8005b0a:	9b03      	ldr	r3, [sp, #12]
 8005b0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d134      	bne.n	8005b7e <_dtoa_r+0x816>
 8005b14:	9b03      	ldr	r3, [sp, #12]
 8005b16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b1a:	0d1b      	lsrs	r3, r3, #20
 8005b1c:	051b      	lsls	r3, r3, #20
 8005b1e:	b12b      	cbz	r3, 8005b2c <_dtoa_r+0x7c4>
 8005b20:	9b07      	ldr	r3, [sp, #28]
 8005b22:	f109 0901 	add.w	r9, r9, #1
 8005b26:	3301      	adds	r3, #1
 8005b28:	9307      	str	r3, [sp, #28]
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	9308      	str	r3, [sp, #32]
 8005b2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d128      	bne.n	8005b86 <_dtoa_r+0x81e>
 8005b34:	2001      	movs	r0, #1
 8005b36:	e02e      	b.n	8005b96 <_dtoa_r+0x82e>
 8005b38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b3a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b3e:	e796      	b.n	8005a6e <_dtoa_r+0x706>
 8005b40:	9b08      	ldr	r3, [sp, #32]
 8005b42:	f108 36ff 	add.w	r6, r8, #4294967295
 8005b46:	42b3      	cmp	r3, r6
 8005b48:	bfb7      	itett	lt
 8005b4a:	9b08      	ldrlt	r3, [sp, #32]
 8005b4c:	1b9e      	subge	r6, r3, r6
 8005b4e:	1af2      	sublt	r2, r6, r3
 8005b50:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005b52:	bfbf      	itttt	lt
 8005b54:	9608      	strlt	r6, [sp, #32]
 8005b56:	189b      	addlt	r3, r3, r2
 8005b58:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005b5a:	2600      	movlt	r6, #0
 8005b5c:	f1b8 0f00 	cmp.w	r8, #0
 8005b60:	bfb9      	ittee	lt
 8005b62:	eba9 0508 	sublt.w	r5, r9, r8
 8005b66:	2300      	movlt	r3, #0
 8005b68:	464d      	movge	r5, r9
 8005b6a:	4643      	movge	r3, r8
 8005b6c:	e781      	b.n	8005a72 <_dtoa_r+0x70a>
 8005b6e:	9e08      	ldr	r6, [sp, #32]
 8005b70:	464d      	mov	r5, r9
 8005b72:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005b74:	e786      	b.n	8005a84 <_dtoa_r+0x71c>
 8005b76:	9a08      	ldr	r2, [sp, #32]
 8005b78:	e7ad      	b.n	8005ad6 <_dtoa_r+0x76e>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e7d6      	b.n	8005b2c <_dtoa_r+0x7c4>
 8005b7e:	9b02      	ldr	r3, [sp, #8]
 8005b80:	e7d4      	b.n	8005b2c <_dtoa_r+0x7c4>
 8005b82:	2300      	movs	r3, #0
 8005b84:	9308      	str	r3, [sp, #32]
 8005b86:	6933      	ldr	r3, [r6, #16]
 8005b88:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005b8c:	6918      	ldr	r0, [r3, #16]
 8005b8e:	f000 fa66 	bl	800605e <__hi0bits>
 8005b92:	f1c0 0020 	rsb	r0, r0, #32
 8005b96:	9b07      	ldr	r3, [sp, #28]
 8005b98:	4418      	add	r0, r3
 8005b9a:	f010 001f 	ands.w	r0, r0, #31
 8005b9e:	d047      	beq.n	8005c30 <_dtoa_r+0x8c8>
 8005ba0:	f1c0 0320 	rsb	r3, r0, #32
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	dd3b      	ble.n	8005c20 <_dtoa_r+0x8b8>
 8005ba8:	9b07      	ldr	r3, [sp, #28]
 8005baa:	f1c0 001c 	rsb	r0, r0, #28
 8005bae:	4481      	add	r9, r0
 8005bb0:	4405      	add	r5, r0
 8005bb2:	4403      	add	r3, r0
 8005bb4:	9307      	str	r3, [sp, #28]
 8005bb6:	f1b9 0f00 	cmp.w	r9, #0
 8005bba:	dd05      	ble.n	8005bc8 <_dtoa_r+0x860>
 8005bbc:	4659      	mov	r1, fp
 8005bbe:	464a      	mov	r2, r9
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f000 fb87 	bl	80062d4 <__lshift>
 8005bc6:	4683      	mov	fp, r0
 8005bc8:	9b07      	ldr	r3, [sp, #28]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	dd05      	ble.n	8005bda <_dtoa_r+0x872>
 8005bce:	4631      	mov	r1, r6
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f000 fb7e 	bl	80062d4 <__lshift>
 8005bd8:	4606      	mov	r6, r0
 8005bda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bdc:	b353      	cbz	r3, 8005c34 <_dtoa_r+0x8cc>
 8005bde:	4631      	mov	r1, r6
 8005be0:	4658      	mov	r0, fp
 8005be2:	f000 fbcb 	bl	800637c <__mcmp>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	da24      	bge.n	8005c34 <_dtoa_r+0x8cc>
 8005bea:	2300      	movs	r3, #0
 8005bec:	4659      	mov	r1, fp
 8005bee:	220a      	movs	r2, #10
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f000 f9f9 	bl	8005fe8 <__multadd>
 8005bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bfc:	4683      	mov	fp, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 8144 	beq.w	8005e8c <_dtoa_r+0xb24>
 8005c04:	2300      	movs	r3, #0
 8005c06:	4639      	mov	r1, r7
 8005c08:	220a      	movs	r2, #10
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	f000 f9ec 	bl	8005fe8 <__multadd>
 8005c10:	9b04      	ldr	r3, [sp, #16]
 8005c12:	4607      	mov	r7, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	dc4d      	bgt.n	8005cb4 <_dtoa_r+0x94c>
 8005c18:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	dd4a      	ble.n	8005cb4 <_dtoa_r+0x94c>
 8005c1e:	e011      	b.n	8005c44 <_dtoa_r+0x8dc>
 8005c20:	d0c9      	beq.n	8005bb6 <_dtoa_r+0x84e>
 8005c22:	9a07      	ldr	r2, [sp, #28]
 8005c24:	331c      	adds	r3, #28
 8005c26:	441a      	add	r2, r3
 8005c28:	4499      	add	r9, r3
 8005c2a:	441d      	add	r5, r3
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	e7c1      	b.n	8005bb4 <_dtoa_r+0x84c>
 8005c30:	4603      	mov	r3, r0
 8005c32:	e7f6      	b.n	8005c22 <_dtoa_r+0x8ba>
 8005c34:	f1b8 0f00 	cmp.w	r8, #0
 8005c38:	dc36      	bgt.n	8005ca8 <_dtoa_r+0x940>
 8005c3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	dd33      	ble.n	8005ca8 <_dtoa_r+0x940>
 8005c40:	f8cd 8010 	str.w	r8, [sp, #16]
 8005c44:	9b04      	ldr	r3, [sp, #16]
 8005c46:	b963      	cbnz	r3, 8005c62 <_dtoa_r+0x8fa>
 8005c48:	4631      	mov	r1, r6
 8005c4a:	2205      	movs	r2, #5
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	f000 f9cb 	bl	8005fe8 <__multadd>
 8005c52:	4601      	mov	r1, r0
 8005c54:	4606      	mov	r6, r0
 8005c56:	4658      	mov	r0, fp
 8005c58:	f000 fb90 	bl	800637c <__mcmp>
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	f73f add3 	bgt.w	8005808 <_dtoa_r+0x4a0>
 8005c62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c64:	9d06      	ldr	r5, [sp, #24]
 8005c66:	ea6f 0a03 	mvn.w	sl, r3
 8005c6a:	f04f 0900 	mov.w	r9, #0
 8005c6e:	4631      	mov	r1, r6
 8005c70:	4620      	mov	r0, r4
 8005c72:	f000 f9a2 	bl	8005fba <_Bfree>
 8005c76:	2f00      	cmp	r7, #0
 8005c78:	f43f aebd 	beq.w	80059f6 <_dtoa_r+0x68e>
 8005c7c:	f1b9 0f00 	cmp.w	r9, #0
 8005c80:	d005      	beq.n	8005c8e <_dtoa_r+0x926>
 8005c82:	45b9      	cmp	r9, r7
 8005c84:	d003      	beq.n	8005c8e <_dtoa_r+0x926>
 8005c86:	4649      	mov	r1, r9
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f000 f996 	bl	8005fba <_Bfree>
 8005c8e:	4639      	mov	r1, r7
 8005c90:	4620      	mov	r0, r4
 8005c92:	f000 f992 	bl	8005fba <_Bfree>
 8005c96:	e6ae      	b.n	80059f6 <_dtoa_r+0x68e>
 8005c98:	2600      	movs	r6, #0
 8005c9a:	4637      	mov	r7, r6
 8005c9c:	e7e1      	b.n	8005c62 <_dtoa_r+0x8fa>
 8005c9e:	46ba      	mov	sl, r7
 8005ca0:	4637      	mov	r7, r6
 8005ca2:	e5b1      	b.n	8005808 <_dtoa_r+0x4a0>
 8005ca4:	40240000 	.word	0x40240000
 8005ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005caa:	f8cd 8010 	str.w	r8, [sp, #16]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 80f3 	beq.w	8005e9a <_dtoa_r+0xb32>
 8005cb4:	2d00      	cmp	r5, #0
 8005cb6:	dd05      	ble.n	8005cc4 <_dtoa_r+0x95c>
 8005cb8:	4639      	mov	r1, r7
 8005cba:	462a      	mov	r2, r5
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f000 fb09 	bl	80062d4 <__lshift>
 8005cc2:	4607      	mov	r7, r0
 8005cc4:	9b08      	ldr	r3, [sp, #32]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d04c      	beq.n	8005d64 <_dtoa_r+0x9fc>
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f000 f940 	bl	8005f52 <_Balloc>
 8005cd2:	4605      	mov	r5, r0
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	f107 010c 	add.w	r1, r7, #12
 8005cda:	3202      	adds	r2, #2
 8005cdc:	0092      	lsls	r2, r2, #2
 8005cde:	300c      	adds	r0, #12
 8005ce0:	f000 f92c 	bl	8005f3c <memcpy>
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f000 faf3 	bl	80062d4 <__lshift>
 8005cee:	46b9      	mov	r9, r7
 8005cf0:	4607      	mov	r7, r0
 8005cf2:	9b06      	ldr	r3, [sp, #24]
 8005cf4:	9307      	str	r3, [sp, #28]
 8005cf6:	9b02      	ldr	r3, [sp, #8]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	9308      	str	r3, [sp, #32]
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4658      	mov	r0, fp
 8005d02:	f7ff faa3 	bl	800524c <quorem>
 8005d06:	4649      	mov	r1, r9
 8005d08:	4605      	mov	r5, r0
 8005d0a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d0e:	4658      	mov	r0, fp
 8005d10:	f000 fb34 	bl	800637c <__mcmp>
 8005d14:	463a      	mov	r2, r7
 8005d16:	9002      	str	r0, [sp, #8]
 8005d18:	4631      	mov	r1, r6
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f000 fb48 	bl	80063b0 <__mdiff>
 8005d20:	68c3      	ldr	r3, [r0, #12]
 8005d22:	4602      	mov	r2, r0
 8005d24:	bb03      	cbnz	r3, 8005d68 <_dtoa_r+0xa00>
 8005d26:	4601      	mov	r1, r0
 8005d28:	9009      	str	r0, [sp, #36]	; 0x24
 8005d2a:	4658      	mov	r0, fp
 8005d2c:	f000 fb26 	bl	800637c <__mcmp>
 8005d30:	4603      	mov	r3, r0
 8005d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d34:	4611      	mov	r1, r2
 8005d36:	4620      	mov	r0, r4
 8005d38:	9309      	str	r3, [sp, #36]	; 0x24
 8005d3a:	f000 f93e 	bl	8005fba <_Bfree>
 8005d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d40:	b9a3      	cbnz	r3, 8005d6c <_dtoa_r+0xa04>
 8005d42:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005d44:	b992      	cbnz	r2, 8005d6c <_dtoa_r+0xa04>
 8005d46:	9a08      	ldr	r2, [sp, #32]
 8005d48:	b982      	cbnz	r2, 8005d6c <_dtoa_r+0xa04>
 8005d4a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d4e:	d029      	beq.n	8005da4 <_dtoa_r+0xa3c>
 8005d50:	9b02      	ldr	r3, [sp, #8]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	dd01      	ble.n	8005d5a <_dtoa_r+0x9f2>
 8005d56:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005d5a:	9b07      	ldr	r3, [sp, #28]
 8005d5c:	1c5d      	adds	r5, r3, #1
 8005d5e:	f883 8000 	strb.w	r8, [r3]
 8005d62:	e784      	b.n	8005c6e <_dtoa_r+0x906>
 8005d64:	4638      	mov	r0, r7
 8005d66:	e7c2      	b.n	8005cee <_dtoa_r+0x986>
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e7e3      	b.n	8005d34 <_dtoa_r+0x9cc>
 8005d6c:	9a02      	ldr	r2, [sp, #8]
 8005d6e:	2a00      	cmp	r2, #0
 8005d70:	db04      	blt.n	8005d7c <_dtoa_r+0xa14>
 8005d72:	d123      	bne.n	8005dbc <_dtoa_r+0xa54>
 8005d74:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005d76:	bb0a      	cbnz	r2, 8005dbc <_dtoa_r+0xa54>
 8005d78:	9a08      	ldr	r2, [sp, #32]
 8005d7a:	b9fa      	cbnz	r2, 8005dbc <_dtoa_r+0xa54>
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	ddec      	ble.n	8005d5a <_dtoa_r+0x9f2>
 8005d80:	4659      	mov	r1, fp
 8005d82:	2201      	movs	r2, #1
 8005d84:	4620      	mov	r0, r4
 8005d86:	f000 faa5 	bl	80062d4 <__lshift>
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	4683      	mov	fp, r0
 8005d8e:	f000 faf5 	bl	800637c <__mcmp>
 8005d92:	2800      	cmp	r0, #0
 8005d94:	dc03      	bgt.n	8005d9e <_dtoa_r+0xa36>
 8005d96:	d1e0      	bne.n	8005d5a <_dtoa_r+0x9f2>
 8005d98:	f018 0f01 	tst.w	r8, #1
 8005d9c:	d0dd      	beq.n	8005d5a <_dtoa_r+0x9f2>
 8005d9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005da2:	d1d8      	bne.n	8005d56 <_dtoa_r+0x9ee>
 8005da4:	9b07      	ldr	r3, [sp, #28]
 8005da6:	9a07      	ldr	r2, [sp, #28]
 8005da8:	1c5d      	adds	r5, r3, #1
 8005daa:	2339      	movs	r3, #57	; 0x39
 8005dac:	7013      	strb	r3, [r2, #0]
 8005dae:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005db2:	1e6a      	subs	r2, r5, #1
 8005db4:	2b39      	cmp	r3, #57	; 0x39
 8005db6:	d04d      	beq.n	8005e54 <_dtoa_r+0xaec>
 8005db8:	3301      	adds	r3, #1
 8005dba:	e052      	b.n	8005e62 <_dtoa_r+0xafa>
 8005dbc:	9a07      	ldr	r2, [sp, #28]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f102 0501 	add.w	r5, r2, #1
 8005dc4:	dd06      	ble.n	8005dd4 <_dtoa_r+0xa6c>
 8005dc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005dca:	d0eb      	beq.n	8005da4 <_dtoa_r+0xa3c>
 8005dcc:	f108 0801 	add.w	r8, r8, #1
 8005dd0:	9b07      	ldr	r3, [sp, #28]
 8005dd2:	e7c4      	b.n	8005d5e <_dtoa_r+0x9f6>
 8005dd4:	9b06      	ldr	r3, [sp, #24]
 8005dd6:	9a04      	ldr	r2, [sp, #16]
 8005dd8:	1aeb      	subs	r3, r5, r3
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005de0:	d021      	beq.n	8005e26 <_dtoa_r+0xabe>
 8005de2:	4659      	mov	r1, fp
 8005de4:	2300      	movs	r3, #0
 8005de6:	220a      	movs	r2, #10
 8005de8:	4620      	mov	r0, r4
 8005dea:	f000 f8fd 	bl	8005fe8 <__multadd>
 8005dee:	45b9      	cmp	r9, r7
 8005df0:	4683      	mov	fp, r0
 8005df2:	f04f 0300 	mov.w	r3, #0
 8005df6:	f04f 020a 	mov.w	r2, #10
 8005dfa:	4649      	mov	r1, r9
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	d105      	bne.n	8005e0c <_dtoa_r+0xaa4>
 8005e00:	f000 f8f2 	bl	8005fe8 <__multadd>
 8005e04:	4681      	mov	r9, r0
 8005e06:	4607      	mov	r7, r0
 8005e08:	9507      	str	r5, [sp, #28]
 8005e0a:	e778      	b.n	8005cfe <_dtoa_r+0x996>
 8005e0c:	f000 f8ec 	bl	8005fe8 <__multadd>
 8005e10:	4639      	mov	r1, r7
 8005e12:	4681      	mov	r9, r0
 8005e14:	2300      	movs	r3, #0
 8005e16:	220a      	movs	r2, #10
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f000 f8e5 	bl	8005fe8 <__multadd>
 8005e1e:	4607      	mov	r7, r0
 8005e20:	e7f2      	b.n	8005e08 <_dtoa_r+0xaa0>
 8005e22:	f04f 0900 	mov.w	r9, #0
 8005e26:	4659      	mov	r1, fp
 8005e28:	2201      	movs	r2, #1
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f000 fa52 	bl	80062d4 <__lshift>
 8005e30:	4631      	mov	r1, r6
 8005e32:	4683      	mov	fp, r0
 8005e34:	f000 faa2 	bl	800637c <__mcmp>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	dcb8      	bgt.n	8005dae <_dtoa_r+0xa46>
 8005e3c:	d102      	bne.n	8005e44 <_dtoa_r+0xadc>
 8005e3e:	f018 0f01 	tst.w	r8, #1
 8005e42:	d1b4      	bne.n	8005dae <_dtoa_r+0xa46>
 8005e44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e48:	1e6a      	subs	r2, r5, #1
 8005e4a:	2b30      	cmp	r3, #48	; 0x30
 8005e4c:	f47f af0f 	bne.w	8005c6e <_dtoa_r+0x906>
 8005e50:	4615      	mov	r5, r2
 8005e52:	e7f7      	b.n	8005e44 <_dtoa_r+0xadc>
 8005e54:	9b06      	ldr	r3, [sp, #24]
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d105      	bne.n	8005e66 <_dtoa_r+0xafe>
 8005e5a:	2331      	movs	r3, #49	; 0x31
 8005e5c:	9a06      	ldr	r2, [sp, #24]
 8005e5e:	f10a 0a01 	add.w	sl, sl, #1
 8005e62:	7013      	strb	r3, [r2, #0]
 8005e64:	e703      	b.n	8005c6e <_dtoa_r+0x906>
 8005e66:	4615      	mov	r5, r2
 8005e68:	e7a1      	b.n	8005dae <_dtoa_r+0xa46>
 8005e6a:	4b17      	ldr	r3, [pc, #92]	; (8005ec8 <_dtoa_r+0xb60>)
 8005e6c:	f7ff bae1 	b.w	8005432 <_dtoa_r+0xca>
 8005e70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f47f aabb 	bne.w	80053ee <_dtoa_r+0x86>
 8005e78:	4b14      	ldr	r3, [pc, #80]	; (8005ecc <_dtoa_r+0xb64>)
 8005e7a:	f7ff bada 	b.w	8005432 <_dtoa_r+0xca>
 8005e7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	f77f ae3f 	ble.w	8005b04 <_dtoa_r+0x79c>
 8005e86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e88:	9308      	str	r3, [sp, #32]
 8005e8a:	e653      	b.n	8005b34 <_dtoa_r+0x7cc>
 8005e8c:	9b04      	ldr	r3, [sp, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	dc03      	bgt.n	8005e9a <_dtoa_r+0xb32>
 8005e92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	f73f aed5 	bgt.w	8005c44 <_dtoa_r+0x8dc>
 8005e9a:	9d06      	ldr	r5, [sp, #24]
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	4658      	mov	r0, fp
 8005ea0:	f7ff f9d4 	bl	800524c <quorem>
 8005ea4:	9b06      	ldr	r3, [sp, #24]
 8005ea6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005eaa:	f805 8b01 	strb.w	r8, [r5], #1
 8005eae:	9a04      	ldr	r2, [sp, #16]
 8005eb0:	1aeb      	subs	r3, r5, r3
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	ddb5      	ble.n	8005e22 <_dtoa_r+0xaba>
 8005eb6:	4659      	mov	r1, fp
 8005eb8:	2300      	movs	r3, #0
 8005eba:	220a      	movs	r2, #10
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f000 f893 	bl	8005fe8 <__multadd>
 8005ec2:	4683      	mov	fp, r0
 8005ec4:	e7ea      	b.n	8005e9c <_dtoa_r+0xb34>
 8005ec6:	bf00      	nop
 8005ec8:	08007150 	.word	0x08007150
 8005ecc:	08007174 	.word	0x08007174

08005ed0 <_localeconv_r>:
 8005ed0:	4b04      	ldr	r3, [pc, #16]	; (8005ee4 <_localeconv_r+0x14>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6a18      	ldr	r0, [r3, #32]
 8005ed6:	4b04      	ldr	r3, [pc, #16]	; (8005ee8 <_localeconv_r+0x18>)
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	bf08      	it	eq
 8005edc:	4618      	moveq	r0, r3
 8005ede:	30f0      	adds	r0, #240	; 0xf0
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	20000018 	.word	0x20000018
 8005ee8:	2000007c 	.word	0x2000007c

08005eec <malloc>:
 8005eec:	4b02      	ldr	r3, [pc, #8]	; (8005ef8 <malloc+0xc>)
 8005eee:	4601      	mov	r1, r0
 8005ef0:	6818      	ldr	r0, [r3, #0]
 8005ef2:	f000 bb65 	b.w	80065c0 <_malloc_r>
 8005ef6:	bf00      	nop
 8005ef8:	20000018 	.word	0x20000018

08005efc <__ascii_mbtowc>:
 8005efc:	b082      	sub	sp, #8
 8005efe:	b901      	cbnz	r1, 8005f02 <__ascii_mbtowc+0x6>
 8005f00:	a901      	add	r1, sp, #4
 8005f02:	b142      	cbz	r2, 8005f16 <__ascii_mbtowc+0x1a>
 8005f04:	b14b      	cbz	r3, 8005f1a <__ascii_mbtowc+0x1e>
 8005f06:	7813      	ldrb	r3, [r2, #0]
 8005f08:	600b      	str	r3, [r1, #0]
 8005f0a:	7812      	ldrb	r2, [r2, #0]
 8005f0c:	1c10      	adds	r0, r2, #0
 8005f0e:	bf18      	it	ne
 8005f10:	2001      	movne	r0, #1
 8005f12:	b002      	add	sp, #8
 8005f14:	4770      	bx	lr
 8005f16:	4610      	mov	r0, r2
 8005f18:	e7fb      	b.n	8005f12 <__ascii_mbtowc+0x16>
 8005f1a:	f06f 0001 	mvn.w	r0, #1
 8005f1e:	e7f8      	b.n	8005f12 <__ascii_mbtowc+0x16>

08005f20 <memchr>:
 8005f20:	b510      	push	{r4, lr}
 8005f22:	b2c9      	uxtb	r1, r1
 8005f24:	4402      	add	r2, r0
 8005f26:	4290      	cmp	r0, r2
 8005f28:	4603      	mov	r3, r0
 8005f2a:	d101      	bne.n	8005f30 <memchr+0x10>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	e003      	b.n	8005f38 <memchr+0x18>
 8005f30:	781c      	ldrb	r4, [r3, #0]
 8005f32:	3001      	adds	r0, #1
 8005f34:	428c      	cmp	r4, r1
 8005f36:	d1f6      	bne.n	8005f26 <memchr+0x6>
 8005f38:	4618      	mov	r0, r3
 8005f3a:	bd10      	pop	{r4, pc}

08005f3c <memcpy>:
 8005f3c:	b510      	push	{r4, lr}
 8005f3e:	1e43      	subs	r3, r0, #1
 8005f40:	440a      	add	r2, r1
 8005f42:	4291      	cmp	r1, r2
 8005f44:	d100      	bne.n	8005f48 <memcpy+0xc>
 8005f46:	bd10      	pop	{r4, pc}
 8005f48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f50:	e7f7      	b.n	8005f42 <memcpy+0x6>

08005f52 <_Balloc>:
 8005f52:	b570      	push	{r4, r5, r6, lr}
 8005f54:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f56:	4604      	mov	r4, r0
 8005f58:	460e      	mov	r6, r1
 8005f5a:	b93d      	cbnz	r5, 8005f6c <_Balloc+0x1a>
 8005f5c:	2010      	movs	r0, #16
 8005f5e:	f7ff ffc5 	bl	8005eec <malloc>
 8005f62:	6260      	str	r0, [r4, #36]	; 0x24
 8005f64:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f68:	6005      	str	r5, [r0, #0]
 8005f6a:	60c5      	str	r5, [r0, #12]
 8005f6c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005f6e:	68eb      	ldr	r3, [r5, #12]
 8005f70:	b183      	cbz	r3, 8005f94 <_Balloc+0x42>
 8005f72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005f7a:	b9b8      	cbnz	r0, 8005fac <_Balloc+0x5a>
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	fa01 f506 	lsl.w	r5, r1, r6
 8005f82:	1d6a      	adds	r2, r5, #5
 8005f84:	0092      	lsls	r2, r2, #2
 8005f86:	4620      	mov	r0, r4
 8005f88:	f000 fabf 	bl	800650a <_calloc_r>
 8005f8c:	b160      	cbz	r0, 8005fa8 <_Balloc+0x56>
 8005f8e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005f92:	e00e      	b.n	8005fb2 <_Balloc+0x60>
 8005f94:	2221      	movs	r2, #33	; 0x21
 8005f96:	2104      	movs	r1, #4
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f000 fab6 	bl	800650a <_calloc_r>
 8005f9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fa0:	60e8      	str	r0, [r5, #12]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1e4      	bne.n	8005f72 <_Balloc+0x20>
 8005fa8:	2000      	movs	r0, #0
 8005faa:	bd70      	pop	{r4, r5, r6, pc}
 8005fac:	6802      	ldr	r2, [r0, #0]
 8005fae:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005fb8:	e7f7      	b.n	8005faa <_Balloc+0x58>

08005fba <_Bfree>:
 8005fba:	b570      	push	{r4, r5, r6, lr}
 8005fbc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005fbe:	4606      	mov	r6, r0
 8005fc0:	460d      	mov	r5, r1
 8005fc2:	b93c      	cbnz	r4, 8005fd4 <_Bfree+0x1a>
 8005fc4:	2010      	movs	r0, #16
 8005fc6:	f7ff ff91 	bl	8005eec <malloc>
 8005fca:	6270      	str	r0, [r6, #36]	; 0x24
 8005fcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fd0:	6004      	str	r4, [r0, #0]
 8005fd2:	60c4      	str	r4, [r0, #12]
 8005fd4:	b13d      	cbz	r5, 8005fe6 <_Bfree+0x2c>
 8005fd6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005fd8:	686a      	ldr	r2, [r5, #4]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fe0:	6029      	str	r1, [r5, #0]
 8005fe2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005fe6:	bd70      	pop	{r4, r5, r6, pc}

08005fe8 <__multadd>:
 8005fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fec:	461f      	mov	r7, r3
 8005fee:	4606      	mov	r6, r0
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	690d      	ldr	r5, [r1, #16]
 8005ff6:	f101 0c14 	add.w	ip, r1, #20
 8005ffa:	f8dc 0000 	ldr.w	r0, [ip]
 8005ffe:	3301      	adds	r3, #1
 8006000:	b281      	uxth	r1, r0
 8006002:	fb02 7101 	mla	r1, r2, r1, r7
 8006006:	0c00      	lsrs	r0, r0, #16
 8006008:	0c0f      	lsrs	r7, r1, #16
 800600a:	fb02 7000 	mla	r0, r2, r0, r7
 800600e:	b289      	uxth	r1, r1
 8006010:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006014:	429d      	cmp	r5, r3
 8006016:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800601a:	f84c 1b04 	str.w	r1, [ip], #4
 800601e:	dcec      	bgt.n	8005ffa <__multadd+0x12>
 8006020:	b1d7      	cbz	r7, 8006058 <__multadd+0x70>
 8006022:	68a3      	ldr	r3, [r4, #8]
 8006024:	42ab      	cmp	r3, r5
 8006026:	dc12      	bgt.n	800604e <__multadd+0x66>
 8006028:	6861      	ldr	r1, [r4, #4]
 800602a:	4630      	mov	r0, r6
 800602c:	3101      	adds	r1, #1
 800602e:	f7ff ff90 	bl	8005f52 <_Balloc>
 8006032:	4680      	mov	r8, r0
 8006034:	6922      	ldr	r2, [r4, #16]
 8006036:	f104 010c 	add.w	r1, r4, #12
 800603a:	3202      	adds	r2, #2
 800603c:	0092      	lsls	r2, r2, #2
 800603e:	300c      	adds	r0, #12
 8006040:	f7ff ff7c 	bl	8005f3c <memcpy>
 8006044:	4621      	mov	r1, r4
 8006046:	4630      	mov	r0, r6
 8006048:	f7ff ffb7 	bl	8005fba <_Bfree>
 800604c:	4644      	mov	r4, r8
 800604e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006052:	3501      	adds	r5, #1
 8006054:	615f      	str	r7, [r3, #20]
 8006056:	6125      	str	r5, [r4, #16]
 8006058:	4620      	mov	r0, r4
 800605a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800605e <__hi0bits>:
 800605e:	0c02      	lsrs	r2, r0, #16
 8006060:	0412      	lsls	r2, r2, #16
 8006062:	4603      	mov	r3, r0
 8006064:	b9b2      	cbnz	r2, 8006094 <__hi0bits+0x36>
 8006066:	0403      	lsls	r3, r0, #16
 8006068:	2010      	movs	r0, #16
 800606a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800606e:	bf04      	itt	eq
 8006070:	021b      	lsleq	r3, r3, #8
 8006072:	3008      	addeq	r0, #8
 8006074:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006078:	bf04      	itt	eq
 800607a:	011b      	lsleq	r3, r3, #4
 800607c:	3004      	addeq	r0, #4
 800607e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006082:	bf04      	itt	eq
 8006084:	009b      	lsleq	r3, r3, #2
 8006086:	3002      	addeq	r0, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	db06      	blt.n	800609a <__hi0bits+0x3c>
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	d503      	bpl.n	8006098 <__hi0bits+0x3a>
 8006090:	3001      	adds	r0, #1
 8006092:	4770      	bx	lr
 8006094:	2000      	movs	r0, #0
 8006096:	e7e8      	b.n	800606a <__hi0bits+0xc>
 8006098:	2020      	movs	r0, #32
 800609a:	4770      	bx	lr

0800609c <__lo0bits>:
 800609c:	6803      	ldr	r3, [r0, #0]
 800609e:	4601      	mov	r1, r0
 80060a0:	f013 0207 	ands.w	r2, r3, #7
 80060a4:	d00b      	beq.n	80060be <__lo0bits+0x22>
 80060a6:	07da      	lsls	r2, r3, #31
 80060a8:	d423      	bmi.n	80060f2 <__lo0bits+0x56>
 80060aa:	0798      	lsls	r0, r3, #30
 80060ac:	bf49      	itett	mi
 80060ae:	085b      	lsrmi	r3, r3, #1
 80060b0:	089b      	lsrpl	r3, r3, #2
 80060b2:	2001      	movmi	r0, #1
 80060b4:	600b      	strmi	r3, [r1, #0]
 80060b6:	bf5c      	itt	pl
 80060b8:	600b      	strpl	r3, [r1, #0]
 80060ba:	2002      	movpl	r0, #2
 80060bc:	4770      	bx	lr
 80060be:	b298      	uxth	r0, r3
 80060c0:	b9a8      	cbnz	r0, 80060ee <__lo0bits+0x52>
 80060c2:	2010      	movs	r0, #16
 80060c4:	0c1b      	lsrs	r3, r3, #16
 80060c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80060ca:	bf04      	itt	eq
 80060cc:	0a1b      	lsreq	r3, r3, #8
 80060ce:	3008      	addeq	r0, #8
 80060d0:	071a      	lsls	r2, r3, #28
 80060d2:	bf04      	itt	eq
 80060d4:	091b      	lsreq	r3, r3, #4
 80060d6:	3004      	addeq	r0, #4
 80060d8:	079a      	lsls	r2, r3, #30
 80060da:	bf04      	itt	eq
 80060dc:	089b      	lsreq	r3, r3, #2
 80060de:	3002      	addeq	r0, #2
 80060e0:	07da      	lsls	r2, r3, #31
 80060e2:	d402      	bmi.n	80060ea <__lo0bits+0x4e>
 80060e4:	085b      	lsrs	r3, r3, #1
 80060e6:	d006      	beq.n	80060f6 <__lo0bits+0x5a>
 80060e8:	3001      	adds	r0, #1
 80060ea:	600b      	str	r3, [r1, #0]
 80060ec:	4770      	bx	lr
 80060ee:	4610      	mov	r0, r2
 80060f0:	e7e9      	b.n	80060c6 <__lo0bits+0x2a>
 80060f2:	2000      	movs	r0, #0
 80060f4:	4770      	bx	lr
 80060f6:	2020      	movs	r0, #32
 80060f8:	4770      	bx	lr

080060fa <__i2b>:
 80060fa:	b510      	push	{r4, lr}
 80060fc:	460c      	mov	r4, r1
 80060fe:	2101      	movs	r1, #1
 8006100:	f7ff ff27 	bl	8005f52 <_Balloc>
 8006104:	2201      	movs	r2, #1
 8006106:	6144      	str	r4, [r0, #20]
 8006108:	6102      	str	r2, [r0, #16]
 800610a:	bd10      	pop	{r4, pc}

0800610c <__multiply>:
 800610c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006110:	4614      	mov	r4, r2
 8006112:	690a      	ldr	r2, [r1, #16]
 8006114:	6923      	ldr	r3, [r4, #16]
 8006116:	4688      	mov	r8, r1
 8006118:	429a      	cmp	r2, r3
 800611a:	bfbe      	ittt	lt
 800611c:	460b      	movlt	r3, r1
 800611e:	46a0      	movlt	r8, r4
 8006120:	461c      	movlt	r4, r3
 8006122:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006126:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800612a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800612e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006132:	eb07 0609 	add.w	r6, r7, r9
 8006136:	42b3      	cmp	r3, r6
 8006138:	bfb8      	it	lt
 800613a:	3101      	addlt	r1, #1
 800613c:	f7ff ff09 	bl	8005f52 <_Balloc>
 8006140:	f100 0514 	add.w	r5, r0, #20
 8006144:	462b      	mov	r3, r5
 8006146:	2200      	movs	r2, #0
 8006148:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800614c:	4573      	cmp	r3, lr
 800614e:	d316      	bcc.n	800617e <__multiply+0x72>
 8006150:	f104 0214 	add.w	r2, r4, #20
 8006154:	f108 0114 	add.w	r1, r8, #20
 8006158:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800615c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	9b00      	ldr	r3, [sp, #0]
 8006164:	9201      	str	r2, [sp, #4]
 8006166:	4293      	cmp	r3, r2
 8006168:	d80c      	bhi.n	8006184 <__multiply+0x78>
 800616a:	2e00      	cmp	r6, #0
 800616c:	dd03      	ble.n	8006176 <__multiply+0x6a>
 800616e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006172:	2b00      	cmp	r3, #0
 8006174:	d05d      	beq.n	8006232 <__multiply+0x126>
 8006176:	6106      	str	r6, [r0, #16]
 8006178:	b003      	add	sp, #12
 800617a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800617e:	f843 2b04 	str.w	r2, [r3], #4
 8006182:	e7e3      	b.n	800614c <__multiply+0x40>
 8006184:	f8b2 b000 	ldrh.w	fp, [r2]
 8006188:	f1bb 0f00 	cmp.w	fp, #0
 800618c:	d023      	beq.n	80061d6 <__multiply+0xca>
 800618e:	4689      	mov	r9, r1
 8006190:	46ac      	mov	ip, r5
 8006192:	f04f 0800 	mov.w	r8, #0
 8006196:	f859 4b04 	ldr.w	r4, [r9], #4
 800619a:	f8dc a000 	ldr.w	sl, [ip]
 800619e:	b2a3      	uxth	r3, r4
 80061a0:	fa1f fa8a 	uxth.w	sl, sl
 80061a4:	fb0b a303 	mla	r3, fp, r3, sl
 80061a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80061ac:	f8dc 4000 	ldr.w	r4, [ip]
 80061b0:	4443      	add	r3, r8
 80061b2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80061b6:	fb0b 840a 	mla	r4, fp, sl, r8
 80061ba:	46e2      	mov	sl, ip
 80061bc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80061c6:	454f      	cmp	r7, r9
 80061c8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80061cc:	f84a 3b04 	str.w	r3, [sl], #4
 80061d0:	d82b      	bhi.n	800622a <__multiply+0x11e>
 80061d2:	f8cc 8004 	str.w	r8, [ip, #4]
 80061d6:	9b01      	ldr	r3, [sp, #4]
 80061d8:	3204      	adds	r2, #4
 80061da:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80061de:	f1ba 0f00 	cmp.w	sl, #0
 80061e2:	d020      	beq.n	8006226 <__multiply+0x11a>
 80061e4:	4689      	mov	r9, r1
 80061e6:	46a8      	mov	r8, r5
 80061e8:	f04f 0b00 	mov.w	fp, #0
 80061ec:	682b      	ldr	r3, [r5, #0]
 80061ee:	f8b9 c000 	ldrh.w	ip, [r9]
 80061f2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	fb0a 440c 	mla	r4, sl, ip, r4
 80061fc:	46c4      	mov	ip, r8
 80061fe:	445c      	add	r4, fp
 8006200:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006204:	f84c 3b04 	str.w	r3, [ip], #4
 8006208:	f859 3b04 	ldr.w	r3, [r9], #4
 800620c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006210:	0c1b      	lsrs	r3, r3, #16
 8006212:	fb0a b303 	mla	r3, sl, r3, fp
 8006216:	454f      	cmp	r7, r9
 8006218:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800621c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006220:	d805      	bhi.n	800622e <__multiply+0x122>
 8006222:	f8c8 3004 	str.w	r3, [r8, #4]
 8006226:	3504      	adds	r5, #4
 8006228:	e79b      	b.n	8006162 <__multiply+0x56>
 800622a:	46d4      	mov	ip, sl
 800622c:	e7b3      	b.n	8006196 <__multiply+0x8a>
 800622e:	46e0      	mov	r8, ip
 8006230:	e7dd      	b.n	80061ee <__multiply+0xe2>
 8006232:	3e01      	subs	r6, #1
 8006234:	e799      	b.n	800616a <__multiply+0x5e>
	...

08006238 <__pow5mult>:
 8006238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800623c:	4615      	mov	r5, r2
 800623e:	f012 0203 	ands.w	r2, r2, #3
 8006242:	4606      	mov	r6, r0
 8006244:	460f      	mov	r7, r1
 8006246:	d007      	beq.n	8006258 <__pow5mult+0x20>
 8006248:	4c21      	ldr	r4, [pc, #132]	; (80062d0 <__pow5mult+0x98>)
 800624a:	3a01      	subs	r2, #1
 800624c:	2300      	movs	r3, #0
 800624e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006252:	f7ff fec9 	bl	8005fe8 <__multadd>
 8006256:	4607      	mov	r7, r0
 8006258:	10ad      	asrs	r5, r5, #2
 800625a:	d035      	beq.n	80062c8 <__pow5mult+0x90>
 800625c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800625e:	b93c      	cbnz	r4, 8006270 <__pow5mult+0x38>
 8006260:	2010      	movs	r0, #16
 8006262:	f7ff fe43 	bl	8005eec <malloc>
 8006266:	6270      	str	r0, [r6, #36]	; 0x24
 8006268:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800626c:	6004      	str	r4, [r0, #0]
 800626e:	60c4      	str	r4, [r0, #12]
 8006270:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006274:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006278:	b94c      	cbnz	r4, 800628e <__pow5mult+0x56>
 800627a:	f240 2171 	movw	r1, #625	; 0x271
 800627e:	4630      	mov	r0, r6
 8006280:	f7ff ff3b 	bl	80060fa <__i2b>
 8006284:	2300      	movs	r3, #0
 8006286:	4604      	mov	r4, r0
 8006288:	f8c8 0008 	str.w	r0, [r8, #8]
 800628c:	6003      	str	r3, [r0, #0]
 800628e:	f04f 0800 	mov.w	r8, #0
 8006292:	07eb      	lsls	r3, r5, #31
 8006294:	d50a      	bpl.n	80062ac <__pow5mult+0x74>
 8006296:	4639      	mov	r1, r7
 8006298:	4622      	mov	r2, r4
 800629a:	4630      	mov	r0, r6
 800629c:	f7ff ff36 	bl	800610c <__multiply>
 80062a0:	4681      	mov	r9, r0
 80062a2:	4639      	mov	r1, r7
 80062a4:	4630      	mov	r0, r6
 80062a6:	f7ff fe88 	bl	8005fba <_Bfree>
 80062aa:	464f      	mov	r7, r9
 80062ac:	106d      	asrs	r5, r5, #1
 80062ae:	d00b      	beq.n	80062c8 <__pow5mult+0x90>
 80062b0:	6820      	ldr	r0, [r4, #0]
 80062b2:	b938      	cbnz	r0, 80062c4 <__pow5mult+0x8c>
 80062b4:	4622      	mov	r2, r4
 80062b6:	4621      	mov	r1, r4
 80062b8:	4630      	mov	r0, r6
 80062ba:	f7ff ff27 	bl	800610c <__multiply>
 80062be:	6020      	str	r0, [r4, #0]
 80062c0:	f8c0 8000 	str.w	r8, [r0]
 80062c4:	4604      	mov	r4, r0
 80062c6:	e7e4      	b.n	8006292 <__pow5mult+0x5a>
 80062c8:	4638      	mov	r0, r7
 80062ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062ce:	bf00      	nop
 80062d0:	080072e0 	.word	0x080072e0

080062d4 <__lshift>:
 80062d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062d8:	460c      	mov	r4, r1
 80062da:	4607      	mov	r7, r0
 80062dc:	4616      	mov	r6, r2
 80062de:	6923      	ldr	r3, [r4, #16]
 80062e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062e4:	eb0a 0903 	add.w	r9, sl, r3
 80062e8:	6849      	ldr	r1, [r1, #4]
 80062ea:	68a3      	ldr	r3, [r4, #8]
 80062ec:	f109 0501 	add.w	r5, r9, #1
 80062f0:	42ab      	cmp	r3, r5
 80062f2:	db32      	blt.n	800635a <__lshift+0x86>
 80062f4:	4638      	mov	r0, r7
 80062f6:	f7ff fe2c 	bl	8005f52 <_Balloc>
 80062fa:	2300      	movs	r3, #0
 80062fc:	4680      	mov	r8, r0
 80062fe:	461a      	mov	r2, r3
 8006300:	f100 0114 	add.w	r1, r0, #20
 8006304:	4553      	cmp	r3, sl
 8006306:	db2b      	blt.n	8006360 <__lshift+0x8c>
 8006308:	6920      	ldr	r0, [r4, #16]
 800630a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800630e:	f104 0314 	add.w	r3, r4, #20
 8006312:	f016 021f 	ands.w	r2, r6, #31
 8006316:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800631a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800631e:	d025      	beq.n	800636c <__lshift+0x98>
 8006320:	2000      	movs	r0, #0
 8006322:	f1c2 0e20 	rsb	lr, r2, #32
 8006326:	468a      	mov	sl, r1
 8006328:	681e      	ldr	r6, [r3, #0]
 800632a:	4096      	lsls	r6, r2
 800632c:	4330      	orrs	r0, r6
 800632e:	f84a 0b04 	str.w	r0, [sl], #4
 8006332:	f853 0b04 	ldr.w	r0, [r3], #4
 8006336:	459c      	cmp	ip, r3
 8006338:	fa20 f00e 	lsr.w	r0, r0, lr
 800633c:	d814      	bhi.n	8006368 <__lshift+0x94>
 800633e:	6048      	str	r0, [r1, #4]
 8006340:	b108      	cbz	r0, 8006346 <__lshift+0x72>
 8006342:	f109 0502 	add.w	r5, r9, #2
 8006346:	3d01      	subs	r5, #1
 8006348:	4638      	mov	r0, r7
 800634a:	f8c8 5010 	str.w	r5, [r8, #16]
 800634e:	4621      	mov	r1, r4
 8006350:	f7ff fe33 	bl	8005fba <_Bfree>
 8006354:	4640      	mov	r0, r8
 8006356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800635a:	3101      	adds	r1, #1
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	e7c7      	b.n	80062f0 <__lshift+0x1c>
 8006360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006364:	3301      	adds	r3, #1
 8006366:	e7cd      	b.n	8006304 <__lshift+0x30>
 8006368:	4651      	mov	r1, sl
 800636a:	e7dc      	b.n	8006326 <__lshift+0x52>
 800636c:	3904      	subs	r1, #4
 800636e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006372:	459c      	cmp	ip, r3
 8006374:	f841 2f04 	str.w	r2, [r1, #4]!
 8006378:	d8f9      	bhi.n	800636e <__lshift+0x9a>
 800637a:	e7e4      	b.n	8006346 <__lshift+0x72>

0800637c <__mcmp>:
 800637c:	6903      	ldr	r3, [r0, #16]
 800637e:	690a      	ldr	r2, [r1, #16]
 8006380:	b530      	push	{r4, r5, lr}
 8006382:	1a9b      	subs	r3, r3, r2
 8006384:	d10c      	bne.n	80063a0 <__mcmp+0x24>
 8006386:	0092      	lsls	r2, r2, #2
 8006388:	3014      	adds	r0, #20
 800638a:	3114      	adds	r1, #20
 800638c:	1884      	adds	r4, r0, r2
 800638e:	4411      	add	r1, r2
 8006390:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006394:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006398:	4295      	cmp	r5, r2
 800639a:	d003      	beq.n	80063a4 <__mcmp+0x28>
 800639c:	d305      	bcc.n	80063aa <__mcmp+0x2e>
 800639e:	2301      	movs	r3, #1
 80063a0:	4618      	mov	r0, r3
 80063a2:	bd30      	pop	{r4, r5, pc}
 80063a4:	42a0      	cmp	r0, r4
 80063a6:	d3f3      	bcc.n	8006390 <__mcmp+0x14>
 80063a8:	e7fa      	b.n	80063a0 <__mcmp+0x24>
 80063aa:	f04f 33ff 	mov.w	r3, #4294967295
 80063ae:	e7f7      	b.n	80063a0 <__mcmp+0x24>

080063b0 <__mdiff>:
 80063b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b4:	460d      	mov	r5, r1
 80063b6:	4607      	mov	r7, r0
 80063b8:	4611      	mov	r1, r2
 80063ba:	4628      	mov	r0, r5
 80063bc:	4614      	mov	r4, r2
 80063be:	f7ff ffdd 	bl	800637c <__mcmp>
 80063c2:	1e06      	subs	r6, r0, #0
 80063c4:	d108      	bne.n	80063d8 <__mdiff+0x28>
 80063c6:	4631      	mov	r1, r6
 80063c8:	4638      	mov	r0, r7
 80063ca:	f7ff fdc2 	bl	8005f52 <_Balloc>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80063d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063d8:	bfa4      	itt	ge
 80063da:	4623      	movge	r3, r4
 80063dc:	462c      	movge	r4, r5
 80063de:	4638      	mov	r0, r7
 80063e0:	6861      	ldr	r1, [r4, #4]
 80063e2:	bfa6      	itte	ge
 80063e4:	461d      	movge	r5, r3
 80063e6:	2600      	movge	r6, #0
 80063e8:	2601      	movlt	r6, #1
 80063ea:	f7ff fdb2 	bl	8005f52 <_Balloc>
 80063ee:	f04f 0e00 	mov.w	lr, #0
 80063f2:	60c6      	str	r6, [r0, #12]
 80063f4:	692b      	ldr	r3, [r5, #16]
 80063f6:	6926      	ldr	r6, [r4, #16]
 80063f8:	f104 0214 	add.w	r2, r4, #20
 80063fc:	f105 0914 	add.w	r9, r5, #20
 8006400:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006404:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006408:	f100 0114 	add.w	r1, r0, #20
 800640c:	f852 ab04 	ldr.w	sl, [r2], #4
 8006410:	f859 5b04 	ldr.w	r5, [r9], #4
 8006414:	fa1f f38a 	uxth.w	r3, sl
 8006418:	4473      	add	r3, lr
 800641a:	b2ac      	uxth	r4, r5
 800641c:	1b1b      	subs	r3, r3, r4
 800641e:	0c2c      	lsrs	r4, r5, #16
 8006420:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006424:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006428:	b29b      	uxth	r3, r3
 800642a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800642e:	45c8      	cmp	r8, r9
 8006430:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006434:	4694      	mov	ip, r2
 8006436:	f841 4b04 	str.w	r4, [r1], #4
 800643a:	d8e7      	bhi.n	800640c <__mdiff+0x5c>
 800643c:	45bc      	cmp	ip, r7
 800643e:	d304      	bcc.n	800644a <__mdiff+0x9a>
 8006440:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006444:	b183      	cbz	r3, 8006468 <__mdiff+0xb8>
 8006446:	6106      	str	r6, [r0, #16]
 8006448:	e7c4      	b.n	80063d4 <__mdiff+0x24>
 800644a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800644e:	b2a2      	uxth	r2, r4
 8006450:	4472      	add	r2, lr
 8006452:	1413      	asrs	r3, r2, #16
 8006454:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006458:	b292      	uxth	r2, r2
 800645a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800645e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006462:	f841 2b04 	str.w	r2, [r1], #4
 8006466:	e7e9      	b.n	800643c <__mdiff+0x8c>
 8006468:	3e01      	subs	r6, #1
 800646a:	e7e9      	b.n	8006440 <__mdiff+0x90>

0800646c <__d2b>:
 800646c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006470:	461c      	mov	r4, r3
 8006472:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006476:	2101      	movs	r1, #1
 8006478:	4690      	mov	r8, r2
 800647a:	f7ff fd6a 	bl	8005f52 <_Balloc>
 800647e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006482:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006486:	4607      	mov	r7, r0
 8006488:	bb34      	cbnz	r4, 80064d8 <__d2b+0x6c>
 800648a:	9201      	str	r2, [sp, #4]
 800648c:	f1b8 0200 	subs.w	r2, r8, #0
 8006490:	d027      	beq.n	80064e2 <__d2b+0x76>
 8006492:	a802      	add	r0, sp, #8
 8006494:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006498:	f7ff fe00 	bl	800609c <__lo0bits>
 800649c:	9900      	ldr	r1, [sp, #0]
 800649e:	b1f0      	cbz	r0, 80064de <__d2b+0x72>
 80064a0:	9a01      	ldr	r2, [sp, #4]
 80064a2:	f1c0 0320 	rsb	r3, r0, #32
 80064a6:	fa02 f303 	lsl.w	r3, r2, r3
 80064aa:	430b      	orrs	r3, r1
 80064ac:	40c2      	lsrs	r2, r0
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	9201      	str	r2, [sp, #4]
 80064b2:	9b01      	ldr	r3, [sp, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	bf14      	ite	ne
 80064b8:	2102      	movne	r1, #2
 80064ba:	2101      	moveq	r1, #1
 80064bc:	61bb      	str	r3, [r7, #24]
 80064be:	6139      	str	r1, [r7, #16]
 80064c0:	b1c4      	cbz	r4, 80064f4 <__d2b+0x88>
 80064c2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80064c6:	4404      	add	r4, r0
 80064c8:	6034      	str	r4, [r6, #0]
 80064ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80064ce:	6028      	str	r0, [r5, #0]
 80064d0:	4638      	mov	r0, r7
 80064d2:	b002      	add	sp, #8
 80064d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064d8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80064dc:	e7d5      	b.n	800648a <__d2b+0x1e>
 80064de:	6179      	str	r1, [r7, #20]
 80064e0:	e7e7      	b.n	80064b2 <__d2b+0x46>
 80064e2:	a801      	add	r0, sp, #4
 80064e4:	f7ff fdda 	bl	800609c <__lo0bits>
 80064e8:	2101      	movs	r1, #1
 80064ea:	9b01      	ldr	r3, [sp, #4]
 80064ec:	6139      	str	r1, [r7, #16]
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	3020      	adds	r0, #32
 80064f2:	e7e5      	b.n	80064c0 <__d2b+0x54>
 80064f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80064f8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80064fc:	6030      	str	r0, [r6, #0]
 80064fe:	6918      	ldr	r0, [r3, #16]
 8006500:	f7ff fdad 	bl	800605e <__hi0bits>
 8006504:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006508:	e7e1      	b.n	80064ce <__d2b+0x62>

0800650a <_calloc_r>:
 800650a:	b538      	push	{r3, r4, r5, lr}
 800650c:	fb02 f401 	mul.w	r4, r2, r1
 8006510:	4621      	mov	r1, r4
 8006512:	f000 f855 	bl	80065c0 <_malloc_r>
 8006516:	4605      	mov	r5, r0
 8006518:	b118      	cbz	r0, 8006522 <_calloc_r+0x18>
 800651a:	4622      	mov	r2, r4
 800651c:	2100      	movs	r1, #0
 800651e:	f7fe fa1d 	bl	800495c <memset>
 8006522:	4628      	mov	r0, r5
 8006524:	bd38      	pop	{r3, r4, r5, pc}
	...

08006528 <_free_r>:
 8006528:	b538      	push	{r3, r4, r5, lr}
 800652a:	4605      	mov	r5, r0
 800652c:	2900      	cmp	r1, #0
 800652e:	d043      	beq.n	80065b8 <_free_r+0x90>
 8006530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006534:	1f0c      	subs	r4, r1, #4
 8006536:	2b00      	cmp	r3, #0
 8006538:	bfb8      	it	lt
 800653a:	18e4      	addlt	r4, r4, r3
 800653c:	f000 fa22 	bl	8006984 <__malloc_lock>
 8006540:	4a1e      	ldr	r2, [pc, #120]	; (80065bc <_free_r+0x94>)
 8006542:	6813      	ldr	r3, [r2, #0]
 8006544:	4610      	mov	r0, r2
 8006546:	b933      	cbnz	r3, 8006556 <_free_r+0x2e>
 8006548:	6063      	str	r3, [r4, #4]
 800654a:	6014      	str	r4, [r2, #0]
 800654c:	4628      	mov	r0, r5
 800654e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006552:	f000 ba18 	b.w	8006986 <__malloc_unlock>
 8006556:	42a3      	cmp	r3, r4
 8006558:	d90b      	bls.n	8006572 <_free_r+0x4a>
 800655a:	6821      	ldr	r1, [r4, #0]
 800655c:	1862      	adds	r2, r4, r1
 800655e:	4293      	cmp	r3, r2
 8006560:	bf01      	itttt	eq
 8006562:	681a      	ldreq	r2, [r3, #0]
 8006564:	685b      	ldreq	r3, [r3, #4]
 8006566:	1852      	addeq	r2, r2, r1
 8006568:	6022      	streq	r2, [r4, #0]
 800656a:	6063      	str	r3, [r4, #4]
 800656c:	6004      	str	r4, [r0, #0]
 800656e:	e7ed      	b.n	800654c <_free_r+0x24>
 8006570:	4613      	mov	r3, r2
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	b10a      	cbz	r2, 800657a <_free_r+0x52>
 8006576:	42a2      	cmp	r2, r4
 8006578:	d9fa      	bls.n	8006570 <_free_r+0x48>
 800657a:	6819      	ldr	r1, [r3, #0]
 800657c:	1858      	adds	r0, r3, r1
 800657e:	42a0      	cmp	r0, r4
 8006580:	d10b      	bne.n	800659a <_free_r+0x72>
 8006582:	6820      	ldr	r0, [r4, #0]
 8006584:	4401      	add	r1, r0
 8006586:	1858      	adds	r0, r3, r1
 8006588:	4282      	cmp	r2, r0
 800658a:	6019      	str	r1, [r3, #0]
 800658c:	d1de      	bne.n	800654c <_free_r+0x24>
 800658e:	6810      	ldr	r0, [r2, #0]
 8006590:	6852      	ldr	r2, [r2, #4]
 8006592:	4401      	add	r1, r0
 8006594:	6019      	str	r1, [r3, #0]
 8006596:	605a      	str	r2, [r3, #4]
 8006598:	e7d8      	b.n	800654c <_free_r+0x24>
 800659a:	d902      	bls.n	80065a2 <_free_r+0x7a>
 800659c:	230c      	movs	r3, #12
 800659e:	602b      	str	r3, [r5, #0]
 80065a0:	e7d4      	b.n	800654c <_free_r+0x24>
 80065a2:	6820      	ldr	r0, [r4, #0]
 80065a4:	1821      	adds	r1, r4, r0
 80065a6:	428a      	cmp	r2, r1
 80065a8:	bf01      	itttt	eq
 80065aa:	6811      	ldreq	r1, [r2, #0]
 80065ac:	6852      	ldreq	r2, [r2, #4]
 80065ae:	1809      	addeq	r1, r1, r0
 80065b0:	6021      	streq	r1, [r4, #0]
 80065b2:	6062      	str	r2, [r4, #4]
 80065b4:	605c      	str	r4, [r3, #4]
 80065b6:	e7c9      	b.n	800654c <_free_r+0x24>
 80065b8:	bd38      	pop	{r3, r4, r5, pc}
 80065ba:	bf00      	nop
 80065bc:	2000024c 	.word	0x2000024c

080065c0 <_malloc_r>:
 80065c0:	b570      	push	{r4, r5, r6, lr}
 80065c2:	1ccd      	adds	r5, r1, #3
 80065c4:	f025 0503 	bic.w	r5, r5, #3
 80065c8:	3508      	adds	r5, #8
 80065ca:	2d0c      	cmp	r5, #12
 80065cc:	bf38      	it	cc
 80065ce:	250c      	movcc	r5, #12
 80065d0:	2d00      	cmp	r5, #0
 80065d2:	4606      	mov	r6, r0
 80065d4:	db01      	blt.n	80065da <_malloc_r+0x1a>
 80065d6:	42a9      	cmp	r1, r5
 80065d8:	d903      	bls.n	80065e2 <_malloc_r+0x22>
 80065da:	230c      	movs	r3, #12
 80065dc:	6033      	str	r3, [r6, #0]
 80065de:	2000      	movs	r0, #0
 80065e0:	bd70      	pop	{r4, r5, r6, pc}
 80065e2:	f000 f9cf 	bl	8006984 <__malloc_lock>
 80065e6:	4a21      	ldr	r2, [pc, #132]	; (800666c <_malloc_r+0xac>)
 80065e8:	6814      	ldr	r4, [r2, #0]
 80065ea:	4621      	mov	r1, r4
 80065ec:	b991      	cbnz	r1, 8006614 <_malloc_r+0x54>
 80065ee:	4c20      	ldr	r4, [pc, #128]	; (8006670 <_malloc_r+0xb0>)
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	b91b      	cbnz	r3, 80065fc <_malloc_r+0x3c>
 80065f4:	4630      	mov	r0, r6
 80065f6:	f000 f98f 	bl	8006918 <_sbrk_r>
 80065fa:	6020      	str	r0, [r4, #0]
 80065fc:	4629      	mov	r1, r5
 80065fe:	4630      	mov	r0, r6
 8006600:	f000 f98a 	bl	8006918 <_sbrk_r>
 8006604:	1c43      	adds	r3, r0, #1
 8006606:	d124      	bne.n	8006652 <_malloc_r+0x92>
 8006608:	230c      	movs	r3, #12
 800660a:	4630      	mov	r0, r6
 800660c:	6033      	str	r3, [r6, #0]
 800660e:	f000 f9ba 	bl	8006986 <__malloc_unlock>
 8006612:	e7e4      	b.n	80065de <_malloc_r+0x1e>
 8006614:	680b      	ldr	r3, [r1, #0]
 8006616:	1b5b      	subs	r3, r3, r5
 8006618:	d418      	bmi.n	800664c <_malloc_r+0x8c>
 800661a:	2b0b      	cmp	r3, #11
 800661c:	d90f      	bls.n	800663e <_malloc_r+0x7e>
 800661e:	600b      	str	r3, [r1, #0]
 8006620:	18cc      	adds	r4, r1, r3
 8006622:	50cd      	str	r5, [r1, r3]
 8006624:	4630      	mov	r0, r6
 8006626:	f000 f9ae 	bl	8006986 <__malloc_unlock>
 800662a:	f104 000b 	add.w	r0, r4, #11
 800662e:	1d23      	adds	r3, r4, #4
 8006630:	f020 0007 	bic.w	r0, r0, #7
 8006634:	1ac3      	subs	r3, r0, r3
 8006636:	d0d3      	beq.n	80065e0 <_malloc_r+0x20>
 8006638:	425a      	negs	r2, r3
 800663a:	50e2      	str	r2, [r4, r3]
 800663c:	e7d0      	b.n	80065e0 <_malloc_r+0x20>
 800663e:	684b      	ldr	r3, [r1, #4]
 8006640:	428c      	cmp	r4, r1
 8006642:	bf16      	itet	ne
 8006644:	6063      	strne	r3, [r4, #4]
 8006646:	6013      	streq	r3, [r2, #0]
 8006648:	460c      	movne	r4, r1
 800664a:	e7eb      	b.n	8006624 <_malloc_r+0x64>
 800664c:	460c      	mov	r4, r1
 800664e:	6849      	ldr	r1, [r1, #4]
 8006650:	e7cc      	b.n	80065ec <_malloc_r+0x2c>
 8006652:	1cc4      	adds	r4, r0, #3
 8006654:	f024 0403 	bic.w	r4, r4, #3
 8006658:	42a0      	cmp	r0, r4
 800665a:	d005      	beq.n	8006668 <_malloc_r+0xa8>
 800665c:	1a21      	subs	r1, r4, r0
 800665e:	4630      	mov	r0, r6
 8006660:	f000 f95a 	bl	8006918 <_sbrk_r>
 8006664:	3001      	adds	r0, #1
 8006666:	d0cf      	beq.n	8006608 <_malloc_r+0x48>
 8006668:	6025      	str	r5, [r4, #0]
 800666a:	e7db      	b.n	8006624 <_malloc_r+0x64>
 800666c:	2000024c 	.word	0x2000024c
 8006670:	20000250 	.word	0x20000250

08006674 <__ssputs_r>:
 8006674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006678:	688e      	ldr	r6, [r1, #8]
 800667a:	4682      	mov	sl, r0
 800667c:	429e      	cmp	r6, r3
 800667e:	460c      	mov	r4, r1
 8006680:	4690      	mov	r8, r2
 8006682:	4699      	mov	r9, r3
 8006684:	d837      	bhi.n	80066f6 <__ssputs_r+0x82>
 8006686:	898a      	ldrh	r2, [r1, #12]
 8006688:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800668c:	d031      	beq.n	80066f2 <__ssputs_r+0x7e>
 800668e:	2302      	movs	r3, #2
 8006690:	6825      	ldr	r5, [r4, #0]
 8006692:	6909      	ldr	r1, [r1, #16]
 8006694:	1a6f      	subs	r7, r5, r1
 8006696:	6965      	ldr	r5, [r4, #20]
 8006698:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800669c:	fb95 f5f3 	sdiv	r5, r5, r3
 80066a0:	f109 0301 	add.w	r3, r9, #1
 80066a4:	443b      	add	r3, r7
 80066a6:	429d      	cmp	r5, r3
 80066a8:	bf38      	it	cc
 80066aa:	461d      	movcc	r5, r3
 80066ac:	0553      	lsls	r3, r2, #21
 80066ae:	d530      	bpl.n	8006712 <__ssputs_r+0x9e>
 80066b0:	4629      	mov	r1, r5
 80066b2:	f7ff ff85 	bl	80065c0 <_malloc_r>
 80066b6:	4606      	mov	r6, r0
 80066b8:	b950      	cbnz	r0, 80066d0 <__ssputs_r+0x5c>
 80066ba:	230c      	movs	r3, #12
 80066bc:	f04f 30ff 	mov.w	r0, #4294967295
 80066c0:	f8ca 3000 	str.w	r3, [sl]
 80066c4:	89a3      	ldrh	r3, [r4, #12]
 80066c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ca:	81a3      	strh	r3, [r4, #12]
 80066cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066d0:	463a      	mov	r2, r7
 80066d2:	6921      	ldr	r1, [r4, #16]
 80066d4:	f7ff fc32 	bl	8005f3c <memcpy>
 80066d8:	89a3      	ldrh	r3, [r4, #12]
 80066da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e2:	81a3      	strh	r3, [r4, #12]
 80066e4:	6126      	str	r6, [r4, #16]
 80066e6:	443e      	add	r6, r7
 80066e8:	6026      	str	r6, [r4, #0]
 80066ea:	464e      	mov	r6, r9
 80066ec:	6165      	str	r5, [r4, #20]
 80066ee:	1bed      	subs	r5, r5, r7
 80066f0:	60a5      	str	r5, [r4, #8]
 80066f2:	454e      	cmp	r6, r9
 80066f4:	d900      	bls.n	80066f8 <__ssputs_r+0x84>
 80066f6:	464e      	mov	r6, r9
 80066f8:	4632      	mov	r2, r6
 80066fa:	4641      	mov	r1, r8
 80066fc:	6820      	ldr	r0, [r4, #0]
 80066fe:	f000 f928 	bl	8006952 <memmove>
 8006702:	68a3      	ldr	r3, [r4, #8]
 8006704:	2000      	movs	r0, #0
 8006706:	1b9b      	subs	r3, r3, r6
 8006708:	60a3      	str	r3, [r4, #8]
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	441e      	add	r6, r3
 800670e:	6026      	str	r6, [r4, #0]
 8006710:	e7dc      	b.n	80066cc <__ssputs_r+0x58>
 8006712:	462a      	mov	r2, r5
 8006714:	f000 f938 	bl	8006988 <_realloc_r>
 8006718:	4606      	mov	r6, r0
 800671a:	2800      	cmp	r0, #0
 800671c:	d1e2      	bne.n	80066e4 <__ssputs_r+0x70>
 800671e:	6921      	ldr	r1, [r4, #16]
 8006720:	4650      	mov	r0, sl
 8006722:	f7ff ff01 	bl	8006528 <_free_r>
 8006726:	e7c8      	b.n	80066ba <__ssputs_r+0x46>

08006728 <_svfiprintf_r>:
 8006728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672c:	461d      	mov	r5, r3
 800672e:	898b      	ldrh	r3, [r1, #12]
 8006730:	b09d      	sub	sp, #116	; 0x74
 8006732:	061f      	lsls	r7, r3, #24
 8006734:	4680      	mov	r8, r0
 8006736:	460c      	mov	r4, r1
 8006738:	4616      	mov	r6, r2
 800673a:	d50f      	bpl.n	800675c <_svfiprintf_r+0x34>
 800673c:	690b      	ldr	r3, [r1, #16]
 800673e:	b96b      	cbnz	r3, 800675c <_svfiprintf_r+0x34>
 8006740:	2140      	movs	r1, #64	; 0x40
 8006742:	f7ff ff3d 	bl	80065c0 <_malloc_r>
 8006746:	6020      	str	r0, [r4, #0]
 8006748:	6120      	str	r0, [r4, #16]
 800674a:	b928      	cbnz	r0, 8006758 <_svfiprintf_r+0x30>
 800674c:	230c      	movs	r3, #12
 800674e:	f8c8 3000 	str.w	r3, [r8]
 8006752:	f04f 30ff 	mov.w	r0, #4294967295
 8006756:	e0c8      	b.n	80068ea <_svfiprintf_r+0x1c2>
 8006758:	2340      	movs	r3, #64	; 0x40
 800675a:	6163      	str	r3, [r4, #20]
 800675c:	2300      	movs	r3, #0
 800675e:	9309      	str	r3, [sp, #36]	; 0x24
 8006760:	2320      	movs	r3, #32
 8006762:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006766:	2330      	movs	r3, #48	; 0x30
 8006768:	f04f 0b01 	mov.w	fp, #1
 800676c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006770:	9503      	str	r5, [sp, #12]
 8006772:	4637      	mov	r7, r6
 8006774:	463d      	mov	r5, r7
 8006776:	f815 3b01 	ldrb.w	r3, [r5], #1
 800677a:	b10b      	cbz	r3, 8006780 <_svfiprintf_r+0x58>
 800677c:	2b25      	cmp	r3, #37	; 0x25
 800677e:	d13e      	bne.n	80067fe <_svfiprintf_r+0xd6>
 8006780:	ebb7 0a06 	subs.w	sl, r7, r6
 8006784:	d00b      	beq.n	800679e <_svfiprintf_r+0x76>
 8006786:	4653      	mov	r3, sl
 8006788:	4632      	mov	r2, r6
 800678a:	4621      	mov	r1, r4
 800678c:	4640      	mov	r0, r8
 800678e:	f7ff ff71 	bl	8006674 <__ssputs_r>
 8006792:	3001      	adds	r0, #1
 8006794:	f000 80a4 	beq.w	80068e0 <_svfiprintf_r+0x1b8>
 8006798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800679a:	4453      	add	r3, sl
 800679c:	9309      	str	r3, [sp, #36]	; 0x24
 800679e:	783b      	ldrb	r3, [r7, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 809d 	beq.w	80068e0 <_svfiprintf_r+0x1b8>
 80067a6:	2300      	movs	r3, #0
 80067a8:	f04f 32ff 	mov.w	r2, #4294967295
 80067ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067b0:	9304      	str	r3, [sp, #16]
 80067b2:	9307      	str	r3, [sp, #28]
 80067b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067b8:	931a      	str	r3, [sp, #104]	; 0x68
 80067ba:	462f      	mov	r7, r5
 80067bc:	2205      	movs	r2, #5
 80067be:	f817 1b01 	ldrb.w	r1, [r7], #1
 80067c2:	4850      	ldr	r0, [pc, #320]	; (8006904 <_svfiprintf_r+0x1dc>)
 80067c4:	f7ff fbac 	bl	8005f20 <memchr>
 80067c8:	9b04      	ldr	r3, [sp, #16]
 80067ca:	b9d0      	cbnz	r0, 8006802 <_svfiprintf_r+0xda>
 80067cc:	06d9      	lsls	r1, r3, #27
 80067ce:	bf44      	itt	mi
 80067d0:	2220      	movmi	r2, #32
 80067d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80067d6:	071a      	lsls	r2, r3, #28
 80067d8:	bf44      	itt	mi
 80067da:	222b      	movmi	r2, #43	; 0x2b
 80067dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80067e0:	782a      	ldrb	r2, [r5, #0]
 80067e2:	2a2a      	cmp	r2, #42	; 0x2a
 80067e4:	d015      	beq.n	8006812 <_svfiprintf_r+0xea>
 80067e6:	462f      	mov	r7, r5
 80067e8:	2000      	movs	r0, #0
 80067ea:	250a      	movs	r5, #10
 80067ec:	9a07      	ldr	r2, [sp, #28]
 80067ee:	4639      	mov	r1, r7
 80067f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067f4:	3b30      	subs	r3, #48	; 0x30
 80067f6:	2b09      	cmp	r3, #9
 80067f8:	d94d      	bls.n	8006896 <_svfiprintf_r+0x16e>
 80067fa:	b1b8      	cbz	r0, 800682c <_svfiprintf_r+0x104>
 80067fc:	e00f      	b.n	800681e <_svfiprintf_r+0xf6>
 80067fe:	462f      	mov	r7, r5
 8006800:	e7b8      	b.n	8006774 <_svfiprintf_r+0x4c>
 8006802:	4a40      	ldr	r2, [pc, #256]	; (8006904 <_svfiprintf_r+0x1dc>)
 8006804:	463d      	mov	r5, r7
 8006806:	1a80      	subs	r0, r0, r2
 8006808:	fa0b f000 	lsl.w	r0, fp, r0
 800680c:	4318      	orrs	r0, r3
 800680e:	9004      	str	r0, [sp, #16]
 8006810:	e7d3      	b.n	80067ba <_svfiprintf_r+0x92>
 8006812:	9a03      	ldr	r2, [sp, #12]
 8006814:	1d11      	adds	r1, r2, #4
 8006816:	6812      	ldr	r2, [r2, #0]
 8006818:	9103      	str	r1, [sp, #12]
 800681a:	2a00      	cmp	r2, #0
 800681c:	db01      	blt.n	8006822 <_svfiprintf_r+0xfa>
 800681e:	9207      	str	r2, [sp, #28]
 8006820:	e004      	b.n	800682c <_svfiprintf_r+0x104>
 8006822:	4252      	negs	r2, r2
 8006824:	f043 0302 	orr.w	r3, r3, #2
 8006828:	9207      	str	r2, [sp, #28]
 800682a:	9304      	str	r3, [sp, #16]
 800682c:	783b      	ldrb	r3, [r7, #0]
 800682e:	2b2e      	cmp	r3, #46	; 0x2e
 8006830:	d10c      	bne.n	800684c <_svfiprintf_r+0x124>
 8006832:	787b      	ldrb	r3, [r7, #1]
 8006834:	2b2a      	cmp	r3, #42	; 0x2a
 8006836:	d133      	bne.n	80068a0 <_svfiprintf_r+0x178>
 8006838:	9b03      	ldr	r3, [sp, #12]
 800683a:	3702      	adds	r7, #2
 800683c:	1d1a      	adds	r2, r3, #4
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	9203      	str	r2, [sp, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	bfb8      	it	lt
 8006846:	f04f 33ff 	movlt.w	r3, #4294967295
 800684a:	9305      	str	r3, [sp, #20]
 800684c:	4d2e      	ldr	r5, [pc, #184]	; (8006908 <_svfiprintf_r+0x1e0>)
 800684e:	2203      	movs	r2, #3
 8006850:	7839      	ldrb	r1, [r7, #0]
 8006852:	4628      	mov	r0, r5
 8006854:	f7ff fb64 	bl	8005f20 <memchr>
 8006858:	b138      	cbz	r0, 800686a <_svfiprintf_r+0x142>
 800685a:	2340      	movs	r3, #64	; 0x40
 800685c:	1b40      	subs	r0, r0, r5
 800685e:	fa03 f000 	lsl.w	r0, r3, r0
 8006862:	9b04      	ldr	r3, [sp, #16]
 8006864:	3701      	adds	r7, #1
 8006866:	4303      	orrs	r3, r0
 8006868:	9304      	str	r3, [sp, #16]
 800686a:	7839      	ldrb	r1, [r7, #0]
 800686c:	2206      	movs	r2, #6
 800686e:	4827      	ldr	r0, [pc, #156]	; (800690c <_svfiprintf_r+0x1e4>)
 8006870:	1c7e      	adds	r6, r7, #1
 8006872:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006876:	f7ff fb53 	bl	8005f20 <memchr>
 800687a:	2800      	cmp	r0, #0
 800687c:	d038      	beq.n	80068f0 <_svfiprintf_r+0x1c8>
 800687e:	4b24      	ldr	r3, [pc, #144]	; (8006910 <_svfiprintf_r+0x1e8>)
 8006880:	bb13      	cbnz	r3, 80068c8 <_svfiprintf_r+0x1a0>
 8006882:	9b03      	ldr	r3, [sp, #12]
 8006884:	3307      	adds	r3, #7
 8006886:	f023 0307 	bic.w	r3, r3, #7
 800688a:	3308      	adds	r3, #8
 800688c:	9303      	str	r3, [sp, #12]
 800688e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006890:	444b      	add	r3, r9
 8006892:	9309      	str	r3, [sp, #36]	; 0x24
 8006894:	e76d      	b.n	8006772 <_svfiprintf_r+0x4a>
 8006896:	fb05 3202 	mla	r2, r5, r2, r3
 800689a:	2001      	movs	r0, #1
 800689c:	460f      	mov	r7, r1
 800689e:	e7a6      	b.n	80067ee <_svfiprintf_r+0xc6>
 80068a0:	2300      	movs	r3, #0
 80068a2:	250a      	movs	r5, #10
 80068a4:	4619      	mov	r1, r3
 80068a6:	3701      	adds	r7, #1
 80068a8:	9305      	str	r3, [sp, #20]
 80068aa:	4638      	mov	r0, r7
 80068ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068b0:	3a30      	subs	r2, #48	; 0x30
 80068b2:	2a09      	cmp	r2, #9
 80068b4:	d903      	bls.n	80068be <_svfiprintf_r+0x196>
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d0c8      	beq.n	800684c <_svfiprintf_r+0x124>
 80068ba:	9105      	str	r1, [sp, #20]
 80068bc:	e7c6      	b.n	800684c <_svfiprintf_r+0x124>
 80068be:	fb05 2101 	mla	r1, r5, r1, r2
 80068c2:	2301      	movs	r3, #1
 80068c4:	4607      	mov	r7, r0
 80068c6:	e7f0      	b.n	80068aa <_svfiprintf_r+0x182>
 80068c8:	ab03      	add	r3, sp, #12
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	4622      	mov	r2, r4
 80068ce:	4b11      	ldr	r3, [pc, #68]	; (8006914 <_svfiprintf_r+0x1ec>)
 80068d0:	a904      	add	r1, sp, #16
 80068d2:	4640      	mov	r0, r8
 80068d4:	f7fe f8dc 	bl	8004a90 <_printf_float>
 80068d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80068dc:	4681      	mov	r9, r0
 80068de:	d1d6      	bne.n	800688e <_svfiprintf_r+0x166>
 80068e0:	89a3      	ldrh	r3, [r4, #12]
 80068e2:	065b      	lsls	r3, r3, #25
 80068e4:	f53f af35 	bmi.w	8006752 <_svfiprintf_r+0x2a>
 80068e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068ea:	b01d      	add	sp, #116	; 0x74
 80068ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f0:	ab03      	add	r3, sp, #12
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	4622      	mov	r2, r4
 80068f6:	4b07      	ldr	r3, [pc, #28]	; (8006914 <_svfiprintf_r+0x1ec>)
 80068f8:	a904      	add	r1, sp, #16
 80068fa:	4640      	mov	r0, r8
 80068fc:	f7fe fb74 	bl	8004fe8 <_printf_i>
 8006900:	e7ea      	b.n	80068d8 <_svfiprintf_r+0x1b0>
 8006902:	bf00      	nop
 8006904:	080072ec 	.word	0x080072ec
 8006908:	080072f2 	.word	0x080072f2
 800690c:	080072f6 	.word	0x080072f6
 8006910:	08004a91 	.word	0x08004a91
 8006914:	08006675 	.word	0x08006675

08006918 <_sbrk_r>:
 8006918:	b538      	push	{r3, r4, r5, lr}
 800691a:	2300      	movs	r3, #0
 800691c:	4c05      	ldr	r4, [pc, #20]	; (8006934 <_sbrk_r+0x1c>)
 800691e:	4605      	mov	r5, r0
 8006920:	4608      	mov	r0, r1
 8006922:	6023      	str	r3, [r4, #0]
 8006924:	f7fb f84e 	bl	80019c4 <_sbrk>
 8006928:	1c43      	adds	r3, r0, #1
 800692a:	d102      	bne.n	8006932 <_sbrk_r+0x1a>
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	b103      	cbz	r3, 8006932 <_sbrk_r+0x1a>
 8006930:	602b      	str	r3, [r5, #0]
 8006932:	bd38      	pop	{r3, r4, r5, pc}
 8006934:	200003ac 	.word	0x200003ac

08006938 <__ascii_wctomb>:
 8006938:	b149      	cbz	r1, 800694e <__ascii_wctomb+0x16>
 800693a:	2aff      	cmp	r2, #255	; 0xff
 800693c:	bf8b      	itete	hi
 800693e:	238a      	movhi	r3, #138	; 0x8a
 8006940:	700a      	strbls	r2, [r1, #0]
 8006942:	6003      	strhi	r3, [r0, #0]
 8006944:	2001      	movls	r0, #1
 8006946:	bf88      	it	hi
 8006948:	f04f 30ff 	movhi.w	r0, #4294967295
 800694c:	4770      	bx	lr
 800694e:	4608      	mov	r0, r1
 8006950:	4770      	bx	lr

08006952 <memmove>:
 8006952:	4288      	cmp	r0, r1
 8006954:	b510      	push	{r4, lr}
 8006956:	eb01 0302 	add.w	r3, r1, r2
 800695a:	d807      	bhi.n	800696c <memmove+0x1a>
 800695c:	1e42      	subs	r2, r0, #1
 800695e:	4299      	cmp	r1, r3
 8006960:	d00a      	beq.n	8006978 <memmove+0x26>
 8006962:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006966:	f802 4f01 	strb.w	r4, [r2, #1]!
 800696a:	e7f8      	b.n	800695e <memmove+0xc>
 800696c:	4283      	cmp	r3, r0
 800696e:	d9f5      	bls.n	800695c <memmove+0xa>
 8006970:	1881      	adds	r1, r0, r2
 8006972:	1ad2      	subs	r2, r2, r3
 8006974:	42d3      	cmn	r3, r2
 8006976:	d100      	bne.n	800697a <memmove+0x28>
 8006978:	bd10      	pop	{r4, pc}
 800697a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800697e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006982:	e7f7      	b.n	8006974 <memmove+0x22>

08006984 <__malloc_lock>:
 8006984:	4770      	bx	lr

08006986 <__malloc_unlock>:
 8006986:	4770      	bx	lr

08006988 <_realloc_r>:
 8006988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698a:	4607      	mov	r7, r0
 800698c:	4614      	mov	r4, r2
 800698e:	460e      	mov	r6, r1
 8006990:	b921      	cbnz	r1, 800699c <_realloc_r+0x14>
 8006992:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006996:	4611      	mov	r1, r2
 8006998:	f7ff be12 	b.w	80065c0 <_malloc_r>
 800699c:	b922      	cbnz	r2, 80069a8 <_realloc_r+0x20>
 800699e:	f7ff fdc3 	bl	8006528 <_free_r>
 80069a2:	4625      	mov	r5, r4
 80069a4:	4628      	mov	r0, r5
 80069a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069a8:	f000 f814 	bl	80069d4 <_malloc_usable_size_r>
 80069ac:	42a0      	cmp	r0, r4
 80069ae:	d20f      	bcs.n	80069d0 <_realloc_r+0x48>
 80069b0:	4621      	mov	r1, r4
 80069b2:	4638      	mov	r0, r7
 80069b4:	f7ff fe04 	bl	80065c0 <_malloc_r>
 80069b8:	4605      	mov	r5, r0
 80069ba:	2800      	cmp	r0, #0
 80069bc:	d0f2      	beq.n	80069a4 <_realloc_r+0x1c>
 80069be:	4631      	mov	r1, r6
 80069c0:	4622      	mov	r2, r4
 80069c2:	f7ff fabb 	bl	8005f3c <memcpy>
 80069c6:	4631      	mov	r1, r6
 80069c8:	4638      	mov	r0, r7
 80069ca:	f7ff fdad 	bl	8006528 <_free_r>
 80069ce:	e7e9      	b.n	80069a4 <_realloc_r+0x1c>
 80069d0:	4635      	mov	r5, r6
 80069d2:	e7e7      	b.n	80069a4 <_realloc_r+0x1c>

080069d4 <_malloc_usable_size_r>:
 80069d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069d8:	1f18      	subs	r0, r3, #4
 80069da:	2b00      	cmp	r3, #0
 80069dc:	bfbc      	itt	lt
 80069de:	580b      	ldrlt	r3, [r1, r0]
 80069e0:	18c0      	addlt	r0, r0, r3
 80069e2:	4770      	bx	lr

080069e4 <_init>:
 80069e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e6:	bf00      	nop
 80069e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ea:	bc08      	pop	{r3}
 80069ec:	469e      	mov	lr, r3
 80069ee:	4770      	bx	lr

080069f0 <_fini>:
 80069f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f2:	bf00      	nop
 80069f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069f6:	bc08      	pop	{r3}
 80069f8:	469e      	mov	lr, r3
 80069fa:	4770      	bx	lr
